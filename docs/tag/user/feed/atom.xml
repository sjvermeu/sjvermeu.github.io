<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Simplicity is a form of art... - user</title><link href="https://blog.siphos.be/" rel="alternate"></link><link href="https://blog.siphos.be/tag/user/feed/atom.xml" rel="self"></link><id>https://blog.siphos.be/</id><updated>2013-04-27T03:50:00+02:00</updated><entry><title>How logins get their SELinux user context</title><link href="https://blog.siphos.be/2013/04/how-logins-get-their-selinux-user-context/" rel="alternate"></link><published>2013-04-27T03:50:00+02:00</published><updated>2013-04-27T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-04-27:/2013/04/how-logins-get-their-selinux-user-context/</id><summary type="html">&lt;p&gt;Sometimes, especially when users are converting their systems to be
SELinux-enabled, their user context is wrong. An example would be when,
after logon (in permissive mode), the user is in the
&lt;code&gt;system_u:system_r:local_login_t&lt;/code&gt; domain instead of a user domain like
&lt;code&gt;staff_u:staff_r:staff â€¦&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes, especially when users are converting their systems to be
SELinux-enabled, their user context is wrong. An example would be when,
after logon (in permissive mode), the user is in the
&lt;code&gt;system_u:system_r:local_login_t&lt;/code&gt; domain instead of a user domain like
&lt;code&gt;staff_u:staff_r:staff_t&lt;/code&gt;.&lt;br&gt;
So, how does a login get its SELinux user context?&lt;/p&gt;
&lt;p&gt;Let's look at the entire chain of SELinux context changes across a boot.
At first, when the system boots, the kernel (and all processes invoked
from it) run in the &lt;code&gt;kernel_t&lt;/code&gt; domain (I'm going to ignore the other
context fields for now until they become relevant). When the kernel
initialization has been completed, the kernel executes the &lt;strong&gt;init&lt;/strong&gt;
binary. When you use an initramfs, then a script might be called. This
actually doesn't matter that much yet, since SELinux stays within the
&lt;code&gt;kernel_t&lt;/code&gt; domain &lt;em&gt;until&lt;/em&gt; a SELinux-aware &lt;strong&gt;init&lt;/strong&gt; is launched.&lt;/p&gt;
&lt;p&gt;When the &lt;strong&gt;init&lt;/strong&gt; binary is executed, init of course starts. But as
mentioned, init is SELinux-aware, meaning it will invoke SELinux-related
commands. One of these is that it will load the SELinux policy (as
stored in &lt;code&gt;/etc/selinux&lt;/code&gt;) and then reexecute itself. Because of that,
its process context changes from &lt;code&gt;kernel_t&lt;/code&gt; towards &lt;code&gt;init_t&lt;/code&gt;. This is
because the &lt;strong&gt;init&lt;/strong&gt; binary itself is labeled as &lt;code&gt;init_exec_t&lt;/code&gt; and a
type transition is defined from &lt;code&gt;kernel_t&lt;/code&gt; towards &lt;code&gt;init_t&lt;/code&gt; when
&lt;code&gt;init_exec_t&lt;/code&gt; is executed.&lt;/p&gt;
&lt;p&gt;Ok, so &lt;strong&gt;init&lt;/strong&gt; now runs in &lt;code&gt;init_t&lt;/code&gt; and it goes on with whatever it
needs to do. This includes invoking init scripts (which, btw, run in
&lt;code&gt;initrc_t&lt;/code&gt; because the scripts are labeled &lt;code&gt;initrc_exec_t&lt;/code&gt; or with a
type that has the &lt;code&gt;init_script_file_type&lt;/code&gt; attribute set, and a
transition from &lt;code&gt;init_t&lt;/code&gt; to &lt;code&gt;initrc_t&lt;/code&gt; is defined when such files are
executed). When the bootup is finally completed, &lt;strong&gt;init&lt;/strong&gt; launches the
&lt;em&gt;getty&lt;/em&gt; processes. The commands are mentioned in &lt;code&gt;/etc/inittab&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ grep getty /etc/inittab
c1:12345:respawn:/sbin/agetty --noclear 38400 tty1 linux
c2:2345:respawn:/sbin/agetty 38400 tty2 linux
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These binaries are also explicitly labeled &lt;code&gt;getty_exec_t&lt;/code&gt;. As a result,
the &lt;strong&gt;getty&lt;/strong&gt; (or &lt;strong&gt;agetty&lt;/strong&gt;) processes run in the &lt;code&gt;getty_t&lt;/code&gt; domain
(because a transition is defined from &lt;code&gt;init_t&lt;/code&gt; to &lt;code&gt;getty_t&lt;/code&gt; when
&lt;code&gt;getty_exec_t&lt;/code&gt; is executed). Ok, so gettys run in &lt;code&gt;getty_t&lt;/code&gt;. But what
happens when a user now logs on to the system?&lt;/p&gt;
&lt;p&gt;Well, the getty's invoke the &lt;strong&gt;login&lt;/strong&gt; binary which, you guessed it
right, is labeled as something: &lt;code&gt;login_exec_t&lt;/code&gt;. As a result (because,
again, a transition is defined in the policy), the login process runs as
&lt;code&gt;local_login_t&lt;/code&gt;. Now the login process invokes the various PAM
subroutines which follow the definitions in &lt;code&gt;/etc/pam.d/login&lt;/code&gt;. On
Gentoo systems, this by default points to the &lt;code&gt;system-local-login&lt;/code&gt;
definitions which points to the &lt;code&gt;system-login&lt;/code&gt; definitions. And in this
definition, especially under the sessions section, we find a reference
to &lt;code&gt;pam_selinux.so&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;session         required        pam_selinux.so close
...
session         required        pam_selinux.so multiple open
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now here is where some of the magic starts (see my post on &lt;a href="http://blog.siphos.be/2012/12/using-pam_selinux-to-switch-contexts/"&gt;Using
pam_selinux to switch
contexts&lt;/a&gt;
for the gritty details). The methods inside the &lt;code&gt;pam_selinux.so&lt;/code&gt; binary
will look up what the context should be for a user login. For instance,
when the &lt;em&gt;root&lt;/em&gt; user logs on, it has SELinux checking what SELinux user
&lt;em&gt;root&lt;/em&gt; is mapped to, equivalent to running &lt;strong&gt;semanage login -l&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ semanage login -l | grep ^root
root                      root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case, the SELinux user for root is &lt;em&gt;root&lt;/em&gt;, but this is not
always the case (that login and user are the same). For instance, my
regular administrative account maps to the &lt;em&gt;staff_u&lt;/em&gt; SELinux user.&lt;/p&gt;
&lt;p&gt;Next, it checks what the default context should be for this user. This
is done by checking the &lt;code&gt;default_contexts&lt;/code&gt; file (such as the one in
&lt;code&gt;/etc/selinux/strict/contexts&lt;/code&gt; although user-specific overrides can be
(and are) placed in the &lt;code&gt;users&lt;/code&gt; subdirectory) based on the context of
the process that is asking SELinux what the default context should be.
In our case, it is the &lt;strong&gt;login&lt;/strong&gt; process running as &lt;code&gt;local_login_t&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ grep -HR local_login_t /etc/selinux/strict/contexts/*
default_contexts:system_r:local_login_t user_r:user_t staff_r:staff_t sysadm_r:sysadm_t unconfined_r:unconfined_t
users/unconfined_u:system_r:local_login_t               unconfined_r:unconfined_t
users/guest_u:system_r:local_login_t            guest_r:guest_t
users/user_u:system_r:local_login_t             user_r:user_t
users/staff_u:system_r:local_login_t            staff_r:staff_t sysadm_r:sysadm_t
users/root:system_r:local_login_t  unconfined_r:unconfined_t sysadm_r:sysadm_t staff_r:staff_t user_r:user_t
users/xguest_u:system_r:local_login_t   xguest_r:xguest_t
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since we are verifying this for the &lt;em&gt;root&lt;/em&gt; SELinux user, the following
line of the &lt;code&gt;users/root&lt;/code&gt; file is what matters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;system_r:local_login_t  unconfined_r:unconfined_t sysadm_r:sysadm_t staff_r:staff_t user_r:user_t
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, SELinux looks for the first match in that line that the user has
access to. This is defined by the roles that the user is allowed to
access:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ semanage user -l | grep root
root            staff_r sysadm_r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As &lt;em&gt;root&lt;/em&gt; is allowed both the &lt;em&gt;staff_r&lt;/em&gt; and &lt;em&gt;sysadm_r&lt;/em&gt; roles, the
first one found &lt;em&gt;in the default context file&lt;/em&gt; that matches will be used.
So it is &lt;em&gt;not&lt;/em&gt; the order in which the roles are displayed in the
&lt;strong&gt;semanage user -l&lt;/strong&gt; output that matters, but the order of the contexts
in the &lt;em&gt;default context&lt;/em&gt; file. In the example, this is
&lt;code&gt;sysadm_r:sysadm_t&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;system_r:local_login_t  unconfined_r:unconfined_t sysadm_r:sysadm_t staff_r:staff_t user_r:user_t
                        &amp;lt;-----------+-----------&amp;gt; &amp;lt;-------+-------&amp;gt; &amp;lt;------+------&amp;gt; &amp;lt;-----+-----&amp;gt;
                                    `- no matching role   `- first (!)     `- second      `- no match
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that we know what the context &lt;em&gt;should&lt;/em&gt; be, this is used for the
first execution that the process (still &lt;strong&gt;login&lt;/strong&gt;) will do. So &lt;strong&gt;login&lt;/strong&gt;
changes the Linux user (if applicable) and invokes the shell of that
user. Because this is the first execution that is done by &lt;strong&gt;login&lt;/strong&gt;, the
new context is set (being &lt;code&gt;root:sysadm_r:sysadm_t&lt;/code&gt;) for the shell.&lt;/p&gt;
&lt;p&gt;And that is why, if you run &lt;strong&gt;id -Z&lt;/strong&gt;, it returns the user context
(&lt;code&gt;root:sysadm_r:sysadm_t&lt;/code&gt;) if everything works out fine ;-)&lt;/p&gt;</content><category term="SELinux"></category><category term="context"></category><category term="selinux"></category><category term="user"></category></entry></feed>