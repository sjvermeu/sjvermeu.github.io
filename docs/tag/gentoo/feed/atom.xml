<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Simplicity is a form of art... - gentoo</title><link href="http://blog.siphos.be/" rel="alternate"></link><link href="http://blog.siphos.be/tag/gentoo/feed/atom.xml" rel="self"></link><id>http://blog.siphos.be/</id><updated>2017-09-26T14:50:00+02:00</updated><entry><title>SELinux Userspace 2.7</title><link href="http://blog.siphos.be/2017/09/selinux-userspace-2.7/" rel="alternate"></link><published>2017-09-26T14:50:00+02:00</published><updated>2017-09-26T14:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2017-09-26:/2017/09/selinux-userspace-2.7/</id><summary type="html">&lt;p&gt;A few days ago, &lt;a href="http://blog.perfinion.com/"&gt;Jason "perfinion" Zaman&lt;/a&gt; stabilized the 2.7 SELinux userspace on
Gentoo. This release has quite a &lt;a href="https://raw.githubusercontent.com/wiki/SELinuxProject/selinux/files/releases/20170804/RELEASE-20170804.txt"&gt;few new features&lt;/a&gt;, which I'll cover in later
posts, but for distribution packagers the main change is that the userspace
now has many more components to package. The project has â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few days ago, &lt;a href="http://blog.perfinion.com/"&gt;Jason "perfinion" Zaman&lt;/a&gt; stabilized the 2.7 SELinux userspace on
Gentoo. This release has quite a &lt;a href="https://raw.githubusercontent.com/wiki/SELinuxProject/selinux/files/releases/20170804/RELEASE-20170804.txt"&gt;few new features&lt;/a&gt;, which I'll cover in later
posts, but for distribution packagers the main change is that the userspace
now has many more components to package. The project has split up the
policycoreutils package in separate packages so that deployments can be made
more specific.&lt;/p&gt;
&lt;p&gt;Let's take a look at all the various userspace packages again, learn what their
purpose is, so that you can decide if they're needed or not on a system. Also,
when I cover the contents of a package, be aware that it is based on the deployment
on my system, which might or might not be a complete installation (as with Gentoo,
different USE flags can trigger different package deployments).&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;libsepol - manipulating SELinux binary policies&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The first package, known in Gentoo as &lt;code&gt;sys-libs/libsepol&lt;/code&gt;, is the library that
enables manipulating the SELinux binary policies. This is a core library, and is
the first SELinux userspace package that is installed on a system.&lt;/p&gt;
&lt;p&gt;It contains one command, &lt;code&gt;chkcon&lt;/code&gt;, which allows users to validate if a specific
security context exists within a binary policy file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ chkcon policy.29 user_u:user_r:mozilla_t:s0
user_u:user_r:mozilla_t:s0 is valid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The package does contain two manpages of old commands which are no longer available
(or I'm blind, either way, they're not installed and not found in the SELinux userspace
repository either) such as genpolusers and genpolbools.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;libselinux - the main SELinux handling library&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The libselinux library, known in Gentoo as &lt;code&gt;sys-libs/libselinux&lt;/code&gt;, is the main SELinux
library. Almost all applications that are SELinux-aware (meaning they not only know SELinux
is a thing, but are actively modifying their behavior with SELinux-specific code) will
link to libselinux.&lt;/p&gt;
&lt;p&gt;Because it is so core, the package also provides the necessary bindings for different
scripting languages besides the standard shared objects approach, namely Python (as
many SELinux related tooling is written in Python) and Ruby.&lt;/p&gt;
&lt;p&gt;Next to the bindings and libraries, libselinux also offers quite a few executables
to query and manipulate SELinux settings on the system, which are shortly described
on the &lt;a href="https://github.com/SELinuxProject/selinux/wiki/Tools"&gt;SELinux userspace wiki&lt;/a&gt; but repeated here for convenience. Most of these
are meant for debugging purposes, as they are simple wrappers toward the libselinux
provided functions, but some of them are often used by administrations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;avcstat&lt;/code&gt; gives statistics about the in-kernel access vector cache, such as number
  of lookups, hits and misses&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compute_create&lt;/code&gt; queries the kernel security server for a transition decision&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compute_av&lt;/code&gt; queries the kernel security server for an access vector decision&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compute_relabel&lt;/code&gt; queries the kernel security server for a relabel decision&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compute_member&lt;/code&gt; queries the kernel security server for a labeling decision on a
  polyinstantiated object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getconlist&lt;/code&gt; uses the &lt;code&gt;security\_compute\_user()&lt;/code&gt; function, and orders the resulting
  list based on the &lt;code&gt;default\_contexts&lt;/code&gt; file and per-user context files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getdefaultcon&lt;/code&gt; is like &lt;code&gt;getconlist&lt;/code&gt; but only returns the first context&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compute_user&lt;/code&gt; queries the kernel security server fo a set of reachable user contexts
  from a source context&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getfilecon&lt;/code&gt; gets the context of a file by path&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getpidcon&lt;/code&gt; gets the context of a process by PID&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getseuser&lt;/code&gt; queries the &lt;code&gt;seuser&lt;/code&gt; file for the resulting SELinux user and contxt for a
  particular linux login and login context&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getsebool&lt;/code&gt; gets the current state of a SELinux boolean in the SELinux security server&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matchpathcon&lt;/code&gt; queries the active filecontext file for how a particular path should
  be labeled&lt;/li&gt;
&lt;li&gt;&lt;code&gt;policyvers&lt;/code&gt; queries the kernel security server for the maximum policy version supported&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getenforce&lt;/code&gt; gets the enforcing state of the kernel access vector cache&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sefcontext_compile&lt;/code&gt; generates binary filecontext files, optimized for fast querying&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selabel_lookup&lt;/code&gt; looks up what the target default context is for various classes
  (supporting the X related SELinux types, database types, etc.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selabel_digest&lt;/code&gt; calculates the SHA1 digest of spec files, and returns a list
  of the specfiles used to calculate the digest. This is used by Android.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selabel_partial_match&lt;/code&gt; determines if a direct or partial match is possible
  on a file path&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selabel_lookup_best_match&lt;/code&gt; obtains the best matching SELinux security context
  for file-based operations&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selinux_check_securetty_context&lt;/code&gt; checks whether a SELinux tty security context
  is defined as a securetty context&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selinux_check_access&lt;/code&gt; checks if the source context has the access permission
  for the specified class on the target context&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selinuxexeccon&lt;/code&gt; reports the SELinux context for an executable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selinuxenabled&lt;/code&gt; returns if SELinux is enabled or not&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setfilecon&lt;/code&gt; sets the context of a path&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setenforce&lt;/code&gt; sets the enforcing state of the kernel access vector cache&lt;/li&gt;
&lt;li&gt;&lt;code&gt;togglesebool&lt;/code&gt; toggles a SELinux boolean, but only runtime (so it does not
  persist across reboots)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;checkpolicy - policy compiler&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The checkpolicy package, known in Gentoo as &lt;code&gt;sys-apps/checkpolicy&lt;/code&gt;, provides two
main applications, &lt;code&gt;checkpolicy&lt;/code&gt; and &lt;code&gt;checkmodule&lt;/code&gt;. Both applications are compilers
(unlike what the name implies) which build a binary SELinux policy. The main difference
between these two is that one builds a policy binary, whereas the other one builds a 
SELinux module binary.&lt;/p&gt;
&lt;p&gt;Developers don't often call these applications themselves, but use the build scripts.
For instance, the &lt;code&gt;semodule_package&lt;/code&gt; binary would be used to combine the binary policy
with additional files such as file contexts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;libsemanage - facilitating use of SELinux overall&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The libsemanage library, known in Gentoo as &lt;code&gt;sys-libs/libsemanage&lt;/code&gt;, contains SELinux
supporting functions that are needed for any regular SELinux use. Whereas libselinux
would be used everywhere, even for embedded systems, libsemanage is generally not for
embedded systems but is very important for Linux systems in overall.&lt;/p&gt;
&lt;p&gt;Most SELinux management applications that administrators come in contact with will be
linked with the libsemanage library. As can be expected, the &lt;code&gt;semanage&lt;/code&gt; application
as offered by the &lt;code&gt;selinux-python&lt;/code&gt; package is one of them.&lt;/p&gt;
&lt;p&gt;The only application that is provided by libsemanage is the &lt;code&gt;semanage_migrate_store&lt;/code&gt;,
used to migrate the policy store from the &lt;code&gt;/etc/selinux&lt;/code&gt; to the &lt;code&gt;/var/lib/selinux&lt;/code&gt;
location. This was done with the introduction of the 2.4 userspace.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;selinux-python - Python-based command-line management utilities&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The selinux-python package, known in Gentoo as &lt;code&gt;sys-apps/selinux-python&lt;/code&gt;, is one of
the split packages that originally where part of the &lt;code&gt;policycoreutils&lt;/code&gt; package. It
contains the majority of management utilities that administrators use for handling
SELinux on their systems.&lt;/p&gt;
&lt;p&gt;The most known application here is &lt;code&gt;semanage&lt;/code&gt;, but it contains quite a few others
as well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sepolgen&lt;/code&gt; generates an initial SELinux policy module template, and is short for
  the &lt;code&gt;sepolicy generate&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;&lt;code&gt;audit2why&lt;/code&gt; translates SELinux audit messages into a description of why the access
  was denied. It is short for the &lt;code&gt;audit2allow -w&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;audit2allow&lt;/code&gt; generates SELinux policy allow/dontaudit rules from logs of denied
  operations&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sepolgen-ifgen&lt;/code&gt; generates an overview of available interfaces. This overview is used
  by &lt;code&gt;audit2allow&lt;/code&gt; to guess the right interface to use when allowing or dontauditing certain
  operations.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sepolicy&lt;/code&gt; is the SELinux policy inspection tool, allowing to query various aspects of
  a SELinux configuration (namely booleans, communication flows, interfaces, network information
  and transition information). It also provides the ability to generate skeleton policies (as
  described with &lt;code&gt;sepolgen&lt;/code&gt;) and manual pages.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chcat&lt;/code&gt; changes a file's SELinux security category&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sepolgen-ifgen-attr-helper&lt;/code&gt; generates an overview of attributes and attribute mappings.
  This overview is used by &lt;code&gt;audit2allow&lt;/code&gt; to guess the right attribute to use when allowing
  or dontauditing certain operations.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semanage&lt;/code&gt; is a SELinux policy management tool, allowing a multitude of operations
  against the SELinux policy and the configuration. This includes definition import/export,
  login mappings, user definitions, ports and interface management, module handling, 
  file contexts, booleans and more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;semodule-utils - Developing SELinux modules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The semodule-utils package, known in Gentoo as &lt;code&gt;sys-apps/semodule-utils&lt;/code&gt;, is another split package
that originally was part of the &lt;code&gt;policycoreutils&lt;/code&gt; package. In it, SELinux policy module
development utilities are provided. The package is not needed for basic operations such
as loading and unloading modules though.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;semodule_expand&lt;/code&gt; expands a SELinux base module package into a kernel binary policy file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semodule_deps&lt;/code&gt; shows the dependencies between SELinux policy packages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semodule_link&lt;/code&gt; links SELinux policy module packages together into a single SELinux policy
  module&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semodule_unpackage&lt;/code&gt; extracts a SELinux module into the binary policy and its associated
  files (such as file context definitions)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semodule_package&lt;/code&gt; combines a modular binary policy file with its associated files (such
  as file context definitions) into a module package&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;mcstrans - Translate context info in human readable names&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The mcstrans package, known in Gentoo as &lt;code&gt;sys-apps/mcstrans&lt;/code&gt;, is another split package
that originally was part of the &lt;code&gt;policycoreutils&lt;/code&gt; package. In it, the MCS translation
daemon is hosted. This daemon translates the SELinux-specific context ranges, like 
&lt;code&gt;s0-s0:c0.c1024&lt;/code&gt; to a human-readable set, like &lt;code&gt;SystemLow-SystemHigh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a purely cosmetic approach (as SELinux internally always uses the sensitivity
and category numbers) but helps when dealing with a large number of separate categories.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;restorecond - Automatically resetting file contexts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The restorecond package, known in Gentoo as &lt;code&gt;sys-apps/restorecond&lt;/code&gt;, is another split
package that originally was part of the &lt;code&gt;policycoreutils&lt;/code&gt; package. It contains the
&lt;code&gt;restorecond&lt;/code&gt; daemon, which watches over files and directories and forces the right
SELinux label on it.&lt;/p&gt;
&lt;p&gt;This daemon was originally intended to resolve a missing feature in SELinux (having
more fine-grained rules for label naming) but with the named file transition support, the
need for this daemon has diminished a lot.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;secilc - SELinux common intermediate language compiler&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The secilc package, known in Gentoo as &lt;code&gt;sys-apps/secilc&lt;/code&gt;, is the CIL compiler which
builds kernel binary policies based on the passed on CIL code. Although the majority
of policy development still uses the more traditional SELinux language (and supporting
macro's from the reference policy), developers can already use CIL code for policy generation.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;secilc&lt;/code&gt;, a final policy file can be generated through the CIL code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;selinux-dbus - SELinux DBus server&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The selinux-dbus package (not packaged in Gentoo at this moment) provides a SELinux DBus
service which systems can use to query and interact with SELinux management utilities
on the system. If installed, the &lt;code&gt;org.selinux&lt;/code&gt; domain is used for various supported
operations (such as listing SELinux modules, through &lt;code&gt;org.selinux.semodule_list&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;selinux-gui - Graphical SELinux settings manager&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The selinux-gui package (not packaged in Gentoo at this moment) provides the
&lt;code&gt;system-config-selinux&lt;/code&gt; application which offers basic SELinux management support
in a graphical application. It supports boolean handling, file labeling, user mapping,
SELinux user management, network port definitions and module handling. As such, it can
be seen as the graphical helper utility for the &lt;code&gt;semanage&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;selinux-sandbox - Sandbox utility utilizing SELinux sandbox domains&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The selinux-sandbox package (not packaged in Gentoo at this moment) is a set of scripts
to facilitate the creation of SELinux sandboxes. With these utilities, which not only
use SELinux sandbox domains like &lt;code&gt;sandbox_t&lt;/code&gt; but also Linux namespaces, end users can
launch applications in a restricted environment.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;policycoreutils - Core SELinux management utilities&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The policycoreutils package, known in Gentoo as &lt;code&gt;sys-apps/policycoreutils&lt;/code&gt;, contains 
basic SELinux tooling which is necessary to handle SELinux in a regular environment.
Supported utilities are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;newrole&lt;/code&gt; to switch a user session from one role to another&lt;/li&gt;
&lt;li&gt;&lt;code&gt;secon&lt;/code&gt; to query the SELinux context of a file, program or user input&lt;/li&gt;
&lt;li&gt;&lt;code&gt;genhomedircon&lt;/code&gt; to regenerate home directory context files, necessary when new users are
  defined on the system&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setfiles&lt;/code&gt; to set SELinux file security contexts on resources&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semodule&lt;/code&gt; to list, load and unload SELinux modules&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run_init&lt;/code&gt; to launch an init script in the right domain&lt;/li&gt;
&lt;li&gt;&lt;code&gt;open_init_pty&lt;/code&gt; to run a program under a pseudo terminal with the right context set&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sestatus&lt;/code&gt; to query current policy status&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setsebool&lt;/code&gt; to set and, if wanted, persist a SELinux boolean value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selinuxconfig&lt;/code&gt; to display the current active configuration paths&lt;/li&gt;
&lt;li&gt;&lt;code&gt;restorecon&lt;/code&gt; to set SELinux file security contexts on resources&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load_policy&lt;/code&gt; to load the SELinux policy, generally called from initramfs systems if the
  init system is not SELinux-aware&lt;/li&gt;
&lt;li&gt;&lt;code&gt;restorecon_xattr&lt;/code&gt; manages the &lt;code&gt;security.restorecon_last&lt;/code&gt; extended attribute which is set
  by &lt;code&gt;setfiles&lt;/code&gt; or &lt;code&gt;restorecon&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gentoo also adds in two additional scripts:
* &lt;code&gt;rlpkg&lt;/code&gt; to reset file contexts on files provided by a Gentoo package
* &lt;code&gt;selocal&lt;/code&gt; to easily handle small SELinux rule additions to the active policy&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There are even more&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Attentive readers will notice that the &lt;code&gt;setools&lt;/code&gt; package is not discussed here. This package
is not provided by the SELinux userspace project, but is an important package for SELinux
policy developers as it contains the &lt;code&gt;sesearch&lt;/code&gt; command - an often used command to query
the active policy.&lt;/p&gt;
&lt;p&gt;The above list is thus a picture of the SELinux userspace utilities, which is becoming
quite a big application set now that some functionality is split off from the &lt;code&gt;policycoreutils&lt;/code&gt;
package.&lt;/p&gt;</content><category term="SELinux"></category><category term="gentoo"></category><category term="selinux"></category><category term="userspace"></category></entry><entry><title>Authenticating with U2F</title><link href="http://blog.siphos.be/2017/09/authenticating-with-u2f/" rel="alternate"></link><published>2017-09-11T18:25:00+02:00</published><updated>2017-09-11T18:25:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2017-09-11:/2017/09/authenticating-with-u2f/</id><summary type="html">&lt;p&gt;In order to further secure access to my workstation, after the &lt;a href="http://blog.siphos.be/2017/08/switch-to-gentoo-sources/"&gt;switch to Gentoo
sources&lt;/a&gt;, I now enabled two-factor authentication through my Yubico U2F
USB device. Well, at least for local access - remote access through SSH requires
both userid/password as well as the correct SSH key, by &lt;a href="https://lwn.net/Articles/544640/"&gt;chaining authentication â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;In order to further secure access to my workstation, after the &lt;a href="http://blog.siphos.be/2017/08/switch-to-gentoo-sources/"&gt;switch to Gentoo
sources&lt;/a&gt;, I now enabled two-factor authentication through my Yubico U2F
USB device. Well, at least for local access - remote access through SSH requires
both userid/password as well as the correct SSH key, by &lt;a href="https://lwn.net/Articles/544640/"&gt;chaining authentication
methods in OpenSSH&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enabling U2F on (Gentoo) Linux is fairly easy. The various guides online which talk
about the &lt;code&gt;pam_u2f&lt;/code&gt; setup are indeed correct that it is fairly simple. For completeness
sake, I've documented what I know on the Gentoo Wiki, as the &lt;a href="https://wiki.gentoo.org/wiki/Pam_u2f"&gt;pam_u2f article&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;The setup, basically&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The setup of U2F is done in a number of steps:
1. Validate that the kernel is ready for the USB device
2. Install the PAM module and supporting tools
3. Generate the necessary data elements for each user (keys and such)
4. Configure PAM to require authentication through the U2F key&lt;/p&gt;
&lt;p&gt;For the kernel, the configuration item needed is the raw HID device support.
Now, in current kernels, two settings are available that both talk about
raw HID device support: &lt;code&gt;CONFIG_HIDRAW&lt;/code&gt; is the general raw HID device support,
while &lt;code&gt;CONFIG_USB_HIDDEV&lt;/code&gt; is the USB-specific raw HID device support.&lt;/p&gt;
&lt;p&gt;It is very well possible that only a single one is needed, but both where active
on my kernel configuration already, and Internet sources are not clear which one is
needed, so let's assume for now both are.&lt;/p&gt;
&lt;p&gt;Next, the PAM module needs to be installed. On Gentoo, this is a matter of installing
the &lt;code&gt;pam\_u2f&lt;/code&gt; package, as the necessary dependencies will be pulled in automatically:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# emerge pam_u2f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, for each user, a registration has to be made. This registration is needed for the
U2F components to be able to correctly authenticate the use of a U2F key for a particular
user. This is done with &lt;code&gt;pamu2fcfg&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ pamu2fcfg -u&amp;lt;username&amp;gt; &amp;gt; ~/.config/Yubico/u2f_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The U2F USB key must be plugged in when the command is executed, as a succesful keypress (on the
U2F device) is needed to complete the operation.&lt;/p&gt;
&lt;p&gt;Finally, enable the use of the &lt;code&gt;pam\_u2f&lt;/code&gt; module in PAM. On my system, this is done
through the &lt;code&gt;/etc/pam.d/system-local-login&lt;/code&gt; PAM configuration file used by all
local logon services.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;auth     required     pam_u2f.so
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Consider the problems you might face&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When fiddling with PAM, it is important to keep in mind what could fail. During the setup, it
is recommended to have an open administrative session on the system so that you can validate if
the PAM configuration works, without locking yourself out of the system.&lt;/p&gt;
&lt;p&gt;But other issues need to be considered as well.&lt;/p&gt;
&lt;p&gt;My Yubico U2F USB key might have a high MTBF (Mean Time Between Failures) value, but once it fails,
it would lock me out of my workstation (and even remote services and servers that use it). For
that reason, I own a second one, safely stored, but is a valid key nonetheless for my workstation
and remote systems/services. Given the low cost of a simple U2F key, it is a simple solution for
this threat.&lt;/p&gt;
&lt;p&gt;Another issue that could come up is a malfunction in the PAM module itself. For me, this is handled
by having remote SSH access done without this PAM module (although other PAM modules are still involved,
so a generic PAM failure itself wouldn't resolve this). Of course, worst case, the system needs to be
rebooted in single user mode.&lt;/p&gt;
&lt;p&gt;One issue that I faced was the SELinux policy. Some applications that provide logon services don't have
the proper rights to handle U2F, and because PAM just works in the address space (and thus SELinux
domain) of the application, the necessary privileges need to be added to these services. My initial
investigation revealed the following necessary policy rules (refpolicy-style);&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;udev_search_pids(...)
udev_read_db(...)
dev_rw_generic_usb_dev(...)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first two rules are needed because the operation to trigger the USB key uses the udev tables
to find out where the key is located/attached, before it interacts with it. This interaction is then
controlled through the first rule.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simple yet effective&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Enabling the U2F authentication on the system is very simple, and gives a higher confidence that
malicious activities through regular accounts will have it somewhat more challenging to switch to
a more privileged session (one control is the SELinux policy of course, but for those domains that
are allowed to switch then the PAM-based authentication is another control), as even evesdropping on
my password (or extracting it from memory) won't suffice to perform a successful authentication.&lt;/p&gt;
&lt;p&gt;If you want to use a different two-factor authentication, check out the use of the &lt;a href="https://wiki.gentoo.org/wiki/Google_Authenticator"&gt;Google
authenticator&lt;/a&gt;, another nice article on the Gentoo wiki. It is also possible to use Yubico keys
for remote authentication, but that uses the OTP (One Time Password) functionality which isn't active
on the Yubico keys that I own.&lt;/p&gt;</content><category term="Security"></category><category term="gentoo"></category><category term="security"></category><category term="yubico"></category><category term="u2f"></category><category term="pam"></category></entry><entry><title>Using nVidia with SELinux</title><link href="http://blog.siphos.be/2017/08/using-nvidia-with-selinux/" rel="alternate"></link><published>2017-08-23T19:04:00+02:00</published><updated>2017-08-23T19:04:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2017-08-23:/2017/08/using-nvidia-with-selinux/</id><summary type="html">&lt;p&gt;Yesterday I've &lt;a href="http://blog.siphos.be/2017/08/switch-to-gentoo-sources/"&gt;switched to the gentoo-sources kernel package&lt;/a&gt; on Gentoo Linux.
And with that, I also attempted (succesfully) to use the propriatary nvidia drivers
so that I can enjoy both a smoother 3D experience while playing minecraft, as well
as use the CUDA support so I don't need to use â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yesterday I've &lt;a href="http://blog.siphos.be/2017/08/switch-to-gentoo-sources/"&gt;switched to the gentoo-sources kernel package&lt;/a&gt; on Gentoo Linux.
And with that, I also attempted (succesfully) to use the propriatary nvidia drivers
so that I can enjoy both a smoother 3D experience while playing minecraft, as well
as use the CUDA support so I don't need to use cloud-based services for small
exercises.&lt;/p&gt;
&lt;p&gt;The move to nvidia was quite simple, as the &lt;a href="https://wiki.gentoo.org/wiki/NVidia/nvidia-drivers"&gt;nvidia-drivers wiki article&lt;/a&gt; on
the Gentoo wiki was quite easy to follow.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Signing the modules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One difference I found with the article (which I've promply changed) is that
the signing command, necessary to sign the Linux kernel modules so that they
can be loaded (as unsigned or wrongly signed modules are not allowed on the
system), was different.&lt;/p&gt;
&lt;p&gt;It used to be as follows (example for a single module, it had to be repeated
for each affected kernel module):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# perl /usr/src/linux/scripts/sign-file sha512 \
      /usr/src/linux/signing_key.priv \
      /usr/src/linux/signing_key.x509 \
      /lib/modules/4.12.5-gentoo/video/nvidia-uvm.ko
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, from version 4.3.3 onward (as also explained by this excellent
&lt;a href="https://wiki.gentoo.org/wiki/Signed_kernel_module_support"&gt;Signed kernel module support article&lt;/a&gt; on the Gentoo wiki) this command
no longer uses a Perl script, but is an ELF binary. Also, the location
of the default signing key is moved into a &lt;code&gt;certs/&lt;/code&gt; subdirectory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enabling nvidia device files&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When the nvidia modules are loaded, additional device files are enabled.
One is the &lt;code&gt;nvidia0&lt;/code&gt; character device file, while the other is the
&lt;code&gt;nvidiactl&lt;/code&gt; character device file. And although I can imagine that the
&lt;code&gt;nvidiactl&lt;/code&gt; one is a control-related device file, I don't exactly know
for sure.&lt;/p&gt;
&lt;p&gt;However, attempts to use 3D applications showed (through SELinux denials)
that access to these device files is needed. Without that, applications just
crashed, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;org.lwjgl.LWJGLException: X Error - disp: 0x7fd164907b00 serial: 150 error: BadValue (integer parameter out of range for operation) request_code: 153 minor_code: 24
        at org.lwjgl.opengl.LinuxDisplay.globalErrorHandler(LinuxDisplay.java:320)
        at org.lwjgl.opengl.LinuxContextImplementation.nCreate(Native Method)
        at org.lwjgl.opengl.LinuxContextImplementation.create(LinuxContextImplementation.java:51)
        at org.lwjgl.opengl.ContextGL.&amp;lt;init&amp;gt;(ContextGL.java:132)
        at org.lwjgl.opengl.Display.create(Display.java:850)
        at org.lwjgl.opengl.Display.create(Display.java:757)
        at org.lwjgl.opengl.Display.create(Display.java:739)
        at bib.at(SourceFile:635)
        at bib.aq(SourceFile:458)
        at bib.a(SourceFile:404)
        at net.minecraft.client.main.Main.main(SourceFile:123)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not really useful to debug for me, but the SELinux denials were a bit more obvious,
showing requests for read and write to the &lt;code&gt;nvidiactl&lt;/code&gt; character device.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;code&gt;matchpathcon&lt;/code&gt; I found out that the device files had to have the
&lt;code&gt;xserver_misc_device_t&lt;/code&gt; type (which they didn't have to begin with, as the device
files were added after the automated &lt;code&gt;restorecon&lt;/code&gt; was done on the &lt;code&gt;/dev&lt;/code&gt; location).&lt;/p&gt;
&lt;p&gt;So, adding the following command to my local init script fixed the context setting
at boot up:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;restorecon /dev/nvidiactl /dev/nvidia0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, the domains that needed to use nVidia had to receive the following
addition SELinux-policy-wise:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dev_rw_xserver_misc(...)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Perhaps this can be made more fine-grained (as there are several other device
files marked as &lt;code&gt;xserver_misc_device_t&lt;/code&gt;) but for now this should suffice.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Optimus usage with X server&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The other challenge I had was that my workstation uses an integrated Intel
device, and offloads calculations and rendering to nVidia. The detection by
X server did not work automatically though, and it took some fiddling to get
it to work.&lt;/p&gt;
&lt;p&gt;In the end, I had to add in an &lt;code&gt;nvidia.conf&lt;/code&gt; file inside &lt;code&gt;/etc/X11/xorg.conf.d&lt;/code&gt;
with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Section &amp;quot;ServerLayout&amp;quot;
        Identifier      &amp;quot;layout&amp;quot;
        Screen  0       &amp;quot;nvidia&amp;quot;
        Inactive        &amp;quot;intel&amp;quot;
EndSection

Section &amp;quot;Device&amp;quot;
        Identifier      &amp;quot;nvidia&amp;quot;
        Driver          &amp;quot;nvidia&amp;quot;
        BusID           &amp;quot;PCI:1:0:0&amp;quot;
EndSection

Section &amp;quot;Screen&amp;quot;
        Identifier      &amp;quot;nvidia&amp;quot;
        Device          &amp;quot;nvidia&amp;quot;
        Option          &amp;quot;AllowEmptyInitialConfiguration&amp;quot;
EndSection

Section &amp;quot;Device&amp;quot;
        Identifier      &amp;quot;intel&amp;quot;
        Driver          &amp;quot;modesetting&amp;quot;
EndSection

Section &amp;quot;Screen&amp;quot;
        Identifier      &amp;quot;intel&amp;quot;
        Device          &amp;quot;intel&amp;quot;
EndSection
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And with a single &lt;code&gt;xrandr&lt;/code&gt; command I re-enabled split screen support (as by
default it now showed the same output on both screens):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ xrandr --output eDP-1-1 --left-of HDMI-1-2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I also had to set the output source to the nVidia device, by adding the following
lines to my &lt;code&gt;~/.xinitrc&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;xrandr --setprovideroutputsource modesetting NVIDIA-0
xrandr --auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And with that, another thing was crossed off from my TODO list. Which has become
quite large after my holidays (went to Kos, Greece) as I had many books and articles
on my ebook reader with me, which inspired a lot.&lt;/p&gt;</content><category term="SELinux"></category><category term="gentoo"></category><category term="selinux"></category><category term="nvidia"></category></entry><entry><title>Switch to Gentoo sources</title><link href="http://blog.siphos.be/2017/08/switch-to-gentoo-sources/" rel="alternate"></link><published>2017-08-22T19:04:00+02:00</published><updated>2017-08-22T19:04:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2017-08-22:/2017/08/switch-to-gentoo-sources/</id><summary type="html">&lt;p&gt;You've might already read it on the Gentoo news site, the &lt;a href="https://www.gentoo.org/news/2017/08/19/hardened-sources-removal.html"&gt;Hardened Linux kernel sources
are removed from the tree&lt;/a&gt; due to the &lt;a href="http://grsecurity.net/"&gt;grsecurity&lt;/a&gt; change where the grsecurity
Linux kernel patches are no longer provided for free. The decision was made due to
supportability and maintainability reasons.&lt;/p&gt;
&lt;p&gt;That doesn't mean â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;You've might already read it on the Gentoo news site, the &lt;a href="https://www.gentoo.org/news/2017/08/19/hardened-sources-removal.html"&gt;Hardened Linux kernel sources
are removed from the tree&lt;/a&gt; due to the &lt;a href="http://grsecurity.net/"&gt;grsecurity&lt;/a&gt; change where the grsecurity
Linux kernel patches are no longer provided for free. The decision was made due to
supportability and maintainability reasons.&lt;/p&gt;
&lt;p&gt;That doesn't mean that users who want to stick with the grsecurity related hardening
features are left alone. &lt;a href="https://blogs.gentoo.org/ago/2017/08/21/sys-kernel-grsecurity-sources-available/#utm_source=feed&amp;amp;utm_medium=feed&amp;amp;utm_campaign=feed"&gt;Agostino Sarubbo has started providing sys-kernel/grsecurity-sources&lt;/a&gt;
for the users who want to stick with it, as it is based on &lt;a href="https://github.com/minipli/linux-unofficial_grsec"&gt;minipli's unofficial patchset&lt;/a&gt;.
I seriously hope that the patchset will continue to be maintained and, who knows, even evolve further.&lt;/p&gt;
&lt;p&gt;Personally though, I'm switching to the Gentoo sources, and stick with SELinux as one of the
protection measures. And with that, I might even start using my NVidia graphics card a bit more, 
as that one hasn't been touched in several years (I have an Optimus-capable setup with both an
Intel integrated graphics card and an NVidia one, but all attempts to use nouveau for the one game
I like to play - minecraft - didn't work out that well).&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;How secure is Gentoo sources with SELinux?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is hard to just say that one kernel tree or another is safe(r) or not. Security is not something
one can get with a simple check-list. It is a matter of properly configuring services and systems,
patching it when needed, limiting expoosure and what not.&lt;/p&gt;
&lt;p&gt;A huge advantage of grsecurity was that it had very insightful and advanced protection measures
(many of them focusing on memory-related attacks), and prevented unwanted behavior from applications
(and users) in a very fine-grained manner. With SELinux, I can still prevent some unwanted behavior,
but it is important to know that SELinux and grsecurity's kernel hardening features are orthogonal
to each other. It is only the grsecurity RBAC model that is somewhat in competition with SELinux.&lt;/p&gt;
&lt;p&gt;SELinux is able to define and manage behavior between types. However, within a single type, many
actions are not governed at all. SELinux can manage which types (domains) are able to invoke which
system calls, but once a call is allowed, SELinux doesn't do any additional controls anymore.&lt;/p&gt;
&lt;p&gt;Loosing protection controls from grsecurity, as a security activist, is not something I like. But
on the other hand, I need to consider the wide SELinux using audience in Gentoo, who is most likely
going to switch to the gentoo sources as well (at least the majority of them).&lt;/p&gt;
&lt;p&gt;Gentoo sources is not insecure by itself, as are many other kernel sources. A huge advantage is that
the gentoo sources are well maintained, so any kernel vulnerability that gets reported and fixed will
receive the proper fix in the Gentoo sources quickly as well (and if you think it can go even faster,
consider &lt;a href="https://wiki.gentoo.org/wiki/Project:Security/Padawan_Process"&gt;becoming a Gentoo security padawan&lt;/a&gt;. And with SELinux enabled, some additional security
controls can be implemented (the efficacy of it depends on the quality of the policy).&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://kernsec.org/wiki/index.php/Kernel_Self_Protection_Project"&gt;Kernel Self Protection Project&lt;/a&gt; also aims to improve the Linux kernel security, and immediately
through upstreamed and accepted patches. This means that the protection measures, once in the kernel,
should remain inside (awkward regressions notwithstanding). I truly hope that the KSPP moves forward.
In the mean time, read up on the &lt;a href="https://www.kernel.org/doc/html/latest/security/self-protection.html"&gt;Kernel Self-Protection&lt;/a&gt; document to learn more about how to harden
the Linux kernel.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So that's it, just one less security control?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For now, there is no immediate substitute. But that doesn't mean that there is nothing one can do
to increase the secure state of a Linux desktop, workstation or even IoT device. Although remotely
executable exploits do pop up and exist, many vulnerabilities in the Linux kernel are mainly exploitable
through a local access pattern.&lt;/p&gt;
&lt;p&gt;That means that vulnerabilities often can only be exploited through a local invocation (or through chaining
by using other vulnerabilities - often in completely different applications or services - in order to
execute the local malware). Hence, hardening of the entire system is extremely important.&lt;/p&gt;
&lt;p&gt;Previously, I had an account with multiple SELinux roles assigned to it. Depending on what I wanted to
do, I transitioned to the right role (either through the &lt;code&gt;newrole&lt;/code&gt; command, or through &lt;code&gt;sudo&lt;/code&gt; which
has integrated SELinux support). With the switch to the gentoo sources, I decided to make it a bit
harder for malware on my system to work: i start using separate Linux accounts depending on the purpose
(which I call persona).&lt;/p&gt;
&lt;p&gt;Developing SELinux policies is now done on a separate account, managing remote systems through another
account (although my servers use multi-factor authentication so there was already some additional safeguard
in place there), handling my side-work with another account, playing games with another account, etc.&lt;/p&gt;
&lt;p&gt;It isn't that I don't trust SELinux for this (as each domain is well isolated and controlled). But SELinux
cannot prevent vulnerabilities within applications if the action/result of a succesfully exploited
vulnerability does not change the expected behavior of the application versus the other resources
on the system (and even there, the fine-grained approach of policies might not even be sufficiently
fine-grained, as SELinux uses labels, and many resources have the same label assigned).&lt;/p&gt;
&lt;p&gt;Suppose some malware is able to capture me giving in my password, or is trying to phish for it. By
using separate accounts (with separate passphrazes of course) the impact is reduced a bit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other things on the plate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The change to different accounts was one thing I wanted to establish before switching to a new kernel
tree. There are other aspects that I want to investigate in the near future as well though.&lt;/p&gt;
&lt;p&gt;First of all, I'm probably going to enable &lt;a href="https://github.com/Yubico/pam-u2f"&gt;U2F authentication&lt;/a&gt; on my workstation as well for
all interactive accounts. It has been on my list for quite some time, and quickly going through the
publicly available fora doesn't reveal any major challenges to do so. Build the PAM module, update
the PAM service configurations and you're done. Hopefully. ;-)&lt;/p&gt;
&lt;p&gt;Next, I'm going to play around a bit with &lt;a href="https://wiki.gentoo.org/wiki/AddressSanitizer"&gt;AddressSanitizer&lt;/a&gt;. ASAN was incompatible with grsecurity,
but now that that's out of the way, there's no reason not to investigate it further. I am not going
to enable it for the kernel though (as some KSPP implemented measures are incompatible with ASAN as well),
and probably not for my complete workstation yet (even though it is sufficiently powerful to handle the major
performance impact).&lt;/p&gt;
&lt;p&gt;I'm going to put some more focus on &lt;a href="https://wiki.gentoo.org/wiki/Integrity_Measurement_Architecture"&gt;Integrity Measurement Architecture support&lt;/a&gt;, although my main protection
measure with IMA - the TPM or Trusted Platform Module - has been fried (don't ask) so I can't use it anymore.
Perhaps I'm going to buy a very lightweight/small system with a TPM on it to continue development. We'll see.&lt;/p&gt;
&lt;p&gt;My current knowledge of &lt;a href="https://en.wikipedia.org/wiki/Seccomp"&gt;seccomp&lt;/a&gt; is fairly theoretical (with a few hands-on tutorials, but that's it). It
has been on my TODO list for some time to look in more depth to it. Perhaps this is the right time.&lt;/p&gt;</content><category term="Gentoo"></category><category term="gentoo"></category><category term="hardened"></category><category term="grsecurity"></category><category term="selinux"></category></entry><entry><title>Handling certificates in Gentoo Linux</title><link href="http://blog.siphos.be/2017/03/handling-certificates-in-gentoo-linux/" rel="alternate"></link><published>2017-03-06T22:20:00+01:00</published><updated>2017-03-06T22:20:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2017-03-06:/2017/03/handling-certificates-in-gentoo-linux/</id><summary type="html">&lt;p&gt;I recently created a new article on the Gentoo Wiki titled &lt;a href="https://wiki.gentoo.org/wiki/Certificates"&gt;Certificates&lt;/a&gt;
which talks about how to handle certificate stores on Gentoo Linux. The write-up
of the article (which might still change name later, because it does not handle
&lt;em&gt;everything&lt;/em&gt; about certificates, mostly how to handle certificate stores) was
inspired â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently created a new article on the Gentoo Wiki titled &lt;a href="https://wiki.gentoo.org/wiki/Certificates"&gt;Certificates&lt;/a&gt;
which talks about how to handle certificate stores on Gentoo Linux. The write-up
of the article (which might still change name later, because it does not handle
&lt;em&gt;everything&lt;/em&gt; about certificates, mostly how to handle certificate stores) was
inspired by the observation that I had to adjust the certificate stores of both
Chromium and Firefox separately, even though they both use NSS.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Certificates?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, when a secure communication is established from a browser to a site (or any
other interaction that uses SSL/TLS, but let's stay with the browser example for now)
part of the exchange is to ensure that the target site is actually the site it claims
to be. Don't want someone else to trick you into giving your e-mail credentials do you?&lt;/p&gt;
&lt;p&gt;To establish this, the certificate presented by the remote site is validated (alongside
other &lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_handshake"&gt;handshake steps&lt;/a&gt;).
A certificate contains a public key, as well as information about what the certificate can
be used for, and who (or what) the certificate represents. In case of a site, the identification
is (or should be) tied to the fully qualified domain name.&lt;/p&gt;
&lt;p&gt;Of course, everyone could create a certificate for accounts.google.com and try to trick you
into leaving your credentials. So, part of the validation of a certificate is to verify that
it is signed by a third party that you trust to only sign certificates that are trustworthy.
And to validate this signature, you hence need the certificate of this third party as well.&lt;/p&gt;
&lt;p&gt;So, what about this certificate? Well, turns out, this one is also often signed by
another certificate, and so on, until you reach the "top" of the certificate tree. This top
certificate is called the "root certificate". And because we still have to establish that this
certificate is trustworthy, we need another way to accomplish this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enter certificate stores&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The root certificates of these trusted third parties (well, let us call them "Certificate Authorities"
from now onward, because they &lt;a href="https://en.wikipedia.org/wiki/DigiNotar"&gt;sometimes will lose your trust&lt;/a&gt;)
need to be reachable by the browser. The location where they are stored in is (often) called
the truststore (a naming that I came across when dealing with Java and which stuck).&lt;/p&gt;
&lt;p&gt;So, what I wanted to accomplish was to remove a particular CA certificate from the certificate
store. I assumed that, because Chromium and Firefox both use NSS as the library to support their
cryptographic uses, they would also both use the store location at &lt;code&gt;~/.pki/nssdb&lt;/code&gt;. That was wrong.&lt;/p&gt;
&lt;p&gt;Another assumption I had was that NSS also uses the &lt;code&gt;/etc/pki/nssdb&lt;/code&gt; location as a system-wide one.
Wrong again (not that NSS doesn't allow this, but it seems that it is very much up to, and often
ignored by, the NSS-implementing applications).&lt;/p&gt;
&lt;p&gt;Oh, and I also assumed that there wouldn't be a hard-coded list in the application. Yup. Wrong again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How NSS tracks root CA&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Basically, NSS has a hard-coded root CA list inside the &lt;code&gt;libnssckbi.so&lt;/code&gt; file. On Gentoo, this
file is provided by the &lt;code&gt;dev-libs/nss&lt;/code&gt; package. Because it is hard-coded, it seemed like there
was little I could do to remove it, yet still through the user interfaces offered by Firefox and
Chromium I was able to remove the trust bits from the certificate.&lt;/p&gt;
&lt;p&gt;Turns out that Firefox (inside &lt;code&gt;~/.mozilla/firefox/*.default&lt;/code&gt;) and Chromium (inside &lt;code&gt;~/.pki/nssdb&lt;/code&gt;)
store the (modified) trust bits for those locations, so that the hardcoded list does not need to
be altered if all I want to do was revoke the trust on a specific CA. And it isn't that this hard-coded
list is a bad list: Mozilla has a &lt;a href="https://www.mozilla.org/en-US/about/governance/policies/security-group/certs/"&gt;CA Certificate Program&lt;/a&gt;
which controls the CAs that are accepted inside this store.&lt;/p&gt;
&lt;p&gt;Still, I find it sad that the system-wide location (at &lt;code&gt;/etc/pki/nssdb&lt;/code&gt;) is not by default used as
well (or I have something wrong on my system that makes it so). On a multi-user system, administrators
who want to have some control over the certificate stores might need to either use login scripts to
manipulate the user certificate stores, or adapt the user files directly currently.&lt;/p&gt;</content><category term="Gentoo"></category><category term="gentoo"></category><category term="certificates"></category><category term="nss"></category></entry><entry><title>I missed FOSDEM</title><link href="http://blog.siphos.be/2017/02/i-missed-fosdem/" rel="alternate"></link><published>2017-02-07T17:06:00+01:00</published><updated>2017-02-07T17:06:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2017-02-07:/2017/02/i-missed-fosdem/</id><summary type="html">&lt;p&gt;I sadly had to miss out on the FOSDEM event. The entire weekend was filled with
me being apathetic, feverish and overall zombie-like. Yes, sickness can be cruel.
It wasn't until today that I had the energy back to fire up my laptop.&lt;/p&gt;
&lt;p&gt;Sorry for the crew that I promised â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I sadly had to miss out on the FOSDEM event. The entire weekend was filled with
me being apathetic, feverish and overall zombie-like. Yes, sickness can be cruel.
It wasn't until today that I had the energy back to fire up my laptop.&lt;/p&gt;
&lt;p&gt;Sorry for the crew that I promised to meet at FOSDEM. I'll make it up, somehow.&lt;/p&gt;
</content><category term="Misc"></category><category term="gentoo"></category><category term="fosdem"></category></entry><entry><title>SELinux System Administration, 2nd Edition</title><link href="http://blog.siphos.be/2016/12/selinux-system-administration-2nd-edition/" rel="alternate"></link><published>2016-12-22T19:26:00+01:00</published><updated>2016-12-22T19:26:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2016-12-22:/2016/12/selinux-system-administration-2nd-edition/</id><summary type="html">&lt;p&gt;While still working on a few other projects, one of the time consumers of the
past half year (haven't you noticed? my blog was quite silent) has come to an
end: the &lt;a href="https://www.packtpub.com/networking-and-servers/selinux-system-administration-second-edition"&gt;SELinux System Administration - Second Edition&lt;/a&gt;
book is now available. With almost double the amount of pages and a â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;While still working on a few other projects, one of the time consumers of the
past half year (haven't you noticed? my blog was quite silent) has come to an
end: the &lt;a href="https://www.packtpub.com/networking-and-servers/selinux-system-administration-second-edition"&gt;SELinux System Administration - Second Edition&lt;/a&gt;
book is now available. With almost double the amount of pages and a serious
update of the content, the book can now be bought either through Packt Publishing
itself, or the various online bookstores such as &lt;a href="https://www.amazon.com/SELinux-System-Administration-Sven-Vermeulen-ebook/dp/B01LWM02WI"&gt;Amazon&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the holidays now approaching, I hope to be able to execute a few tasks
within the Gentoo community (and of the Gentoo Foundation) and get back on track.
Luckily, my absence was not jeopardizing the state of &lt;a href="https://wiki.gentoo.org/wiki/SELinux"&gt;SELinux&lt;/a&gt;
in Gentoo thanks to the efforts of Jason Zaman.&lt;/p&gt;
</content><category term="SELinux"></category><category term="selinux"></category><category term="gentoo"></category><category term="rhel"></category><category term="redhat"></category><category term="packt"></category><category term="book"></category><category term="publishing"></category></entry><entry><title>We do not ship SELinux sandbox</title><link href="http://blog.siphos.be/2016/09/we-do-not-ship-selinux-sandbox/" rel="alternate"></link><published>2016-09-27T20:47:00+02:00</published><updated>2016-09-27T20:47:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2016-09-27:/2016/09/we-do-not-ship-selinux-sandbox/</id><summary type="html">&lt;p&gt;A few days ago a vulnerability was reported in the SELinux sandbox user space
utility. The utility is part of the &lt;code&gt;policycoreutils&lt;/code&gt; package. Luckily, Gentoo's
&lt;code&gt;sys-apps/policycoreutils&lt;/code&gt; package is not vulnerable - and not because we were
clairvoyant about this issue, but because we don't ship this utility.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;What is the â€¦&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few days ago a vulnerability was reported in the SELinux sandbox user space
utility. The utility is part of the &lt;code&gt;policycoreutils&lt;/code&gt; package. Luckily, Gentoo's
&lt;code&gt;sys-apps/policycoreutils&lt;/code&gt; package is not vulnerable - and not because we were
clairvoyant about this issue, but because we don't ship this utility.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;What is the SELinux sandbox?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The SELinux sandbox utility, aptly named &lt;code&gt;sandbox&lt;/code&gt;, is a simple C application which
executes its arguments, but only after ensuring that the task it launches is
going to run in the &lt;code&gt;sandbox_t&lt;/code&gt; domain.&lt;/p&gt;
&lt;p&gt;This domain is specifically crafted to allow applications most standard privileges
needed for interacting with the user (so that the user can of course still use the
application) but removes many permissions that might be abused to either obtain 
information from the system, or use to try and exploit vulnerabilities to gain
more privileges. It also hides a number of resources on the system through
namespaces.&lt;/p&gt;
&lt;p&gt;It was &lt;a href="http://danwalsh.livejournal.com/28545.html"&gt;developed in 2009&lt;/a&gt; for Fedora
and Red Hat. Given the necessary SELinux policy support though, it was usable on
other distributions as well, and thus became part of the SELinux user space itself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is the vulnerability about?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The SELinux sandbox utility used an execution approach that did not shield off
the users' terminal access sufficiently. In the &lt;a href="http://www.openwall.com/lists/oss-security/2016/09/25/1"&gt;POC post&lt;/a&gt;
we notice that characters could be sent to the terminal through the &lt;code&gt;ioctl()&lt;/code&gt;
function (which executes the ioctl system call used for input/output operations
against devices) which are eventually executed when the application finishes.&lt;/p&gt;
&lt;p&gt;That's bad of course. Hence the CVE-2016-7545 registration, and of course also
a possible &lt;a href="https://github.com/SELinuxProject/selinux/commit/acca96a135a4d2a028ba9b636886af99c0915379"&gt;fix has been committed upstream&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why isn't Gentoo vulnerable / shipping with SELinux sandbox?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There's some history involved why Gentoo does not ship the SELinux sandbox (anymore).&lt;/p&gt;
&lt;p&gt;First of all, Gentoo already has a command that is called &lt;code&gt;sandbox&lt;/code&gt;, installed through
the &lt;code&gt;sys-apps/sandbox&lt;/code&gt; application. So back in the days that we still shipped with
the SELinux sandbox, we continuously had to patch &lt;code&gt;policycoreutils&lt;/code&gt; to use a
different name for the sandbox application (we used &lt;code&gt;sesandbox&lt;/code&gt; then).&lt;/p&gt;
&lt;p&gt;But then we had a couple of security issues with the SELinux sandbox application.
In 2011, &lt;a href="http://www.cvedetails.com/cve/CVE-2011-1011/"&gt;CVE-2011-1011&lt;/a&gt;
came up in which the &lt;code&gt;seunshare_mount&lt;/code&gt; function had a security issue. And in 2014,
&lt;a href="http://www.cvedetails.com/cve/CVE-2014-3215/"&gt;CVE-2014-3215&lt;/a&gt; came up with - again -
a security issue with &lt;code&gt;seunshare&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At that point, I had enough of this sandbox utility. First of all, it never quite worked
enough on Gentoo as it is (as it also requires a policy which is not part of the
upstream release) and given its wide open access approach (it was meant to contain
various types of workloads, so security concessions had to be made), I decided to
&lt;a href="http://blog.siphos.be/2014/05/dropping-sesandbox-support/"&gt;no longer support the SELinux sandbox in Gentoo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;None of the Gentoo SELinux users ever approached me with the question to add it back.&lt;/p&gt;
&lt;p&gt;And that is why Gentoo is not vulnerable to this specific issue.&lt;/p&gt;</content><category term="SELinux"></category><category term="selinux"></category><category term="sandbox"></category><category term="gentoo"></category><category term="vulnerability"></category><category term="seunshare"></category></entry><entry><title>Custom CIL SELinux policies in Gentoo</title><link href="http://blog.siphos.be/2015/09/custom-cil-selinux-policies-in-gentoo/" rel="alternate"></link><published>2015-09-10T07:13:00+02:00</published><updated>2015-09-10T07:13:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2015-09-10:/2015/09/custom-cil-selinux-policies-in-gentoo/</id><summary type="html">&lt;p&gt;In Gentoo, we have been supporting &lt;a href="https://wiki.gentoo.org/wiki/SELinux/Tutorials/Creating_your_own_policy_module_file"&gt;custom policy packages&lt;/a&gt;
for a while now. Unlike most other distributions, which focus on binary packages,
Gentoo has always supported source-based packages as default (although 
&lt;a href="https://wiki.gentoo.org/wiki/Binary_package_guide"&gt;binary packages&lt;/a&gt; are 
supported as well).&lt;/p&gt;
&lt;p&gt;A recent &lt;a href="https://gitweb.gentoo.org/repo/gentoo.git/commit/?id=8f2aa45db35bbf3a74f8db09ece9edac60e79ee4"&gt;commit&lt;/a&gt;
now also allows CIL files to be used.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Policy ebuilds â€¦&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;In Gentoo, we have been supporting &lt;a href="https://wiki.gentoo.org/wiki/SELinux/Tutorials/Creating_your_own_policy_module_file"&gt;custom policy packages&lt;/a&gt;
for a while now. Unlike most other distributions, which focus on binary packages,
Gentoo has always supported source-based packages as default (although 
&lt;a href="https://wiki.gentoo.org/wiki/Binary_package_guide"&gt;binary packages&lt;/a&gt; are 
supported as well).&lt;/p&gt;
&lt;p&gt;A recent &lt;a href="https://gitweb.gentoo.org/repo/gentoo.git/commit/?id=8f2aa45db35bbf3a74f8db09ece9edac60e79ee4"&gt;commit&lt;/a&gt;
now also allows CIL files to be used.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Policy ebuilds, how they work&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gentoo provides its own SELinux policy, based on the &lt;a href="https://wiki.gentoo.org/wiki/SELinux/Reference_policy"&gt;reference policy&lt;/a&gt;, 
and provides per-module ebuilds (packages). For instance, the SELinux policy for
the &lt;a href="https://packages.gentoo.org/package/app-misc/screen"&gt;screen&lt;/a&gt; package is
provided by the &lt;a href="https://packages.gentoo.org/package/sec-policy/selinux-screen"&gt;sec-policy/selinux-screen&lt;/a&gt;
package.&lt;/p&gt;
&lt;p&gt;The package itself is pretty straight forward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Copyright 1999-2015 Gentoo Foundation&lt;/span&gt;
&lt;span class="c1"&gt;# Distributed under the terms of the GNU General Public License v2&lt;/span&gt;
&lt;span class="c1"&gt;# $Id$&lt;/span&gt;
&lt;span class="nv"&gt;EAPI&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;IUSE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;MODS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;screen&amp;quot;&lt;/span&gt;

inherit selinux-policy-2

&lt;span class="nv"&gt;DESCRIPTION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELinux policy for screen&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$PV&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;9999&lt;/span&gt;* &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nv"&gt;KEYWORDS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nv"&gt;KEYWORDS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~amd64 ~x86&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The real workhorse lays within a &lt;a href="https://devmanual.gentoo.org/eclass-writing/"&gt;Gentoo eclass&lt;/a&gt;,
something that can be seen as a library for ebuilds. It allows consolidation of functions and
activities so that a large set of ebuilds can be simplified. The more ebuilds are standardized,
the more development can be put inside an eclass instead of in the ebuilds. As a result, some
ebuilds are extremely simple, and the SELinux policy ebuilds are a good example of this.&lt;/p&gt;
&lt;p&gt;The eclass for SELinux policy ebuilds is called &lt;a href="https://devmanual.gentoo.org/eclass-reference/selinux-policy-2.eclass/index.html"&gt;selinux-policy-2.eclass&lt;/a&gt;
and holds a number of functionalities. One of these (the one we focus on right now)
is to support custom SELinux policy modules.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Custom SELinux policy ebuilds&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Whenever a user has a SELinux policy that is not part of the Gentoo policy repository,
then the user might want to provide these policies through packages still. This has
the advantage that Portage (or whatever package manager is used) is aware of the
policies on the system, and proper dependencies can be built in.&lt;/p&gt;
&lt;p&gt;To use a custom policy, the user needs to create an ebuild which informs the eclass
not only about the module name (through the &lt;code&gt;MODS&lt;/code&gt; variable) but also about the
policy files themselves. These files are put in the &lt;code&gt;files/&lt;/code&gt; location of the ebuild,
and referred to through the &lt;code&gt;POLICY_FILES&lt;/code&gt; variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Copyright 1999-2015 Gentoo Foundation&lt;/span&gt;
&lt;span class="c1"&gt;# Distributed under the terms of the GNU General Public License v2&lt;/span&gt;
&lt;span class="c1"&gt;# $Id$&lt;/span&gt;
&lt;span class="nv"&gt;EAPI&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;IUSE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;MODS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;oracle&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;POLICY_FILES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;oracle.te oracle.if oracle.fc&amp;quot;&lt;/span&gt;

inherit selinux-policy-2

&lt;span class="nv"&gt;DESCRIPTION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELinux policy for screen&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$PV&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;9999&lt;/span&gt;* &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nv"&gt;KEYWORDS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nv"&gt;KEYWORDS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~amd64 ~x86&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The eclass generally will try to build the policies, converting them into &lt;code&gt;.pp&lt;/code&gt;
files. With CIL, this is no longer needed. Instead, what we do is copy the &lt;code&gt;.cil&lt;/code&gt;
files straight into the location where we place the &lt;code&gt;.pp&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;From that point onwards, managing the &lt;code&gt;.cil&lt;/code&gt; files is similar to &lt;code&gt;.pp&lt;/code&gt; files.
They are loaded with &lt;code&gt;semodule -i&lt;/code&gt; and unloaded with &lt;code&gt;semodule -r&lt;/code&gt; when needed.&lt;/p&gt;
&lt;p&gt;Enabling CIL in our ebuilds is a small improvement (after the heavy workload
to support the 2.4 userspace) which allows Gentoo to stay ahead in the SELinux
world.&lt;/p&gt;</content><category term="Gentoo"></category><category term="gentoo"></category><category term="cil"></category><category term="selinux"></category><category term="ebuild"></category><category term="eclass"></category></entry><entry><title>Maintaining packages and backporting</title><link href="http://blog.siphos.be/2015/09/maintaining-packages-and-backporting/" rel="alternate"></link><published>2015-09-02T20:33:00+02:00</published><updated>2015-09-02T20:33:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2015-09-02:/2015/09/maintaining-packages-and-backporting/</id><summary type="html">&lt;p&gt;A few days ago I committed a small update to &lt;code&gt;policycoreutils&lt;/code&gt;, a SELinux related
package that provides most of the management utilities for SELinux systems. The
fix was to get two patches (which are committed upstream) into the existing
release so that our users can benefit from the fixed issues â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few days ago I committed a small update to &lt;code&gt;policycoreutils&lt;/code&gt;, a SELinux related
package that provides most of the management utilities for SELinux systems. The
fix was to get two patches (which are committed upstream) into the existing
release so that our users can benefit from the fixed issues without having to
wait for a new release.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Getting the patches&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To capture the patches, I used &lt;code&gt;git&lt;/code&gt; together with the commit id:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;~$ git format-patch -n -1 73b7ff41&lt;/span&gt;
&lt;span class="go"&gt;0001-Only-invoke-RPM-on-RPM-enabled-Linux-distributions.patch&lt;/span&gt;
&lt;span class="go"&gt;~$ git format-patch -n -1 4fbc6623&lt;/span&gt;
&lt;span class="go"&gt;0001-Set-self.sename-to-sename-after-calling-semanage_seu.patch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The two generated patch files contain all information about the commit. Thanks
to the &lt;code&gt;epatch&lt;/code&gt; support in the &lt;code&gt;eutils.eclass&lt;/code&gt;, these patch files are
immediately usable within Gentoo's ebuilds.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Updating the ebuilds&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The SELinux userspace ebuilds in Gentoo all have &lt;a href="http://blog.siphos.be/2015/06/live-selinux-userspace-ebuilds/"&gt;live ebuilds&lt;/a&gt;
available which are immediately usable for releases. The idea with those live
ebuilds is that we can simply copy them and commit in order to make a new release.&lt;/p&gt;
&lt;p&gt;So, in case of the patch backporting, the necessary patch files are first moved
into the &lt;code&gt;files/&lt;/code&gt; subdirectory of the package. Then, the live ebuild is updated
to use the new patches:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gu"&gt;@@ -88,6 +85,8 @@ src_prepare() {&lt;/span&gt;
                epatch &amp;quot;${FILESDIR}/0070-remove-symlink-attempt-fails-with-gentoo-sandbox-approach.patch&amp;quot;
                epatch &amp;quot;${FILESDIR}/0110-build-mcstrans-bug-472912.patch&amp;quot;
                epatch &amp;quot;${FILESDIR}/0120-build-failure-for-mcscolor-for-CONTEXT__CONTAINS.patch&amp;quot;
&lt;span class="gi"&gt;+               epatch &amp;quot;${FILESDIR}/0130-Only-invoke-RPM-on-RPM-enabled-Linux-distributions-bug-534682.patch&amp;quot;&lt;/span&gt;
&lt;span class="gi"&gt;+               epatch &amp;quot;${FILESDIR}/0140-Set-self.sename-to-sename-after-calling-semanage-bug-557370.patch&amp;quot;&lt;/span&gt;
        fi

        # rlpkg is more useful than fixfiles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The patches themselves do not apply for the live ebuilds themselves (they are
ignored there) as we want the live ebuilds to be as close to the upstream
project as possible. But because the ebuilds are immediately usable for
releases, we add the necessary information there first.&lt;/p&gt;
&lt;p&gt;Next, the new release is created:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;~$ cp policycoreutils-9999.ebuild policycoreutils-2.4-r2.ebuild&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Testing the changes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The new release is then tested. I have a couple of scripts that I use
for automated testing. So first I update these scripts to also try out
the functionality that was failing before. On existing systems, these
tests should fail:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Running task semanage (Various semanage related operations).
  ...
    Executing step &amp;quot;perm_port_on   : Marking portage_t as a permissive domain                              &amp;quot; -&amp;gt; ok
    Executing step &amp;quot;perm_port_off  : Removing permissive mark from portage_t                               &amp;quot; -&amp;gt; ok
    Executing step &amp;quot;selogin_modify : Modifying a SELinux login definition                                  &amp;quot; -&amp;gt; failed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, on a test system where the new package has been installed, the same
testset is executed (together with all other tests) to validate if the problem
is fixed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pushing out the new release&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Finally, with the fixes in and validated, the new release is pushed out (into
~arch first of course) and the bugs are marked as &lt;code&gt;RESOLVED:TEST-REQUEST&lt;/code&gt;. Users
can confirm that it works (which would move it to &lt;code&gt;VERIFIED:TEST-REQUEST&lt;/code&gt;) or
we stabilize it after the regular testing period is over (which moves it to
&lt;code&gt;RESOLVED:FIXED&lt;/code&gt; or &lt;code&gt;VERIFIED:FIXED&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I do still have to get used to Gentoo using git as its repository now. The
&lt;a href="https://wiki.gentoo.org/wiki/Gentoo_git_workflow"&gt;workflow&lt;/a&gt; to use is
documented though. Luckily, because I often get that the &lt;code&gt;git push&lt;/code&gt; fails
(due to changes to the tree since my last pull). So I need to run &lt;code&gt;git
pull --rebase=preserve&lt;/code&gt; followed by &lt;code&gt;repoman full&lt;/code&gt; and then the push again
sufficiently quick after each other).&lt;/p&gt;
&lt;p&gt;This simple flow is easy to get used to. Thanks to the existing foundation
for package maintenance (such as &lt;code&gt;epatch&lt;/code&gt; for patching, live ebuilds that
can be immediately used for releases and the ability to just cherry pick
patches towards our repository) we can serve updates with just a few minutes
of work.&lt;/p&gt;</content><category term="Gentoo"></category><category term="gentoo"></category><category term="ebuild"></category><category term="patching"></category></entry><entry><title>Slowly converting from GuideXML to HTML</title><link href="http://blog.siphos.be/2015/08/slowly-converting-from-guidexml-to-html/" rel="alternate"></link><published>2015-08-25T11:30:00+02:00</published><updated>2015-08-25T11:30:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2015-08-25:/2015/08/slowly-converting-from-guidexml-to-html/</id><summary type="html">&lt;p&gt;Gentoo has removed its support of the older GuideXML format in favor of using
the &lt;a href="https://wiki.gentoo.org"&gt;Gentoo Wiki&lt;/a&gt; and a new content management system
for the main site (or is it static pages, I don't have the faintest idea to be
honest). I do still have a few GuideXML pages in â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Gentoo has removed its support of the older GuideXML format in favor of using
the &lt;a href="https://wiki.gentoo.org"&gt;Gentoo Wiki&lt;/a&gt; and a new content management system
for the main site (or is it static pages, I don't have the faintest idea to be
honest). I do still have a few GuideXML pages in my development space, which I
am going to move to HTML pretty soon.&lt;/p&gt;
&lt;p&gt;In order to do so, I make use of the &lt;a href="https://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo/xml/htdocs/xsl/guidexml2wiki.xsl?view=log"&gt;guidexml2wiki&lt;/a&gt;
stylesheet I &lt;a href="http://blog.siphos.be/2013/02/transforming-guidexml-to-wiki/"&gt;developed&lt;/a&gt;.
But instead of migrating it to wiki syntax, I want to end with HTML.&lt;/p&gt;


&lt;p&gt;So what I do is first convert the file from GuideXML to MediaWiki with &lt;code&gt;xsltproc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, I use &lt;code&gt;pandoc&lt;/code&gt; to convert this to restructured text. The idea is that the main
pages on my devpage are now restructured text based. I was hoping to use markdown, but
the conversion from markdown to HTML is not what I hoped it was.&lt;/p&gt;
&lt;p&gt;The restructured text is then converted to HTML using &lt;code&gt;rst2html.py&lt;/code&gt;. In the end,
I use the following function (for conversion, once):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Convert GuideXML to RestructedText and to HTML&lt;/span&gt;
gxml2html&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;basefile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;%%.xml&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Convert to Mediawiki syntax&lt;/span&gt;
  xsltproc ~/dev-cvs/gentoo/xml/htdocs/xsl/guidexml2wiki.xsl &lt;span class="nv"&gt;$1&lt;/span&gt; &amp;gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;basefile&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.mediawiki

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;basefile&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.mediawiki &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c1"&gt;# Convert to restructured text&lt;/span&gt;
    pandoc -f mediawiki -t rst -s -S -o &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;basefile&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.rst &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;basefile&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.mediawiki&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;basefile&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.rst &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c1"&gt;# Use your own stylesheet links (use full https URLs for this)&lt;/span&gt;
    rst2html.py  --stylesheet&lt;span class="o"&gt;=&lt;/span&gt;link-to-bootstrap.min.css,link-to-tyrian.min.css --link-stylesheet &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;basefile&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.rst &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;basefile&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.html
  &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Is it perfect? No, but &lt;a href="http://dev.gentoo.org/~swift/snapshots/"&gt;it works&lt;/a&gt;.&lt;/p&gt;</content><category term="Gentoo"></category><category term="gentoo"></category><category term="guidexml"></category><category term="xml"></category><category term="xslt"></category><category term="rst"></category><category term="mediawiki"></category><category term="html"></category></entry><entry><title>Switching OpenSSH to ed25519 keys</title><link href="http://blog.siphos.be/2015/08/switching-openssh-to-ed25519-keys/" rel="alternate"></link><published>2015-08-19T18:26:00+02:00</published><updated>2015-08-19T18:26:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2015-08-19:/2015/08/switching-openssh-to-ed25519-keys/</id><summary type="html">&lt;p&gt;With Mike's &lt;a href="http://comments.gmane.org/gmane.linux.gentoo.devel/96896"&gt;news item&lt;/a&gt;
on OpenSSH's deprecation of the &lt;a href="https://en.wikipedia.org/wiki/Digital_Signature_Algorithm"&gt;DSA algorithm&lt;/a&gt;
for the public key authentication, I started switching the few keys I still had
using DSA to the suggested &lt;a href="http://ed25519.cr.yp.to/"&gt;ED25519&lt;/a&gt; algorithm. Of
course, I wouldn't be a security-interested party if I did not do some additional
investigation into the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;With Mike's &lt;a href="http://comments.gmane.org/gmane.linux.gentoo.devel/96896"&gt;news item&lt;/a&gt;
on OpenSSH's deprecation of the &lt;a href="https://en.wikipedia.org/wiki/Digital_Signature_Algorithm"&gt;DSA algorithm&lt;/a&gt;
for the public key authentication, I started switching the few keys I still had
using DSA to the suggested &lt;a href="http://ed25519.cr.yp.to/"&gt;ED25519&lt;/a&gt; algorithm. Of
course, I wouldn't be a security-interested party if I did not do some additional
investigation into the DSA versus Ed25519 discussion.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;The issue with DSA&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You might find DSA a bit slower than RSA:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ openssl speed rsa1024 rsa2048 dsa1024 dsa2048
...
                  sign    verify    sign/s verify/s
rsa 1024 bits 0.000127s 0.000009s   7874.0 111147.6
rsa 2048 bits 0.000959s 0.000029s   1042.9  33956.0
                  sign    verify    sign/s verify/s
dsa 1024 bits 0.000098s 0.000103s  10213.9   9702.8
dsa 2048 bits 0.000293s 0.000339s   3407.9   2947.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, RSA verification outperforms DSA in verification, while signing
with DSA is better than RSA. But for what OpenSSH is concerned, this speed
difference should not be noticeable on the vast majority of OpenSSH servers.&lt;/p&gt;
&lt;p&gt;So no, it is not the speed, but the secure state of the DSS standard.&lt;/p&gt;
&lt;p&gt;The OpenSSH developers find that &lt;a href="http://www.openssh.com/legacy.html"&gt;ssh-dss (DSA) is too weak&lt;/a&gt;,
which is followed by &lt;a href="http://meyering.net/nuke-your-DSA-keys/"&gt;various&lt;/a&gt; 
&lt;a href="https://docs.moodle.org/dev/SSH_key"&gt;sources&lt;/a&gt;. Considering the impact of these keys,
it is important that they follow the state-of-the-art cryptographic services. &lt;/p&gt;
&lt;p&gt;Instead, they suggest to switch to elliptic curve cryptography based algorithms,
with Ed25519 and &lt;a href="https://en.wikipedia.org/wiki/Curve25519"&gt;Curve25519&lt;/a&gt; coming out
on top.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Switch to RSA or ED25519?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given that RSA is still considered very secure, one of the questions is of
course if &lt;a href="http://ed25519.cr.yp.to/"&gt;ED25519&lt;/a&gt; is the right choice here or not.
I don't consider myself anything in cryptography, but I do like to validate stuff
through academic and (hopefully) reputable sources for information (not that I don't
trust the OpenSSH and OpenSSL folks, but more from a broader interest in the subject).&lt;/p&gt;
&lt;p&gt;Ed25519 should be written fully as &lt;em&gt;Ed25519-SHA-512&lt;/em&gt; and is a signature
algorithm. It uses elliptic curve cryptography as explained on the
&lt;a href="https://en.wikipedia.org/wiki/EdDSA"&gt;EdDSA wikipedia page&lt;/a&gt;. An often cited
paper is &lt;a href="http://aspartame.shiftleft.org/papers/fff/fff.pdf"&gt;Fast and compact elliptic-curve cryptography&lt;/a&gt;
by Mike Hamburg, which talks about the performance improvements, but the main
paper is called &lt;a href="http://ed25519.cr.yp.to/ed25519-20110705.pdf"&gt;High-speed high-security signatures&lt;/a&gt;
which introduces the Ed25519 implementation.&lt;/p&gt;
&lt;p&gt;Of the references I was able to (quickly) go through (not all papers are
publicly reachable) none showed any concerns about the secure state of the 
algorithm. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The (simple) process of switching&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Switching to Ed25519 is simple. First, generate the (new) SSH key (below
just an example run):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ ssh-keygen -t ed25519
Generating public/private ed25519 key pair.
Enter file in which to save the key (/home/testuser/.ssh/id_ed25519): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/testuser/.ssh/id_ed25519.
Your public key has been saved in /home/testuser/.ssh/id_ed25519.pub.
The key fingerprint is:
SHA256:RDaEw3tNAKBGMJ2S4wmN+6P3yDYIE+v90Hfzz/0r73M testuser@testserver
The key&amp;#39;s randomart image is:
+--[ED25519 256]--+
|o*...o.+*.       |
|*o+.  +o ..      |
|o++    o.o       |
|o+    ... .      |
| +     .S        |
|+ o .            |
|o+.o . . o       |
|oo+o. . . o ....E|
| oooo.     ..o+=*|
+----[SHA256]-----+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, make sure that the &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; file contains the public key
(as generated as &lt;code&gt;id_ed25519.pub&lt;/code&gt;). Don't remove the other keys yet until the
communication is validated. For me, all I had to do was to update the file in
the Salt repository and have the master push the changes to all nodes (starting
with non-production first of course).&lt;/p&gt;
&lt;p&gt;Next, try to log on to the system using the Ed25519 key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ ssh -i ~/.ssh/id_ed25519 testuser@testserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure that your SSH agent is not running as it might still try to revert
back to another key if the Ed25519 one does not work. You can validate if the
connection was using Ed25519 through the &lt;code&gt;auth.log&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;~$ sudo tail -f auth.log&lt;/span&gt;
&lt;span class="go"&gt;Aug 17 21:20:48 localhost sshd[13962]: Accepted publickey for root from \&lt;/span&gt;
&lt;span class="go"&gt;  192.168.100.1 port 43152 ssh2: ED25519 SHA256:-------redacted----------------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If this communication succeeds, then you can remove the old key from the &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;On the client level, you might want to hide &lt;code&gt;~/.ssh/id_dsa&lt;/code&gt; from the SSH agent:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Obsolete - keychain ~/.ssh/id_dsa&lt;/span&gt;
keychain ~/.ssh/id_ed25519
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If a server update was forgotten, then the authentication will fail and, depending
on the configuration, either fall back to the regular authentication or fail
immediately. This gives a nice heads-up to you to update the server, while keeping
the key handy just in case. Just refer to the old &lt;code&gt;id_dsa&lt;/code&gt; key during the authentication
and fix up the server.&lt;/p&gt;</content><category term="Free Software"></category><category term="openssh"></category><category term="ssh"></category><category term="gentoo"></category></entry><entry><title>Finding a good compression utility</title><link href="http://blog.siphos.be/2015/08/finding-a-good-compression-utility/" rel="alternate"></link><published>2015-08-13T19:15:00+02:00</published><updated>2015-08-13T19:15:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2015-08-13:/2015/08/finding-a-good-compression-utility/</id><summary type="html">&lt;p&gt;I recently came across a &lt;a href="http://catchchallenger.first-world.info//wiki/Quick_Benchmark:_Gzip_vs_Bzip2_vs_LZMA_vs_XZ_vs_LZ4_vs_LZO"&gt;wiki page&lt;/a&gt;
written by &lt;a href="http://catchchallenger.first-world.info/wiki/User:Alpha_one_x86"&gt;Herman Brule&lt;/a&gt;
which gives a quick benchmark on a couple of compression methods / algorithms.
It gave me the idea of writing a quick script that tests out a wide number of
compression utilities available in Gentoo (usually through the &lt;code&gt;app-arch&lt;/code&gt;
category â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently came across a &lt;a href="http://catchchallenger.first-world.info//wiki/Quick_Benchmark:_Gzip_vs_Bzip2_vs_LZMA_vs_XZ_vs_LZ4_vs_LZO"&gt;wiki page&lt;/a&gt;
written by &lt;a href="http://catchchallenger.first-world.info/wiki/User:Alpha_one_x86"&gt;Herman Brule&lt;/a&gt;
which gives a quick benchmark on a couple of compression methods / algorithms.
It gave me the idea of writing a quick script that tests out a wide number of
compression utilities available in Gentoo (usually through the &lt;code&gt;app-arch&lt;/code&gt;
category), with also a number of options (in case multiple options are
possible).&lt;/p&gt;


&lt;p&gt;The currently supported packages are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;app-arch/bloscpack      app-arch/bzip2          app-arch/freeze
app-arch/gzip           app-arch/lha            app-arch/lrzip
app-arch/lz4            app-arch/lzip           app-arch/lzma
app-arch/lzop           app-arch/mscompress     app-arch/p7zip
app-arch/pigz           app-arch/pixz           app-arch/plzip
app-arch/pxz            app-arch/rar            app-arch/rzip
app-arch/xar            app-arch/xz-utils       app-arch/zopfli
app-arch/zpaq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The script should keep the best compression information: duration, compression
ratio, compression command, as well as the compressed file itself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Finding the "best" compression&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is not my intention to find the most optimal compression, as that would
require heuristic optimizations (which has triggered my interest in seeking
such software, or writing it myself) while trying out various optimization
parameters.&lt;/p&gt;
&lt;p&gt;No, what I want is to find the "best" compression for a given file, with "best"
being either&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;most reduced size (which I call &lt;em&gt;compression delta&lt;/em&gt; in my script)&lt;/li&gt;
&lt;li&gt;best reduction obtained per time unit (which I call the &lt;em&gt;efficiency&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For me personally, I think I would use it for the various raw image files that
I have through the photography hobby. Those image files are difficult to
compress (the Nikon DS3200 I use is an entry-level camera which applies
lossy compression already for its raw files) but their total size is considerable,
and it would allow me to better use the storage I have available both on my
laptop (which is SSD-only) as well as backup server.&lt;/p&gt;
&lt;p&gt;But next to the best compression ratio, the efficiency is also an important
metric as it shows how efficient the algorithm works in a certain time aspect.
If one compression method yields 80% reduction in 5 minutes, and another one
yields 80,5% in 45 minutes, then I might want to prefer the first one even
though that is not the best compression at all.&lt;/p&gt;
&lt;p&gt;Although the script could be used to get the most compression (without
resolving to an optimization algorithm for the compression commands) for 
each file, this is definitely not the use case. A single run can take hours
for files that are compressed in a handful of seconds. But it can show the
best algorithms for a particular file type (for instance, do a few runs on
a couple of raw image files and see which method is most succesful).&lt;/p&gt;
&lt;p&gt;Another use case I'm currently looking into is how much improvement I can
get when multiple files (all raw image files) are first grouped in a single
archive (&lt;code&gt;.tar&lt;/code&gt;). Theoretically, this should improve the compression, but
by how much?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How the script works&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The script does not contain much intelligence. It iterates over a wide set of
compression commands that I tested out, checks the final compressed file size,
and if it is better than a previous one it keeps this compressed file (and
its statistics).&lt;/p&gt;
&lt;p&gt;I tried to group some of the compressions together based on the algorithm used,
but as I don't really know the details of the algorithms (it's based on manual
pages and internet sites) and some of them combine multiple algorithms, it is
more of a high-level selection than anything else.&lt;/p&gt;
&lt;p&gt;The script can also only run the compressions of a single application (which I
use when I'm fine-tuning the parameter runs).&lt;/p&gt;
&lt;p&gt;A run shows something like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Original file (test.nef) size 20958430 bytes
      package name                                                 command      duration                   size compr.Î” effic.:
      ------------                                                 -------      --------                   ---- ------- -------
app-arch/bloscpack                                               blpk -n 4           0.1               20947097 0.00054 0.00416
app-arch/bloscpack                                               blpk -n 8           0.1               20947097 0.00054 0.00492
app-arch/bloscpack                                              blpk -n 16           0.1               20947097 0.00054 0.00492
    app-arch/bzip2                                                   bzip2           2.0               19285616 0.07982 0.03991
    app-arch/bzip2                                                bzip2 -1           2.0               19881886 0.05137 0.02543
    app-arch/bzip2                                                bzip2 -2           1.9               19673083 0.06133 0.03211
...
    app-arch/p7zip                                      7za -tzip -mm=PPMd           5.9               19002882 0.09331 0.01592
    app-arch/p7zip                             7za -tzip -mm=PPMd -mmem=24           5.7               19002882 0.09331 0.01640
    app-arch/p7zip                             7za -tzip -mm=PPMd -mmem=25           6.4               18871933 0.09955 0.01551
    app-arch/p7zip                             7za -tzip -mm=PPMd -mmem=26           7.7               18771632 0.10434 0.01364
    app-arch/p7zip                             7za -tzip -mm=PPMd -mmem=27           9.0               18652402 0.11003 0.01224
    app-arch/p7zip                             7za -tzip -mm=PPMd -mmem=28          10.0               18521291 0.11628 0.01161
    app-arch/p7zip                                       7za -t7z -m0=PPMd           5.7               18999088 0.09349 0.01634
    app-arch/p7zip                                7za -t7z -m0=PPMd:mem=24           5.8               18999088 0.09349 0.01617
    app-arch/p7zip                                7za -t7z -m0=PPMd:mem=25           6.5               18868478 0.09972 0.01534
    app-arch/p7zip                                7za -t7z -m0=PPMd:mem=26           7.5               18770031 0.10442 0.01387
    app-arch/p7zip                                7za -t7z -m0=PPMd:mem=27           8.6               18651294 0.11008 0.01282
    app-arch/p7zip                                7za -t7z -m0=PPMd:mem=28          10.6               18518330 0.11643 0.01100
      app-arch/rar                                                     rar           0.9               20249470 0.03383 0.03980
      app-arch/rar                                                 rar -m0           0.0               20958497 -0.00000        -0.00008
      app-arch/rar                                                 rar -m1           0.2               20243598 0.03411 0.14829
      app-arch/rar                                                 rar -m2           0.8               20252266 0.03369 0.04433
      app-arch/rar                                                 rar -m3           0.8               20249470 0.03383 0.04027
      app-arch/rar                                                 rar -m4           0.9               20248859 0.03386 0.03983
      app-arch/rar                                                 rar -m5           0.8               20248577 0.03387 0.04181
    app-arch/lrzip                                                lrzip -z          13.1               19769417 0.05673 0.00432
     app-arch/zpaq                                                    zpaq           0.2               20970029 -0.00055        -0.00252
The best compression was found with 7za -t7z -m0=PPMd:mem=28.
The compression delta obtained was 0.11643 within 10.58 seconds.
This file is now available as test.nef.7z.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above example, the test file was around 20 MByte. The best compression
compression command that the script found was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ 7za -t7z -m0=PPMd:mem=28 a test.nef.7z test.nef
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The resulting file (&lt;code&gt;test.nef.7z&lt;/code&gt;) is 18 MByte, a reduction of 11,64%. The
compression command took almost 11 seconds to do its thing, which gave an
efficiency rating of 0,011, which is definitely not a fast one.&lt;/p&gt;
&lt;p&gt;Some other algorithms don't do bad either with a better efficiency. For
instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;   app-arch/pbzip2                                                  pbzip2           0.6               19287402 0.07973 0.13071
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case, the &lt;code&gt;pbzip2&lt;/code&gt; command got almost 8% reduction in less than a
second, which is considerably more efficient than the 11-seconds long &lt;code&gt;7za&lt;/code&gt;
run.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Want to try it out yourself?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I've pushed the script to my &lt;a href="https://github.com/sjvermeu/small.coding/tree/master/sw_comprbest"&gt;github&lt;/a&gt;
location. Do a quick review of the code first (to see that I did not include
anything malicious) and then execute it to see how it works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ sw_comprbest -h
Usage: sw_comprbest --infile=&amp;lt;inputfile&amp;gt; [--family=&amp;lt;family&amp;gt;[,...]] [--command=&amp;lt;cmd&amp;gt;]
       sw_comprbest -i &amp;lt;inputfile&amp;gt; [-f &amp;lt;family&amp;gt;[,...]] [-c &amp;lt;cmd&amp;gt;]

Supported families: blosc bwt deflate lzma ppmd zpaq. These can be provided comma-separated.
Command is an additional filter - only the tests that use this base command are run.

The output shows
  - The package (in Gentoo) that the command belongs to
  - The command run
  - The duration (in seconds)
  - The size (in bytes) of the resulting file
  - The compression delta (percentage) showing how much is reduced (higher is better)
  - The efficiency ratio showing how much reduction (percentage) per second (higher is better)

When the command supports multithreading, we use the number of available cores on the system (as told by /proc/cpuinfo).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For instance, to try it out against a PDF file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ sw_comprbest -i MEA6-Sven_Vermeulen-Research_Summary.pdf
Original file (MEA6-Sven_Vermeulen-Research_Summary.pdf) size 117763 bytes
...
The best compression was found with zopfli --deflate.
The compression delta obtained was 0.00982 within 0.19 seconds.
This file is now available as MEA6-Sven_Vermeulen-Research_Summary.pdf.deflate.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So in this case, the resulting file is hardly better compressed - the PDF
itself is already compressed. Let's try it against the uncompressed PDF:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ pdftk MEA6-Sven_Vermeulen-Research_Summary.pdf output test.pdf uncompress
~$ sw_comprbest -i test.pdf
Original file (test.pdf) size 144670 bytes
...
The best compression was found with lrzip -z.
The compression delta obtained was 0.27739 within 0.18 seconds.
This file is now available as test.pdf.lrz.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is somewhat better:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ ls -l MEA6-Sven_Vermeulen-Research_Summary.pdf* test.pdf*
-rw-r--r--. 1 swift swift 117763 Aug  7 14:32 MEA6-Sven_Vermeulen-Research_Summary.pdf
-rw-r--r--. 1 swift swift 116606 Aug  7 14:32 MEA6-Sven_Vermeulen-Research_Summary.pdf.deflate
-rw-r--r--. 1 swift swift 144670 Aug  7 14:34 test.pdf
-rw-r--r--. 1 swift swift 104540 Aug  7 14:35 test.pdf.lrz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The resulting file is 11,22% reduced from the original one.&lt;/p&gt;</content><category term="Gentoo"></category><category term="gentoo"></category><category term="compression"></category></entry><entry><title>Why we do confine Firefox</title><link href="http://blog.siphos.be/2015/08/why-we-do-confine-firefox/" rel="alternate"></link><published>2015-08-11T19:18:00+02:00</published><updated>2015-08-11T19:18:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2015-08-11:/2015/08/why-we-do-confine-firefox/</id><summary type="html">&lt;p&gt;If you're a bit following the SELinux development community you will know
&lt;a href="http://danwalsh.livejournal.com"&gt;Dan Walsh&lt;/a&gt;, a &lt;a href="http://people.redhat.com/dwalsh/"&gt;Red Hat&lt;/a&gt;
security engineer. Today he &lt;a href="http://danwalsh.livejournal.com/72697.html"&gt;blogged&lt;/a&gt; 
about &lt;em&gt;CVE-2015-4495 and SELinux, or why doesn't SELinux confine Firefox&lt;/em&gt;. He 
should've asked why the &lt;em&gt;reference policy&lt;/em&gt; or &lt;em&gt;Red Hat/Fedora policy&lt;/em&gt; does not
confine Firefox, because SELinux â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you're a bit following the SELinux development community you will know
&lt;a href="http://danwalsh.livejournal.com"&gt;Dan Walsh&lt;/a&gt;, a &lt;a href="http://people.redhat.com/dwalsh/"&gt;Red Hat&lt;/a&gt;
security engineer. Today he &lt;a href="http://danwalsh.livejournal.com/72697.html"&gt;blogged&lt;/a&gt; 
about &lt;em&gt;CVE-2015-4495 and SELinux, or why doesn't SELinux confine Firefox&lt;/em&gt;. He 
should've asked why the &lt;em&gt;reference policy&lt;/em&gt; or &lt;em&gt;Red Hat/Fedora policy&lt;/em&gt; does not
confine Firefox, because SELinux is, as I've
&lt;a href="http://blog.siphos.be/2015/08/dont-confuse-selinux-with-its-policy/"&gt;mentioned before&lt;/a&gt;,
not the same as its policy.&lt;/p&gt;
&lt;p&gt;In effect, Gentoo's SELinux policy &lt;em&gt;does&lt;/em&gt; confine Firefox by default. One of the
principles we focus on in Gentoo Hardened is to
&lt;a href="https://wiki.gentoo.org/wiki/Project:SELinux/Development_policy#Develop_desktop_policies"&gt;develop desktop policies&lt;/a&gt;
in order to reduce exposure and information leakage of user documents. We might
not have the manpower to confine all desktop applications, but I do think it is
worthwhile to at least attempt to do this, even though what Dan Walsh mentioned
is also correct: desktops are notoriously difficult to use a mandatory access
control system on.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;How Gentoo wants to support more confined desktop applications&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What Gentoo Hardened tries to do is to support the
&lt;a href="http://standards.freedesktop.org/basedir-spec/basedir-spec-0.8.html"&gt;XDG Base Directory Specification&lt;/a&gt;
for several documentation types. Downloads are marked as &lt;code&gt;xdg_downloads_home_t&lt;/code&gt;,
pictures are marked as &lt;code&gt;xdg_pictures_home_t&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;With those types defined, we grant the regular user domains full access to
those types, but start removing access to user content from applications. Rules
such as the following are commented out or removed from the policies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# userdom_manage_user_home_content_dirs(mozilla_t)
# userdom_manage_user_home_content_files(mozilla_t)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instead, we add in a call to a template we have defined ourselves:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;userdom_user_content_access_template(mozilla, { mozilla_t mozilla_plugin_t })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This call makes access to user content optional through SELinux booleans. For
instance, for the &lt;code&gt;mozilla_t&lt;/code&gt; domain (which is used for Firefox), the following
booleans are created:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# Read generic (user_home_t) user content
mozilla_read_generic_user_content       -&amp;gt;      true

# Read all user content
mozilla_read_all_user_content           -&amp;gt;      false

# Manage generic (user_home_t) user content
mozilla_manage_generic_user_content     -&amp;gt;      false

# Manage all user content
mozilla_manage_all_user_content         -&amp;gt;      false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, the default setting is that Firefox can read user content, but
only non-specific types. So &lt;code&gt;ssh_home_t&lt;/code&gt;, which is used for the SSH related
files, is not readable by Firefox with our policy &lt;em&gt;by default&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;By changing these booleans, the policy is fine-tuned to the requirements of
the administrator. On my systems, &lt;code&gt;mozilla_read_generic_user_content&lt;/code&gt; is switched
off.&lt;/p&gt;
&lt;p&gt;You might ask how we can then still support a browser if it cannot access user
content to upload or download. Well, as mentioned before, we support the XDG
types. The browser is allowed to manage &lt;code&gt;xdg_download_home_t&lt;/code&gt; files and
directories. For the majority of cases, this is sufficient. I also don't mind
copying over files to the &lt;code&gt;~/Downloads&lt;/code&gt; directory just for uploading files. But
I am well aware that this is not what the majority of users would want, which
is why the default is as it is.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There is much more work to be done sadly&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As said earlier, the default policy will allow &lt;em&gt;reading&lt;/em&gt; of user files if those
files are not typed specifically. Types that are protected by our policy (but not
by the reference policy standard) includes SSH related files at &lt;code&gt;~/.ssh&lt;/code&gt; and
GnuPG files at &lt;code&gt;~/.gnupg&lt;/code&gt;. Even other configuration files, such as for my Mutt
configuration (&lt;code&gt;~/.muttrc&lt;/code&gt;) which contains a password for an IMAP server I connect
to, are not reachable.&lt;/p&gt;
&lt;p&gt;However, it is still far from perfect. One of the reasons is that many desktop
applications are not "converted" yet to our desktop policy approach. Yes, Chromium
is also already converted, and policies we've added such as for Skype also do not
allow direct access unless the user explicitly enabled it. But Evolution for instance
isn't yet.&lt;/p&gt;
&lt;p&gt;Converting desktop policies to a more strict setup requires lots of testing, which
translates to many human resources. Within Gentoo, only a few developers and 
contributors are working on policies, and considering that this is not a change
that is already part of the (upstream) reference policy, some contributors also
do not want to put lots of focus on it either. But without having done the works,
it will not be easy (nor probably acceptable) to upstream this (the XDG patch has
been submitted a few times already but wasn't deemed ready yet then).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Having a more restrictive policy isn't the end&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As the blog post of Dan rightly mentioned, there are still quite some other
ways of accessing information that we might want to protect. An application 
might not have access to user files, but can be able to communicate (for instance
through DBus) with an application that does, and through that instruct it to
pass on the data.&lt;/p&gt;
&lt;p&gt;Plugins might require permissions which do not match with the principles set up
earlier. When we tried out Google Talk (needed for proper Google Hangouts support)
we noticed that it requires many, many more privileges. Luckily, we were able to
write down and develop a policy for the Google Talk plugin (&lt;code&gt;googletalk_plugin_t&lt;/code&gt;)
so it is still properly confined. But this is just a single plugin, and I'm sure
that more plugins exist which will have similar requirements. Which leads to more
policy development.&lt;/p&gt;
&lt;p&gt;But having workarounds does not make the effort we do worthless. Being able to
work around a firewall through application data does not make the firewall
useless, it is just one of the many security layers. The same is true with SELinux
policies.&lt;/p&gt;
&lt;p&gt;I am glad that we at least try to confine desktop applications more, and
that Gentoo Hardened users who use SELinux are at least somewhat more protected
from the vulnerability (even with the default case) and that our investment for
this is sound.&lt;/p&gt;</content><category term="SELinux"></category><category term="gentoo"></category><category term="selinux"></category><category term="policy"></category><category term="firefox"></category><category term="cve"></category><category term="vulnerability"></category><category term="xdg"></category></entry><entry><title>Live SELinux userspace ebuilds</title><link href="http://blog.siphos.be/2015/06/live-selinux-userspace-ebuilds/" rel="alternate"></link><published>2015-06-10T20:07:00+02:00</published><updated>2015-06-10T20:07:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2015-06-10:/2015/06/live-selinux-userspace-ebuilds/</id><summary type="html">&lt;p&gt;In between courses, I pushed out live ebuilds for the SELinux userspace
applications: libselinux, policycoreutils, libsemanage, libsepol,
sepolgen, checkpolicy and secilc. These live ebuilds (with Gentoo
version 9999) pull in the current development code of the &lt;a href="https://github.com/SELinuxProject/selinux"&gt;SELinux
userspace&lt;/a&gt; so that developers
and contributors can already work with in-progress code developments â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In between courses, I pushed out live ebuilds for the SELinux userspace
applications: libselinux, policycoreutils, libsemanage, libsepol,
sepolgen, checkpolicy and secilc. These live ebuilds (with Gentoo
version 9999) pull in the current development code of the &lt;a href="https://github.com/SELinuxProject/selinux"&gt;SELinux
userspace&lt;/a&gt; so that developers
and contributors can already work with in-progress code developments as
well as see how they work on a Gentoo platform.&lt;/p&gt;


&lt;p&gt;That being said, I do not recommend using the live ebuilds for anyone
else except developers and contributors in development zones (definitely
not on production). One of the reasons is that the ebuilds do not apply
Gentoo-specific patches to the ebuilds. I would also like to remove the
Gentoo-specific manipulations that we do, such as small Makefile
adjustments, but let's start with just ignoring the Gentoo patches.&lt;/p&gt;
&lt;p&gt;Dropping the patches makes sure that we track upstream libraries and
userspace closely, and allows developers to try and send out patches to
the SELinux project to fix Gentoo related build problems. But as not all
packages can be deployed successfully on a Gentoo system some patches
need to be applied anyway. For this, users can drop the necessary
patches inside &lt;code&gt;/etc/portage/patches&lt;/code&gt; as all userspace ebuilds use the
&lt;em&gt;epatch_user&lt;/em&gt; method.&lt;/p&gt;
&lt;p&gt;Finally, observant users will notice that "secilc" is also provided.
This is a new package, which is probably going to have an official
release with a new userspace release. It allows for building CIL-based
SELinux policy code, and was one of the drivers for me to create the
live ebuilds as I'm experimenting with the CIL constructions. So expect
more on that later.&lt;/p&gt;</content><category term="Gentoo"></category><category term="cil"></category><category term="Gentoo"></category><category term="selinux"></category><category term="userspace"></category></entry><entry><title>Moving closer to 2.4 stabilization</title><link href="http://blog.siphos.be/2015/04/moving-closer-to-2-4-stabilization/" rel="alternate"></link><published>2015-04-27T19:18:00+02:00</published><updated>2015-04-27T19:18:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2015-04-27:/2015/04/moving-closer-to-2-4-stabilization/</id><summary type="html">&lt;p&gt;The &lt;a href="https://github.com/SELinuxProject/selinux/wiki"&gt;SELinux userspace&lt;/a&gt;
project has released version 2.4 in february this year, after release
candidates have been tested for half a year. After its release, we at
the &lt;a href="https://wiki.gentoo.org/wiki/Project:Hardened"&gt;Gentoo Hardened&lt;/a&gt;
project have been working hard to integrate it within Gentoo. This
effort has been made a bit more difficult â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="https://github.com/SELinuxProject/selinux/wiki"&gt;SELinux userspace&lt;/a&gt;
project has released version 2.4 in february this year, after release
candidates have been tested for half a year. After its release, we at
the &lt;a href="https://wiki.gentoo.org/wiki/Project:Hardened"&gt;Gentoo Hardened&lt;/a&gt;
project have been working hard to integrate it within Gentoo. This
effort has been made a bit more difficult due to the migration of the
policy store from one location to another while at the same time
switching to HLL- and CIL based builds.&lt;/p&gt;
&lt;p&gt;Lately, 2.4 itself has been pretty stable, and we're focusing on the
proper migration from 2.3 to 2.4. The SELinux policy has been adjusted
to allow the migrations to work, and a few final fixes are being tested
so that we can safely transition our stable users from 2.3 to 2.4.
Hopefully we'll be able to stabilize the userspace this month or
beginning of next month.&lt;/p&gt;</content><category term="Gentoo"></category><category term="2.4"></category><category term="Gentoo"></category><category term="hardened"></category><category term="selinux"></category><category term="userspace"></category></entry><entry><title>Trying out Pelican, part one</title><link href="http://blog.siphos.be/2015/03/trying-out-pelican-part-one/" rel="alternate"></link><published>2015-03-06T20:02:00+01:00</published><updated>2015-03-06T20:02:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2015-03-06:/2015/03/trying-out-pelican-part-one/</id><summary type="html">&lt;p&gt;One of the goals I've set myself to do this year (not as a new year
resolution though, I *really* want to accomplish this ;-) is to move
my blog from Wordpress to a statically built website. And
&lt;a href="http://docs.getpelican.com/en/3.5.0/"&gt;Pelican&lt;/a&gt; looks to be a good
solution to do so. It's based on â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the goals I've set myself to do this year (not as a new year
resolution though, I *really* want to accomplish this ;-) is to move
my blog from Wordpress to a statically built website. And
&lt;a href="http://docs.getpelican.com/en/3.5.0/"&gt;Pelican&lt;/a&gt; looks to be a good
solution to do so. It's based on Python, which is readily available and
supported on Gentoo, and is quite readable. Also, it looks to be very
active in development and support. And also: it supports taking data
from an existing Wordpress installation, so that none of the posts are
lost (with some rounding error that's inherit to such migrations of
course).&lt;/p&gt;
&lt;p&gt;Before getting Pelican ready (which is available through Gentoo btw) I
also needed to install &lt;a href="http://johnmacfarlane.net/pandoc/"&gt;pandoc&lt;/a&gt;, and
that became more troublesome than expected. While installing &lt;code&gt;pandoc&lt;/code&gt; I
got hit by its massive amount of dependencies towards &lt;code&gt;dev-haskell/*&lt;/code&gt;
packages, and many of those packages really failed to install. It does
some internal dependency checking and fails, informing me to run
&lt;code&gt;haskell-updater&lt;/code&gt;. Sadly, multiple re-runs of said command did not
resolve the issue. In fact, it wasn't until I hit a &lt;a href="http://forums.gentoo.org/viewtopic-p-7712250.html?sid=7707e62264dadf8bad4b8a1273b19f77"&gt;forum post about
the same
issue&lt;/a&gt;
that a first step to a working solution was found.&lt;/p&gt;
&lt;p&gt;It turns out that the &lt;code&gt;~arch&lt;/code&gt; versions of the haskell packages are
better working. So I enabled &lt;code&gt;dev-haskell/*&lt;/code&gt; in my
&lt;code&gt;package.accept_keywords&lt;/code&gt; file. And then started updating the
packages... which also failed. Then I ran &lt;code&gt;haskell-updater&lt;/code&gt; multiple
times, but that also failed. After a while, I had to run the following
set of commands (in random order) just to get everything to build fine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# emerge -u $(qlist -IC dev-haskell) --keep-going
~# for n in $(qlist -IC dev-haskell); do emerge -u $n; done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It took quite some reruns, but it finally got through. I never thought I
had this much Haskell-related packages installed on my system (89
packages here to be exact), as I never intended to do any Haskell
development since I left the university. Still, I finally got &lt;code&gt;pandoc&lt;/code&gt;
to work. So, on to the migration of my Wordpress site... I thought.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a good time to ask for stabilization requests (I'll look into
it myself as well of course) but also to see if you can help out our
arch testing teams to support the stabilization requests on Gentoo! We
need you!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I started with the &lt;a href="http://docs.getpelican.com/en/latest/importer.html"&gt;official docs on
importing&lt;/a&gt;. Looks
promising, but it didn't turn out too well for me. Importing was okay,
but then immediately building the site again resulted in issues about
wrong arguments (file names being interpreted as an argument name or
function when an underscore was used) and interpretation of code inside
the posts. Then I found Jason Antman's &lt;a href="http://blog.jasonantman.com/2014/02/converting-wordpress-posts-to-pelican-markdown/"&gt;converting wordpress posts to
pelican
markdown&lt;/a&gt;
post to inform me I had to try using markdown instead of restructured
text. And lo and behold - that's much better.&lt;/p&gt;
&lt;p&gt;The first builds look promising. Of all the posts that I made on
Wordpress, only one gives a build failure. The next thing to investigate
is theming, as well as seeing how good the migration goes (it isn't
because there are no errors otherwise that the migration is successful
of course) so that I know how much manual labor I have to take into
consideration when I finally switch (right now, I'm still running
Wordpress).&lt;/p&gt;</content><category term="Gentoo"></category><category term="blog"></category><category term="Gentoo"></category><category term="haskell"></category><category term="pandoc"></category><category term="pelican"></category><category term="wordpress"></category></entry><entry><title>Have dhcpcd wait before backgrounding</title><link href="http://blog.siphos.be/2015/02/have-dhcpcd-wait-before-backgrounding/" rel="alternate"></link><published>2015-02-08T16:50:00+01:00</published><updated>2015-02-08T16:50:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2015-02-08:/2015/02/have-dhcpcd-wait-before-backgrounding/</id><summary type="html">&lt;p&gt;Many of my systems use DHCP for obtaining IP addresses. Even though they
all receive a static IP address, it allows me to have them moved over
(migrations), use TFTP boot, cloning (in case of quick testing), etc.
But one of the things that was making my efforts somewhat more â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Many of my systems use DHCP for obtaining IP addresses. Even though they
all receive a static IP address, it allows me to have them moved over
(migrations), use TFTP boot, cloning (in case of quick testing), etc.
But one of the things that was making my efforts somewhat more difficult
was that the &lt;code&gt;dhcpcd&lt;/code&gt; service continued (the &lt;code&gt;dhcpcd&lt;/code&gt; daemon immediately
went in the background) even though no IP address was received yet.
Subsequent service scripts that required a working network connection
failed to start then.&lt;/p&gt;
&lt;p&gt;The solution is to configure &lt;code&gt;dhcpcd&lt;/code&gt; to wait for an IP address. This is
done through the &lt;code&gt;-w&lt;/code&gt; option, or the &lt;code&gt;waitip&lt;/code&gt; instruction in the
&lt;code&gt;dhcpcd.conf&lt;/code&gt; file. With that in place, the service script now waits
until an IP address is assigned.&lt;/p&gt;</content><category term="Gentoo"></category><category term="dhcp"></category><category term="dhcpcd"></category><category term="Gentoo"></category></entry><entry><title>Old Gentoo system? Not a problem...</title><link href="http://blog.siphos.be/2015/01/old-gentoo-system-not-a-problem/" rel="alternate"></link><published>2015-01-21T23:05:00+01:00</published><updated>2015-01-21T23:05:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2015-01-21:/2015/01/old-gentoo-system-not-a-problem/</id><summary type="html">&lt;p&gt;If you have a very old Gentoo system that you want to upgrade, you might
have some issues with too old software and Portage which can't just
upgrade to a recent state. Although many methods exist to work around
it, one that I have found to be very useful is â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you have a very old Gentoo system that you want to upgrade, you might
have some issues with too old software and Portage which can't just
upgrade to a recent state. Although many methods exist to work around
it, one that I have found to be very useful is to have access to old
Portage snapshots. It often allows the administrator to upgrade the
system in stages (say in 6-months blocks), perhaps not the entire world
but at least the system set.&lt;/p&gt;
&lt;p&gt;Finding old snapshots might be difficult though, so at one point I
decided to create &lt;a href="http://dev.gentoo.org/~swift/snapshots/"&gt;a list of old
snapshots&lt;/a&gt;, two months apart,
together with the GPG signature (so people can verify that the snapshot
was not tampered with by me in an attempt to create a Gentoo botnet). I
haven't needed it in a while anymore, but I still try to update the list
every two months, which I just did with the snapshot of January 20th
this year.&lt;/p&gt;
&lt;p&gt;I hope it at least helps a few other admins out there.&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="portage"></category><category term="snapshot"></category><category term="tree"></category></entry><entry><title>Gentoo Wiki is growing</title><link href="http://blog.siphos.be/2015/01/gentoo-wiki-is-growing/" rel="alternate"></link><published>2015-01-03T10:09:00+01:00</published><updated>2015-01-03T10:09:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2015-01-03:/2015/01/gentoo-wiki-is-growing/</id><summary type="html">&lt;p&gt;Perhaps it is because of the winter holidays, but the last weeks I've
noticed a lot of updates and edits on the Gentoo wiki.&lt;/p&gt;
&lt;p&gt;The move to the
&lt;a href="https://wiki.gentoo.org/wiki/Project:Website/Tyrian"&gt;Tyrian&lt;/a&gt; layout,
whose purpose is to eventually become the unified layout for all Gentoo
resources, happened first. Then, three common templates (&lt;code&gt;Code â€¦&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Perhaps it is because of the winter holidays, but the last weeks I've
noticed a lot of updates and edits on the Gentoo wiki.&lt;/p&gt;
&lt;p&gt;The move to the
&lt;a href="https://wiki.gentoo.org/wiki/Project:Website/Tyrian"&gt;Tyrian&lt;/a&gt; layout,
whose purpose is to eventually become the unified layout for all Gentoo
resources, happened first. Then, three common templates (&lt;code&gt;Code&lt;/code&gt;, &lt;code&gt;File&lt;/code&gt;
and &lt;code&gt;Kernel&lt;/code&gt;) where deprecated in favor of their "*Box" counterparts
(&lt;code&gt;CodeBox&lt;/code&gt;, &lt;code&gt;FileBox&lt;/code&gt; and &lt;code&gt;KernelBox&lt;/code&gt;). These provide better parameter
support (which should make future updates on the templates easier to
implement) as well as syntax highlighting.&lt;/p&gt;
&lt;p&gt;But the wiki also saw a number of contributions being added. I added a
short article on &lt;a href="https://wiki.gentoo.org/wiki/Efibootmgr"&gt;Efibootmgr&lt;/a&gt;
as the &lt;a href="https://wiki.gentoo.org/wiki/Handbook:Main_Page"&gt;Gentoo
handbook&lt;/a&gt; now also uses
it for its EFI related instructions, but other users added quite a few
additional articles as well. As they come along, articles are being
marked by editors for translation. For me, that's a trigger.&lt;/p&gt;
&lt;p&gt;Whenever a wiki article is marked for translations, it shows up on the
&lt;a href="https://wiki.gentoo.org/wiki/Special:PageTranslation"&gt;PageTranslation&lt;/a&gt;
list. When I have time, I pick one of these articles and try to update
it to move to a common style (the
&lt;a href="https://wiki.gentoo.org/wiki/Gentoo_Wiki:Guidelines"&gt;Guidelines&lt;/a&gt; page
is the "official" one, and I have a
&lt;a href="https://wiki.gentoo.org/wiki/User:SwifT/Styleguide"&gt;Styleguide&lt;/a&gt; in
which I elaborate a bit more on the use). Having a common style gives a
better look and feel to the articles (as they are then more alike),
gives a common documentation development approach (so everyone can join
in and update documentation in a similar layout/structure) and - most
importantly - reduces the number of edits that do little more than
switch from one formatting to another.&lt;/p&gt;
&lt;p&gt;When an article has been edited, I mark it for translation, and then the
real workhorse on the wiki starts. We have several active translators on
the Gentoo wiki, who we cannot thank hard enough for their work (I used
to start at Gentoo as a translator, I have some feeling about their
work). They make the Gentoo documentation reachable for a broader
audience. Thanks to the use of the translation extension (kindly offered
by the Gentoo wiki admins, who have been working quite hard the last few
weeks on improving the wiki infrastructure) translations are easier to
handle and follow through.&lt;/p&gt;
&lt;p&gt;The advantage of a translation-marked article is that any change on the
article also shows up on the list again, allowing me to look at the
change and perform edits when necessary. For the end user, this is
behind the scenes - an update on an article shows up immediately, which
is fine. But for me (and perhaps other editors as well) this gives a
nice overview of changes to articles (watchlists can only go so far) and
also shows the changes in a simple yet efficient manner. Thanks to this
approach, we can more actively follow up on edits and improve where
necessary.&lt;/p&gt;
&lt;p&gt;Now, editing is not always just a few minutes of work. Consider the
&lt;a href="https://wiki.gentoo.org/wiki/GRUB2"&gt;GRUB2&lt;/a&gt; article on the wiki. It was
marked for translation, but had some issues with its style. It was very
verbose (which is not a bad thing, but suggests to split information
towards multiple articles) and quite a few open discussions on its
&lt;a href="https://wiki.gentoo.org/wiki/Talk:GRUB2"&gt;Discussions&lt;/a&gt; page. I started
editing the article around 13.12h local time, and ended at 19.40h.
Unlike with offline documentation, the entire process of the editing can
be followed through the page'
&lt;a href="https://wiki.gentoo.org/index.php?title=GRUB2&amp;amp;offset=&amp;amp;limit=100&amp;amp;action=history"&gt;history&lt;/a&gt;).
And although I'm still not 100% satisfied with the result, it is imo
easier to follow through and read.&lt;/p&gt;
&lt;p&gt;However, don't get me wrong - I do not feel that the article was wrong
in any way. Although I would appreciate articles that immediately follow
a style, I rather see more contributions (which we can then edit towards
the new style) than that we would start penalizing contributors that
don't use the style. That would work contra-productive, because it is
far easier to update the style of an article than to write articles. We
should try and get more contributors to document aspects of their Gentoo
journey.&lt;/p&gt;
&lt;p&gt;So, please keep them coming. If you find a lack of (good) information
for something, start jotting down what you know in an article. We'll
gladly help you out with editing and improving the article then, but the
content is something you are probably best to write down.&lt;/p&gt;</content><category term="Documentation"></category><category term="documentation"></category><category term="Gentoo"></category><category term="wiki"></category></entry><entry><title>Added UEFI instructions to AMD64/x86 handbooks</title><link href="http://blog.siphos.be/2014/12/added-uefi-instructions-to-amd64x86-handbooks/" rel="alternate"></link><published>2014-12-23T18:08:00+01:00</published><updated>2014-12-23T18:08:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-12-23:/2014/12/added-uefi-instructions-to-amd64x86-handbooks/</id><summary type="html">&lt;p&gt;I just finished up adding some UEFI instructions to the &lt;a href="https://wiki.gentoo.org/wiki/Handbook:Main_Page"&gt;Gentoo
handbooks&lt;/a&gt; for AMD64
and x86 (I don't know how many systems are still using x86 instead of
the AMD64 one, and if those support UEFI, but the instructions are
shared and they don't collide). The entire EFI stuff can â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I just finished up adding some UEFI instructions to the &lt;a href="https://wiki.gentoo.org/wiki/Handbook:Main_Page"&gt;Gentoo
handbooks&lt;/a&gt; for AMD64
and x86 (I don't know how many systems are still using x86 instead of
the AMD64 one, and if those support UEFI, but the instructions are
shared and they don't collide). The entire EFI stuff can probably be
improved a lot, but basically the things that were added are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;boot the system using UEFI already if possible (which is needed for
    efibootmgr to access the EFI variables). This is not entirely
    mandatory (as efibootmgr is not mandatory to boot a system)
    but recommended.&lt;/li&gt;
&lt;li&gt;use vfat for the &lt;code&gt;/boot/&lt;/code&gt; location, as this now becomes the EFI
    System Partition.&lt;/li&gt;
&lt;li&gt;configure the Linux kernel to support EFI stub and EFI variables&lt;/li&gt;
&lt;li&gt;install the Linux kernel as the &lt;code&gt;bootx64.efi&lt;/code&gt; file to boot the
    system with&lt;/li&gt;
&lt;li&gt;use efibootmgr to add boot options (if required) and create an EFI
    boot entry called "Gentoo"&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you find grave errors, please do mention them (either on a talk page
on the wiki, as a &lt;a href="https://bugs.gentoo.org"&gt;bug&lt;/a&gt; or through IRC) so it
is picked up. All developers and trusted contributors on the wiki have
access to the files so can edit where needed (but do take care that, if
something is edited, that it is either architecture-specific or shared
across all architectures - check the page when editing; if it is
&lt;em&gt;Handbook:Parts&lt;/em&gt; then it is shared, and &lt;em&gt;Handbook:AMD64&lt;/em&gt; is specific for
the architecture). And if I'm online I'll of course act on it quickly.&lt;/p&gt;
&lt;p&gt;Oh, and no - it is not a bug that there is a (now not used) &lt;code&gt;/dev/sda1&lt;/code&gt;
"bios" partition. Due to the differences with the possible installation
alternatives, it is easier for us (me) to just document a common
partition layout than to try and write everything out (making it just
harder for new users to follow the instructions).&lt;/p&gt;</content><category term="Documentation"></category><category term="efi"></category><category term="Gentoo"></category><category term="handbook"></category><category term="uefi"></category></entry><entry><title>Handbooks moved</title><link href="http://blog.siphos.be/2014/12/handbooks-moved/" rel="alternate"></link><published>2014-12-14T14:42:00+01:00</published><updated>2014-12-14T14:42:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-12-14:/2014/12/handbooks-moved/</id><summary type="html">&lt;p&gt;Yesterday the move of the &lt;a href="https://wiki.gentoo.org/wiki/Handbook:Main_Page"&gt;Gentoo
Wiki&lt;/a&gt; for the Gentoo
handbooks (whose most important part are the installation instructions
for the various supported architectures) has been concluded, with a
last-minute addition being the &lt;a href="https://wiki.gentoo.org/wiki/Handbook:Main_Page#Viewing_the_handbook"&gt;one-page
views&lt;/a&gt;
so that users who want to can view the installation instructions
completely within one view â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yesterday the move of the &lt;a href="https://wiki.gentoo.org/wiki/Handbook:Main_Page"&gt;Gentoo
Wiki&lt;/a&gt; for the Gentoo
handbooks (whose most important part are the installation instructions
for the various supported architectures) has been concluded, with a
last-minute addition being the &lt;a href="https://wiki.gentoo.org/wiki/Handbook:Main_Page#Viewing_the_handbook"&gt;one-page
views&lt;/a&gt;
so that users who want to can view the installation instructions
completely within one view.&lt;/p&gt;
&lt;p&gt;Because we use lots of
&lt;a href="http://www.mediawiki.org/wiki/Transclusion"&gt;transclusions&lt;/a&gt; (i.e.
including different wiki articles inside another article) to support a
common documentation base for the various architectures, I did hit a
limit that prevented me from creating a single-page for the entire
handbook (i.e. "Installing Gentoo Linux", "Working with Gentoo",
"Working with portage" and "Network configuration" together), but I
could settle with one page per part. I think that matches most of the
use cases.&lt;/p&gt;
&lt;p&gt;With the move now done, it is time to start tackling the various bugs
that were reported against the handbook, as well as initiate
improvements where needed.&lt;/p&gt;
&lt;p&gt;I did make a (probably more - but this one is fresh in my memory)
mistake in the move though. I had to do a lot of the following:&lt;/p&gt;
&lt;p&gt;``` {lang="xml"}&lt;/p&gt;
&lt;p&gt;...
```&lt;/p&gt;
&lt;p&gt;Without this, transcluded parts would suddenly show the translation tags
as regular text. Only afterwards (I'm talking about more than &lt;a href="https://wiki.gentoo.org/wiki/Project:Documentation/HandbookDevelopment"&gt;400
different
pages&lt;/a&gt;)
did I read that I should transclude the &lt;code&gt;/en&lt;/code&gt; pages (like
&lt;code&gt;Handbook:Parts/Installation/About/en&lt;/code&gt; instead of
&lt;code&gt;Handbook:Parts/Installation/About&lt;/code&gt;) as those do not have the
translation specifics in them. Sigh.&lt;/p&gt;</content><category term="Documentation"></category><category term="Gentoo"></category><category term="handbook"></category><category term="wiki"></category></entry><entry><title>Gentoo Handbooks almost moved to wiki</title><link href="http://blog.siphos.be/2014/12/gentoo-handbooks-almost-moved-to-wiki/" rel="alternate"></link><published>2014-12-12T17:35:00+01:00</published><updated>2014-12-12T17:35:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-12-12:/2014/12/gentoo-handbooks-almost-moved-to-wiki/</id><summary type="html">&lt;p&gt;Content-wise, the move is done. I've done a few checks on the content to
see if the structure still holds, translations are enabled on all pages,
the use of partitions is sufficiently consistent for each architecture,
and so on. The result can be seen on &lt;a href="https://wiki.gentoo.org/wiki/Handbook:Main_Page"&gt;the gentoo handbook main
page â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Content-wise, the move is done. I've done a few checks on the content to
see if the structure still holds, translations are enabled on all pages,
the use of partitions is sufficiently consistent for each architecture,
and so on. The result can be seen on &lt;a href="https://wiki.gentoo.org/wiki/Handbook:Main_Page"&gt;the gentoo handbook main
page&lt;/a&gt;, from which the
various architectural handbooks are linked.&lt;/p&gt;
&lt;p&gt;I sent a &lt;a href="http://thread.gmane.org/gmane.linux.gentoo.project/4141"&gt;sort-of
announcement&lt;/a&gt;
to the gentoo-project mailinglist (which also includes the motivation of
the move). If there are no objections, I will update the current
handbooks to link to the wiki ones, as well as update the links on the
website (and in wiki articles) to point to the wiki.&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="handbook"></category><category term="wiki"></category></entry><entry><title>Sometimes I forget how important communication is</title><link href="http://blog.siphos.be/2014/12/sometimes-i-forget-how-important-communication-is/" rel="alternate"></link><published>2014-12-10T20:38:00+01:00</published><updated>2014-12-10T20:38:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-12-10:/2014/12/sometimes-i-forget-how-important-communication-is/</id><summary type="html">&lt;p&gt;Free software (and documentation) developers don't always have all the
time they want. Instead, they grab whatever time they have to do what
they believe is the most productive - be it documentation editing,
programming, updating ebuilds, SELinux policy improvements and what not.
But they often don't take the time to â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Free software (and documentation) developers don't always have all the
time they want. Instead, they grab whatever time they have to do what
they believe is the most productive - be it documentation editing,
programming, updating ebuilds, SELinux policy improvements and what not.
But they often don't take the time to communicate. And communication is
important.&lt;/p&gt;
&lt;p&gt;For one, communication is needed to reach a larger audience than those
that follow the commit history in whatever repository work is being
done. Yes, there are developers that follow &lt;a href="http://news.gmane.org/gmane.linux.gentoo.cvs"&gt;each
commit&lt;/a&gt;, but development
isn't just done for developers, it is also for end users. And end users
deserve frequent updates and feedback. Be it through blog posts, Google+
posts, tweets or instragrams (well, I'm not sure how to communicate a
software or documentation change through Instagram, but I'm sure people
find lots of creative ways to do so), telling the broader world what has
changed is important.&lt;/p&gt;
&lt;p&gt;Perhaps a (silent or not) user was waiting for this change. Perhaps he
or she is even actually trying to fix things himself/herself but is
struggling with it, and would really benefit (time-wise) from a quick
fix. Without communicating about the change, (s)he does not know that no
further attempts are needed, actually reducing the efficiency in
overall.&lt;/p&gt;
&lt;p&gt;But communication is just one-way. Better is to get feedback as well. In
that sense, communication is just one part of the feedback loop - once
developers receive feedback on what they are doing (or did recently)
they might even improve results faster. With feedback loops, the wisdom
of the crowd (in the positive sense) can be used to improve solutions
beyond what the developer originally intended. And even a simple "cool"
and "I like" is good information for a developer or contributor.&lt;/p&gt;
&lt;p&gt;Still, I often forget to do it - or don't have the time to focus on
communication. And that's bad. So, let me quickly state what things I
forgot to communicate more broadly about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href="http://comments.gmane.org/gmane.linux.gentoo.project/4129"&gt;new
    developer&lt;/a&gt;
    joined the Gentoo ranks: Jason Zaman. Now developers join Gentoo
    more often than just once in a while, but Jason is one of
    my "recruits". In a sense, he became a developer because I was tired
    of pulling his changes in and proxy-committing stuff. Of course,
    that's only half the truth; he is also a very active contributor in
    other areas (and was already a maintainer for a few packages through
    the proxy-maintainer project) and is a tremendous help in the Gentoo
    Hardened project. So welcome onboard Jason (or perfinion as he calls
    himself online).&lt;/li&gt;
&lt;li&gt;I've started with &lt;a href="https://wiki.gentoo.org/wiki/Project:Documentation/HandbookDevelopment"&gt;copying the Gentoo handbook to the
    wiki&lt;/a&gt;.
    This is still an on-going project, but was long overdue. There are
    many reasons why the move to the wiki is interesting. For me
    personally, it is to attract a larger audience to update
    the handbook. Although the document will be restricted for editing
    by developers and trusted contributors only (it does contain the
    installation instructions and is a primary entry point for
    many users) that's still a whole lot more than when just a handful
    (one or two actually) developers update the handbook.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/SELinuxProject/selinux/wiki/Releases"&gt;SELinux
    userspace&lt;/a&gt;
    (2.4 release) is looking more stable; there are no specific
    regressions anymore (upstream is at release candidate 7) although I
    must admit that I have not implemented it on the majority of test
    systems that I maintain. Not due to fears, but mostly because I
    struggle a bit with available time so I can do without testing
    upgrades that are not needed. I do plan on moving towards 2.4 in a
    week or two.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/TresysTechnology/refpolicy/wiki"&gt;reference
    policy&lt;/a&gt; has
    released a new version of the policy. Gentoo quickly followed
    through (Jason did the honors of creating the ebuilds).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, apologies for not communicating sooner, and I promise I'll try to
uplift the communication frequency.&lt;/p&gt;</content><category term="Gentoo"></category><category term="communication"></category><category term="developer"></category><category term="Gentoo"></category><category term="selinux"></category><category term="time"></category></entry><entry><title>No more DEPENDs for SELinux policy package dependencies</title><link href="http://blog.siphos.be/2014/11/no-more-depends-for-selinux-policy-package-dependencies/" rel="alternate"></link><published>2014-11-02T14:51:00+01:00</published><updated>2014-11-02T14:51:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-11-02:/2014/11/no-more-depends-for-selinux-policy-package-dependencies/</id><summary type="html">&lt;p&gt;I just finished updating 102 packages. The change? Removing the
following from the ebuilds:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;DEPEND=&amp;quot;selinux? ( sec-policy/selinux-${packagename} )&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the past, we needed this construction in both DEPEND and RDEPEND.
Recently however, the SELinux eclass got updated with some logic to
relabel files after the policy package is deployed â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I just finished updating 102 packages. The change? Removing the
following from the ebuilds:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;DEPEND=&amp;quot;selinux? ( sec-policy/selinux-${packagename} )&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the past, we needed this construction in both DEPEND and RDEPEND.
Recently however, the SELinux eclass got updated with some logic to
relabel files after the policy package is deployed. As a result, the
DEPEND variable no longer needs to refer to the SELinux policy package.&lt;/p&gt;
&lt;p&gt;This change also means that for those moving from a regular Gentoo
installation to an SELinux installation will have much less packages to
rebuild. In the past, getting &lt;code&gt;USE="selinux"&lt;/code&gt; (through the SELinux
profiles) would rebuild all packages that have a DEPEND dependency to
the SELinux policy package. No more - only packages that depend on the
SELinux libraries (like &lt;code&gt;libselinux&lt;/code&gt;) or utilities rebuild. The rest
will just pull in the proper policy package.&lt;/p&gt;</content><category term="Gentoo"></category><category term="DEPEND"></category><category term="ebuild"></category><category term="Gentoo"></category><category term="RDEPEND"></category><category term="selinux"></category></entry><entry><title>Migrating to SELinux userspace 2.4 (small warning for users)</title><link href="http://blog.siphos.be/2014/10/migrating-to-selinux-userspace-2-4-small-warning-for-users/" rel="alternate"></link><published>2014-10-30T19:44:00+01:00</published><updated>2014-10-30T19:44:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-10-30:/2014/10/migrating-to-selinux-userspace-2-4-small-warning-for-users/</id><summary type="html">&lt;p&gt;In a few moments, SELinux users which have the \~arch KEYWORDS set
(either globally or for the SELinux utilities in particular) will notice
that the SELinux userspace will upgrade to version 2.4 (release
candidate 5 for now). This upgrade comes with a manual step that needs
to be performed â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In a few moments, SELinux users which have the \~arch KEYWORDS set
(either globally or for the SELinux utilities in particular) will notice
that the SELinux userspace will upgrade to version 2.4 (release
candidate 5 for now). This upgrade comes with a manual step that needs
to be performed after upgrade. The information is mentioned as
post-installation message of the &lt;code&gt;policycoreutils&lt;/code&gt; package, and
basically sais that you need to execute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# /usr/libexec/selinux/semanage_migrate_store
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The reason is that the SELinux utilities expect the SELinux policy
module store (and the semanage related files) to be in
&lt;code&gt;/var/lib/selinux&lt;/code&gt; and no longer in &lt;code&gt;/etc/selinux&lt;/code&gt;. Note that this does
not mean that the SELinux policy itself is moved outside of that
location, nor is the basic configuration file (&lt;code&gt;/etc/selinux/config&lt;/code&gt;).
It is what tools such as &lt;strong&gt;semanage&lt;/strong&gt; manage that is moved outside that
location.&lt;/p&gt;
&lt;p&gt;I tried to automate the migration as part of the packages themselves,
but this would require the &lt;code&gt;portage_t&lt;/code&gt; domain to be able to move,
rebuild and load policies, which it can't (and to be honest, shouldn't).
Instead of augmenting the policy or making updates to the migration
script as delivered by the upstream project, we currently decided to
have the migration done manually. It is a one-time migration anyway.&lt;/p&gt;
&lt;p&gt;If for some reason end users forget to do the migration, then that does
not mean that the system breaks or becomes unusable. SELinux still
works, SELinux aware applications still work; the only thing that will
fail are updates on the SELinux configuration through tools like
&lt;strong&gt;semanage&lt;/strong&gt; or &lt;strong&gt;setsebool&lt;/strong&gt; - the latter when you want to persist
boolean changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# semanage fcontext -l
ValueError: SELinux policy is not managed or store cannot be accessed.

~# setsebool -P allow_ptrace on
Cannot set persistent booleans without managed policy.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you get those errors or warnings, all that is left to do is to do the
migration. Note in the following that there is a warning about 'else'
blocks that are no longer supported: that's okay, as far as I know (and
it was mentioned on the upstream mailinglist as well as not something to
worry about) it does not have any impact.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# /usr/libexec/selinux/semanage_migrate_store
Migrating from /etc/selinux/mcs/modules/active to /var/lib/selinux/mcs/active
Attempting to rebuild policy from /var/lib/selinux
sysnetwork: Warning: &amp;#39;else&amp;#39; blocks in optional statements are unsupported in CIL. Dropping from output.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also add in &lt;code&gt;-c&lt;/code&gt; so that the old policy module store is cleaned
up. You can also rerun the command multiple times:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# /usr/libexec/selinux/semanage_migrate_store -c
warning: Policy type mcs has already been migrated, but modules still exist in the old store. Skipping store.
Attempting to rebuild policy from /var/lib/selinux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can manually clean up the old policy module store like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# rm -rf /etc/selinux/mcs/modules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So... don't worry - the change is small and does not break stuff. And
for those wondering about CIL I'll talk about it in one of my next
posts.&lt;/p&gt;</content><category term="Gentoo"></category><category term="cil"></category><category term="Gentoo"></category><category term="migrate"></category><category term="selinux"></category><category term="semanage"></category><category term="upgrade"></category><category term="userspace"></category></entry><entry><title>Gentoo Hardened august meeting</title><link href="http://blog.siphos.be/2014/08/gentoo-hardened-august-meeting/" rel="alternate"></link><published>2014-08-29T16:43:00+02:00</published><updated>2014-08-29T16:43:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-08-29:/2014/08/gentoo-hardened-august-meeting/</id><summary type="html">&lt;p&gt;Another month has passed, so we had another online meeting to discuss
the progress within Gentoo Hardened.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Lead elections&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The yearly lead elections within Gentoo Hardened were up again. Zorry
(Magnus Granberg) was re-elected as project lead so doesn't need to
update his LinkedIn profile yet ;-)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;blueness (Anthony G â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Another month has passed, so we had another online meeting to discuss
the progress within Gentoo Hardened.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Lead elections&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The yearly lead elections within Gentoo Hardened were up again. Zorry
(Magnus Granberg) was re-elected as project lead so doesn't need to
update his LinkedIn profile yet ;-)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;blueness (Anthony G. Basile) has been working on the uclibc stages for
some time. Due to the configurable nature of these setups, many
&lt;code&gt;/etc/portage&lt;/code&gt; files were provided as part of the stages, which
&lt;a href="https://bugs.gentoo.org/show_bug.cgi?id=519686"&gt;shouldn't&lt;/a&gt; happen. Work
is on the way to update this accordingly.&lt;/p&gt;
&lt;p&gt;For the musl setup, blueness is also rebuilding the stages to use a
symbolic link to the dynamic linker (&lt;code&gt;/lib/ld-linux-arch.so&lt;/code&gt;) as
recommended by the musl maintainers.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Kernel and grsecurity with PaX&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A &lt;a href="https://bugs.gentoo.org/show_bug.cgi?id=520198"&gt;bug&lt;/a&gt; has been
submitted which shows that large binary files (in the bug, a chrome
binary with debug information is shown to be more than 2 Gb in size)
cannot be pax-mark'ed, with &lt;code&gt;paxctl&lt;/code&gt; informing the user that the file is
too big. The problem is when the PAX marks are in ELF (as the
application mmaps the binary) - users of extended attributes based PaX
markings do not have this problem. blueness is working on making things
a bit more intelligent, and to fix this.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SELinux&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I have been making a few changes to the SELinux setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The live ebuilds (those with version 9999 which use the repository
    policy rather than snapshots of the policies) are now being used as
    "master" in case of releases: the ebuilds can just be copied to the
    right version to support the releases. The release script inside the
    repository is adjusted to reflect this as well.&lt;/li&gt;
&lt;li&gt;The SELinux eclass now supports two variables, &lt;code&gt;SELINUX_GIT_REPO&lt;/code&gt;
    and &lt;code&gt;SELINUX_GIT_BRANCH&lt;/code&gt;, which allows users to use their own
    repository, and developers to work in specific branches together. By
    setting the right value in the users' &lt;code&gt;make.conf&lt;/code&gt; switching policy
    repositories or branches is now a breeze.&lt;/li&gt;
&lt;li&gt;Another change in the SELinux eclass is that, after the installation
    of SELinux policies, we will check the reverse dependencies of the
    policy package and relabel the files of these packages. This allows
    us to only have &lt;code&gt;RDEPEND&lt;/code&gt; dependencies towards the SELinux policy
    packages (if the application itself does not otherwise link with
    &lt;em&gt;libselinux&lt;/em&gt;), making the dependency tree within the package manager
    more correct. We still need to update these packages to drop the
    &lt;code&gt;DEPEND&lt;/code&gt; dependency, which is something we will focus on in the next
    few months.&lt;/li&gt;
&lt;li&gt;In order to support improved cooperation between SELinux developers
    in the Gentoo Hardened team - perfinion (Jason Zaman) is in the
    queue for becoming a new developer in our mids - a &lt;a href="https://wiki.gentoo.org/wiki/Project:SELinux/CodingStyle"&gt;coding style for
    SELinux
    policies&lt;/a&gt;
    is being drafted up. This is of course based on the coding style of
    the reference policy, but with some Gentoo specific improvements and
    more clarifications.&lt;/li&gt;
&lt;li&gt;perfinion has been working on improving the SELinux support in
    OpenRC (release 0.13 and higher), making some of the additions that
    we had to make in the past - such as the &lt;code&gt;selinux_gentoo&lt;/code&gt; init
    script - obsolete.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The meeting also discussed a few bugs in more detail, but if you really
want to know, just hang on and wait for the IRC logs ;-) Other usual
sections (system integrity and profiles) did not have any notable topics
to describe.&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="hardened"></category><category term="irc"></category><category term="meeting"></category></entry><entry><title>Switching to new laptop</title><link href="http://blog.siphos.be/2014/08/switching-to-new-laptop/" rel="alternate"></link><published>2014-08-19T22:11:00+02:00</published><updated>2014-08-19T22:11:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-08-19:/2014/08/switching-to-new-laptop/</id><summary type="html">&lt;p&gt;I'm slowly but surely starting to switch to a new laptop. The old one
hasn't completely died (yet) but given that I had to force its CPU
frequency at the lowest Hz or the CPU would burn (and the system
suddenly shut down due to heat issues), and that the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm slowly but surely starting to switch to a new laptop. The old one
hasn't completely died (yet) but given that I had to force its CPU
frequency at the lowest Hz or the CPU would burn (and the system
suddenly shut down due to heat issues), and that the connection between
the battery and laptop fails (so even new battery didn't help out) so I
couldn't use it as a laptop... well, let's say the new laptop is welcome
;-)&lt;/p&gt;
&lt;p&gt;Building Gentoo isn't an issue (having only a few hours per day to work
on it is) and while I'm at it, I'm also experimenting with EFI
(currently still without secure boot, but with EFI) and such.
Considering that the Gentoo Handbook needs quite a few updates (and I'm
thinking to do more than just small updates) knowing how EFI works is a
Good Thing (tm).&lt;/p&gt;
&lt;p&gt;For those interested - the &lt;a href="https://wiki.gentoo.org/wiki/EFI_stub_kernel"&gt;EFI stub
kernel&lt;/a&gt; instructions in
the article on the wiki, and also in Greg's wonderful post on &lt;a href="http://kroah.com/log/blog/2013/09/02/booting-a-self-signed-linux-kernel/"&gt;booting a
self-signed Linux
kernel&lt;/a&gt;
(which I will do later) work pretty well. I didn't try out the "Adding
more kernels" section in it, as I need to be able to (sometimes) edit
the boot options (which isn't easy to accomplish with EFI
stub-supporting kernels afaics). So I installed
&lt;a href="https://wiki.gentoo.org/wiki/Gummiboot"&gt;Gummiboot&lt;/a&gt; (and created a wiki
article on it).&lt;/p&gt;
&lt;p&gt;Lots of things still planned, so little time. But at least building
chromium is now a bit faster - instead of 5 hours and 16 minutes, I can
now enjoy the newer versions after little less than 40 minutes.&lt;/p&gt;</content><category term="Gentoo"></category><category term="efi"></category><category term="Gentoo"></category><category term="laptop"></category></entry><entry><title>Some changes under the hood</title><link href="http://blog.siphos.be/2014/08/some-changes-under-the-hood/" rel="alternate"></link><published>2014-08-09T21:45:00+02:00</published><updated>2014-08-09T21:45:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-08-09:/2014/08/some-changes-under-the-hood/</id><summary type="html">&lt;p&gt;In between conferences, technical writing jobs and traveling, we did a
few changes under the hood for SELinux in Gentoo.&lt;/p&gt;
&lt;p&gt;First of all, new policies are bumped and also stabilized (2.20130411-r3
is now stable, 2.20130411-r5 is \~arch). These have a few updates
(mergers from upstream), and r5 also â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In between conferences, technical writing jobs and traveling, we did a
few changes under the hood for SELinux in Gentoo.&lt;/p&gt;
&lt;p&gt;First of all, new policies are bumped and also stabilized (2.20130411-r3
is now stable, 2.20130411-r5 is \~arch). These have a few updates
(mergers from upstream), and r5 also has preliminary support for
&lt;a href="http://www.freedesktop.org/software/systemd/man/tmpfiles.d.html"&gt;tmpfiles&lt;/a&gt;
(at least the OpenRC implementation of it), which is made part of the
&lt;a href="http://packages.gentoo.org/package/sec-policy/selinux-base-policy"&gt;selinux-base-policy&lt;/a&gt;
package.&lt;/p&gt;
&lt;p&gt;The ebuilds to support new policy releases now are relatively simple
copies of the live ebuilds (which always contain the latest policies) so
that bumping (either by me or other developers) is easy enough. There's
also a release script in our policy repository which tags the right git
commit (the point at which the release is made), creates the necessary
patches, uploads them, etc.&lt;/p&gt;
&lt;p&gt;One of the changes made is to "drop" the &lt;code&gt;BASEPOL&lt;/code&gt; variable. In the
past, &lt;code&gt;BASEPOL&lt;/code&gt; was a variable inside the ebuilds that pointed to the
right patchset (and base policy) as we initially supported policy
modules of different base releases. However, that was a mistake and we
quickly moved to bumping all policies with every releaes, but kept the
&lt;code&gt;BASEPOL&lt;/code&gt; variable in it. Now, &lt;code&gt;BASEPOL&lt;/code&gt; is "just" the &lt;code&gt;${PVR}&lt;/code&gt; value of
the ebuild so no longer needs to be provided. In the future, I'll
probably remove &lt;code&gt;BASEPOL&lt;/code&gt; from the internal eclass and the
&lt;code&gt;selinux-base*&lt;/code&gt; packages as well.&lt;/p&gt;
&lt;p&gt;A more important change to the eclass is support for the
&lt;code&gt;SELINUX_GIT_REPO&lt;/code&gt; and &lt;code&gt;SELINUX_GIT_BRANCH&lt;/code&gt; variables (for live ebuilds,
i.e. those with the 9999 version). If set, then they pull from the
mentioned repository (and branch) instead of the default
&lt;a href="http://git.overlays.gentoo.org/gitweb/?p=proj/hardened-refpolicy.git;a=summary"&gt;hardened-refpolicy.git&lt;/a&gt;
repository. This allows for developers to do some testing on a different
branch easily, or for other users to use their own policy repository
while still enjoying the SELinux integration support in Gentoo through
the &lt;code&gt;sec-policy/*&lt;/code&gt; packages.&lt;/p&gt;
&lt;p&gt;Finally, I wrote up a first attempt at our &lt;a href="https://wiki.gentoo.org/wiki/Project:SELinux/CodingStyle"&gt;coding
style&lt;/a&gt;,
heavily based on the coding style from the reference policy of course
(as our policy is still following this upstream project). This should
allow the team to work better together and to decide on namings
autonomously (instead of hours of discussing and settling for something
as silly as an interface or boolean name ;-)&lt;/p&gt;</content><category term="Gentoo"></category><category term="eclass"></category><category term="Gentoo"></category><category term="git"></category><category term="hardened"></category><category term="refpolicy"></category><category term="selinux"></category></entry><entry><title>Gentoo Hardened July meeting</title><link href="http://blog.siphos.be/2014/08/gentoo-hardened-july-meeting/" rel="alternate"></link><published>2014-08-01T21:48:00+02:00</published><updated>2014-08-01T21:48:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-08-01:/2014/08/gentoo-hardened-july-meeting/</id><summary type="html">&lt;p&gt;I failed to show up myself (I fell asleep - kids are fun, but deplete
your energy source quickly), but that shouldn't prevent me from making a
nice write-up of the meeting.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GCC 4.9 gives some issues with kernel compilations and other components.
Lately, breakage has been reported with â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I failed to show up myself (I fell asleep - kids are fun, but deplete
your energy source quickly), but that shouldn't prevent me from making a
nice write-up of the meeting.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GCC 4.9 gives some issues with kernel compilations and other components.
Lately, breakage has been reported with GCC 4.9.1 compiling MySQL or
with debugging symbols. So for hardened, we'll wait this one out until
the bugs are fixed.&lt;/p&gt;
&lt;p&gt;For GCC 4.10, the
&lt;a href="https://gcc.gnu.org/ml/gcc-patches/2014-07/msg02231.html"&gt;--enable-default-pie&lt;/a&gt;
patch has been sent upstream. If that is accepted, the SSP one will be
sent as well.&lt;/p&gt;
&lt;p&gt;In uclibc land, stages are being developed for PPC. This is the final
architecture that is often used in embedded worlds that needed support
for it in Gentoo, and that's now being finalized. Go blueness!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SELinux&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;libpcre&lt;/code&gt; upgrade broke relabeling operations on SELinux enabled
systems. A fix for this has been made part of libselinux, but a little
too late, so some users will be affected by the problem. It's easily
worked around (removing the &lt;code&gt;*.bin&lt;/code&gt; files in the &lt;code&gt;contexts/files/&lt;/code&gt;
directory of the SELinux configuration) and hopefully will never occur
again.&lt;/p&gt;
&lt;p&gt;The 2.3 userland has finally been stabilized (we had a few dependencies
that we were waiting for - and we were a dependency ourselves for other
packages as well).&lt;/p&gt;
&lt;p&gt;Finally, some &lt;a href="http://article.gmane.org/gmane.linux.gentoo.hardened/6266"&gt;thought
discussion&lt;/a&gt;
is being done (not that there's much feedback on it, but every
documented step is a good step imo) on the SELinux policy within Gentoo
(and the principles that we'll follow that are behind it).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Kernel and grsecurity / PaX&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Due to some security issues, the Linux kernel sources have been
stabilized more rapidly than usual, which left little time for broad
validation and regression testing. Updates and fixes have been applied
since and new stabilizations occurred. Hopefully we're now at the right,
stable set again.&lt;/p&gt;
&lt;p&gt;The C-based &lt;code&gt;install-xattr&lt;/code&gt; application (which is performance-wise a big
improvement over the Python-based one) is working well in "lab
environments" (some developers are using it exclusively). It is included
in the Portage repository
^(if\ I\ understand\ the\ chat\ excerpts\ correctly)^ but as such
not available for broader usage yet.&lt;/p&gt;
&lt;p&gt;An update against &lt;code&gt;elfix&lt;/code&gt; is made as well as there was a dependency
mismatch when building with &lt;code&gt;USE=-ptpax&lt;/code&gt;. This will be corrected in
elfix-0.9.&lt;/p&gt;
&lt;p&gt;Finally, blueness is also working on a GLEP (Gentoo Linux Enhancement
Proposal) to export VDB information (especially &lt;code&gt;NEEDED.ELF.2&lt;/code&gt;) as this
is important for ELF/library graph information (as used by revdep-pax,
migrate-pax, etc.). Although Portage already does this, this is not part
of the PMS and as such other package managers might not do this (such as
Paludis).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Profiles&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Updates on the profiles has been made to properly include multilib
related variables and other metadata. For some profiles, this went as
easy as expected (nice stacking), but other profiles have inheritance
troubles making it much harder to include the necessary information.
Although some talks have arised on the gentoo-dev mailinglist about
refactoring how Gentoo handles profiles, there hasn't been done much
more than just talking :-( But I'm sure we haven't heard the last of
this yet.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Documentation&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Blueness has added information on &lt;code&gt;EMULTRAMP&lt;/code&gt; in the kernel
configuration, especially noting to the user that it is needed for
Python support in Gentoo Hardened. It is also in the &lt;a href="https://wiki.gentoo.org/wiki/Hardened/PaX_Quickstart"&gt;PaX
Quickstart&lt;/a&gt;
document, although this document is becoming a very large one and users
might overlook it.&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="hardened"></category><category term="irc"></category><category term="meeting"></category></entry><entry><title>Segmentation fault when emerging packages after libpcre upgrade?</title><link href="http://blog.siphos.be/2014/07/segmentation-fault-when-emerging-packages-after-libpcre-upgrade/" rel="alternate"></link><published>2014-07-09T20:35:00+02:00</published><updated>2014-07-09T20:35:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-07-09:/2014/07/segmentation-fault-when-emerging-packages-after-libpcre-upgrade/</id><summary type="html">&lt;p&gt;SELinux users might be facing failures when emerge is merging a package
to the file system, with an error that looks like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Setting SELinux security labels
/usr/lib64/portage/bin/misc-functions.sh: line 1112: 23719 Segmentation fault      /usr/sbin/setfiles &amp;quot;${file_contexts_path}&amp;quot; -r &amp;quot;${D}&amp;quot; &amp;quot;${D}&amp;quot;
 * ERROR: dev-libs/libpcre-8.35::gentoo â€¦&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;SELinux users might be facing failures when emerge is merging a package
to the file system, with an error that looks like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Setting SELinux security labels
/usr/lib64/portage/bin/misc-functions.sh: line 1112: 23719 Segmentation fault      /usr/sbin/setfiles &amp;quot;${file_contexts_path}&amp;quot; -r &amp;quot;${D}&amp;quot; &amp;quot;${D}&amp;quot;
 * ERROR: dev-libs/libpcre-8.35::gentoo failed:
 *   Failed to set SELinux security labels.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This has been &lt;a href="https://bugs.gentoo.org/show_bug.cgi?id=516608"&gt;reported as bug
516608&lt;/a&gt; and, after some
investigation, the cause is found. First the quick workaround:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# cd /etc/selinux/strict/contexts/files
~# rm *.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And do the same for the other SELinux policy stores on the system
(targeted, mcs, mls, ...).&lt;/p&gt;
&lt;p&gt;Now, what is happening... Inside the mentioned directory, binary files
exist such as &lt;code&gt;file_contexts.bin&lt;/code&gt;. These files contain the compiled
regular expressions of the non-binary files (like &lt;code&gt;file_contexts&lt;/code&gt;). By
using the precompiled versions, regular expression matching by the
SELinux utilities is a lot faster. Not that it is massively slow
otherwise, but it is a nice speed improvement nonetheless.&lt;/p&gt;
&lt;p&gt;However, when pcre updates occur, then the basic structures that pcre
uses internally might change. For instance, a number might switch from a
signed integer to an unsigned integer. As pcre is meant to be used
within the same application run, most applications do not have any
issues with such changes. However, the SELinux utilities effectively
serialize these structures and later read them back in. If the new pcre
uses a changed structure, then the read-in structures are incompatible
and even corrupt.&lt;/p&gt;
&lt;p&gt;Hence the segmentation faults.&lt;/p&gt;
&lt;p&gt;To resolve this, &lt;a href="http://marc.info/?l=selinux&amp;amp;m=140492568205937&amp;amp;w=2"&gt;Stephen
Smalley&lt;/a&gt; created a
patch that includes PCRE version checking. This patch is now included in
&lt;a href="http://packages.gentoo.org/package/sys-libs/libselinux"&gt;sys-libs/libselinux&lt;/a&gt;
version 2.3-r1. The package also recompiles the existing &lt;code&gt;*.bin&lt;/code&gt; files
so that the older binary files are no longer on the system. But there is
a significant chance that this update will not trickle down to the users
in time, so the workaround might be needed.&lt;/p&gt;
&lt;p&gt;I considered updating the pcre ebuilds as well with this workaround, but
considering that libselinux is most likely to be stabilized faster than
any libpcre bump I let it go.&lt;/p&gt;
&lt;p&gt;At least we have a solution for future upgrades; sorry for the noise.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit:&lt;/em&gt; &lt;code&gt;libselinux-2.2.2-r5&lt;/code&gt; also has the fix included.&lt;/p&gt;</content><category term="SELinux"></category><category term="file_contexts"></category><category term="fix"></category><category term="Gentoo"></category><category term="libselinux"></category><category term="pcre"></category></entry><entry><title>Gentoo Hardened, June 2014</title><link href="http://blog.siphos.be/2014/06/gentoo-hardened-june-2014/" rel="alternate"></link><published>2014-06-15T21:28:00+02:00</published><updated>2014-06-15T21:28:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-06-15:/2014/06/gentoo-hardened-june-2014/</id><summary type="html">&lt;p&gt;Friday the &lt;a href="https://wiki.gentoo.org/wiki/Project:Hardened"&gt;Gentoo
Hardened&lt;/a&gt; project had its
monthly online meeting to talk about the progress within the various
tools, responsibilities and subprojects.&lt;/p&gt;
&lt;p&gt;On the &lt;strong&gt;toolchain&lt;/strong&gt; part, Zorry mentioned that GCC 4.9 and 4.8.3 will
have SSP enabled by default. The hardened profiles will still have a
different â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Friday the &lt;a href="https://wiki.gentoo.org/wiki/Project:Hardened"&gt;Gentoo
Hardened&lt;/a&gt; project had its
monthly online meeting to talk about the progress within the various
tools, responsibilities and subprojects.&lt;/p&gt;
&lt;p&gt;On the &lt;strong&gt;toolchain&lt;/strong&gt; part, Zorry mentioned that GCC 4.9 and 4.8.3 will
have SSP enabled by default. The hardened profiles will still have a
different SSP setting than the default (so yes, there will still be
differences between the two) but this will help in securing the Gentoo
default installations.&lt;/p&gt;
&lt;p&gt;Zorry is also working on upstreaming the PIE patches for GCC 4.10.&lt;/p&gt;
&lt;p&gt;Next to the regular toolchain, blueness also mentioned his intentions to
launch a &lt;a href="https://wiki.gentoo.org/wiki/Project:Hardened_musl"&gt;Hardened
musl&lt;/a&gt; subproject
which will focus on the musl C library (rather than glibc or uclibc) and
hardening.&lt;/p&gt;
&lt;p&gt;On the &lt;strong&gt;kernel&lt;/strong&gt; side, two recent kernel vulnerabilities in the vanilla
kernel Linux (pty race and privilege escalation through futex code)
painted the discussions on IRC recently. Some versions of the hardened
kernels are still available in the tree, but the more recent
(non-vulnerable) kernels have proven not to be as stable as we'd hoped.&lt;/p&gt;
&lt;p&gt;The pty race vulnerability is possibly not applicable to hardened
kernels thanks to grSecurity, due to its protection to access the kernel
symbols.&lt;/p&gt;
&lt;p&gt;The latest kernels should not be used with KSTACKOVERFLOW on production
systems though; there are some issues reported with virtio network
interface support (on the guests) and ZFS.&lt;/p&gt;
&lt;p&gt;Also, on the &lt;strong&gt;Pax&lt;/strong&gt; support, the &lt;code&gt;install-xattr&lt;/code&gt; saga continues. The
new wrapper that blueness worked in dismissed some code to keep the
&lt;code&gt;PWD&lt;/code&gt; so the &lt;code&gt;$S&lt;/code&gt; directory knowledge was "lost". This is now fixed. All
that is left is to have the wrapper included and stabilized.&lt;/p&gt;
&lt;p&gt;On &lt;strong&gt;SELinux&lt;/strong&gt; side, it was the usual set of progress. Policy
stabilization and user land application and library stabilization. The
latter is waiting a bit because of the multilib support that's now being
integrated in the ebuilds as well (and thus has a larger set of
dependencies to go through) but no show-stoppers there. Also, the
&lt;a href="https://wiki.gentoo.org/wiki/SELinux"&gt;SELinux documentation portal&lt;/a&gt; on
the wiki was briefly mentioned.&lt;/p&gt;
&lt;p&gt;Also, the &lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3215"&gt;policycoreutils
vulnerability&lt;/a&gt;
has been &lt;a href="http://blog.siphos.be/2014/05/dropping-sesandbox-support/"&gt;worked
around&lt;/a&gt; so it
is no longer applicable to us.&lt;/p&gt;
&lt;p&gt;On the hardened &lt;strong&gt;profiles&lt;/strong&gt;, we had a nice discussion on enabling
capabilities support (and move towards capabilities instead of setuid
binaries), which klondike will try to tackle during the summer holidays.&lt;/p&gt;
&lt;p&gt;As I didn't take notes during the meeting, this post might miss a few
(and I forgot to enable logging as well) but as Zorry sends out the
meeting logs anyway later, you can read up there ;-)&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="hardened"></category><category term="irc"></category><category term="meeting"></category></entry><entry><title>Revamped our SELinux documentation</title><link href="http://blog.siphos.be/2014/05/revamped-our-selinux-documentation/" rel="alternate"></link><published>2014-05-12T22:15:00+02:00</published><updated>2014-05-12T22:15:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-05-12:/2014/05/revamped-our-selinux-documentation/</id><summary type="html">&lt;p&gt;In the move to the &lt;a href="https://wiki.gentoo.org"&gt;Gentoo wiki&lt;/a&gt;, I have
updated and revamped most of our SELinux documentation. The end result
can be seen through the &lt;a href="https://wiki.gentoo.org/wiki/SELinux"&gt;main SELinux
page&lt;/a&gt;. Most of the content is
below this page (as subpages).&lt;/p&gt;
&lt;p&gt;We start with a new &lt;a href="https://wiki.gentoo.org/wiki/SELinux/Quick_introduction"&gt;introduction to
SELinux&lt;/a&gt;
article which goes over â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the move to the &lt;a href="https://wiki.gentoo.org"&gt;Gentoo wiki&lt;/a&gt;, I have
updated and revamped most of our SELinux documentation. The end result
can be seen through the &lt;a href="https://wiki.gentoo.org/wiki/SELinux"&gt;main SELinux
page&lt;/a&gt;. Most of the content is
below this page (as subpages).&lt;/p&gt;
&lt;p&gt;We start with a new &lt;a href="https://wiki.gentoo.org/wiki/SELinux/Quick_introduction"&gt;introduction to
SELinux&lt;/a&gt;
article which goes over a large set of SELinux' features and concepts.
Next, we cover the various concepts within SELinux. This is mostly
SELinux features but explained more in-depth. Then we go on to the user
guides. We start of course with the &lt;a href="https://wiki.gentoo.org/wiki/SELinux/Installation"&gt;installation of SELinux on
Gentoo&lt;/a&gt; and then
cover the remainder of administrative topics within SELinux (user
management, handling AVC denials, label management, booleans, etc.)&lt;/p&gt;
&lt;p&gt;The above is most likely sufficient for the majority of SELinux users. A
few more expert-specific documents are provided as well (some of them
still work in progress, but I didn't want to wait to get some feedback)
and there is also a section specific for (Gentoo) developers.&lt;/p&gt;
&lt;p&gt;Give it a review and tell me what you think.&lt;/p&gt;</content><category term="Gentoo"></category><category term="documentation"></category><category term="Gentoo"></category><category term="selinux"></category><category term="wiki"></category></entry><entry><title>Dropping sesandbox support</title><link href="http://blog.siphos.be/2014/05/dropping-sesandbox-support/" rel="alternate"></link><published>2014-05-09T21:03:00+02:00</published><updated>2014-05-09T21:03:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-05-09:/2014/05/dropping-sesandbox-support/</id><summary type="html">&lt;p&gt;A &lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3215"&gt;vulnerability in
seunshare&lt;/a&gt;,
part of &lt;code&gt;policycoreutils&lt;/code&gt;, came to light recently (through &lt;a href="https://bugs.gentoo.org/show_bug.cgi?id=509896"&gt;bug
509896&lt;/a&gt;). The issue is
within &lt;code&gt;libcap-ng&lt;/code&gt; actually, but the specific situation in which the
vulnerability can be exploited is only available in &lt;code&gt;seunshare&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, &lt;code&gt;seunshare&lt;/code&gt; is not built by default on Gentoo. You need to define
&lt;code&gt;USE â€¦&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A &lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3215"&gt;vulnerability in
seunshare&lt;/a&gt;,
part of &lt;code&gt;policycoreutils&lt;/code&gt;, came to light recently (through &lt;a href="https://bugs.gentoo.org/show_bug.cgi?id=509896"&gt;bug
509896&lt;/a&gt;). The issue is
within &lt;code&gt;libcap-ng&lt;/code&gt; actually, but the specific situation in which the
vulnerability can be exploited is only available in &lt;code&gt;seunshare&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, &lt;code&gt;seunshare&lt;/code&gt; is not built by default on Gentoo. You need to define
&lt;code&gt;USE="sesandbox"&lt;/code&gt;, which I implemented as an optional build because I
see no need for the &lt;code&gt;seunshare&lt;/code&gt; command and the &lt;em&gt;SELinux sandbox
(sesandbox)&lt;/em&gt; support. Upstream (Fedora/RedHat) calls it &lt;em&gt;sandbox&lt;/em&gt;, which
Gentoo translates to &lt;em&gt;sesandbox&lt;/em&gt; as it collides with the Gentoo sandbox
support otherwise. But I digress.&lt;/p&gt;
&lt;p&gt;The build of the SELinux sandbox support is optional, mostly because we
do not have a direct reason to support it. There are no Gentoo users
that I'm aware of that use it. It is used to start an application in a
chroot-like environment, based on Linux namespaces and a specific
SELinux policy called &lt;code&gt;sandbox_t&lt;/code&gt;. The idea isn't that bad, but I rather
focus on proper application confinement and full system enforcement
support (rather than specific services). The SELinux sandbox makes a bit
more sense when the system supports unconfined domains (and users are in
the &lt;code&gt;unconfined_t&lt;/code&gt; domain), but Gentoo focuses on strict policy support.&lt;/p&gt;
&lt;p&gt;Anyway, this isn't the first vulnerability in &lt;code&gt;seunshare&lt;/code&gt;. In 2011,
another privilege escalation vulnerability was found in the application
(see &lt;a href="https://bugs.gentoo.org/show_bug.cgi?id=374897"&gt;bug 374897&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;But having a vulnerability in the application (or its interaction with
&lt;code&gt;libcap-ng&lt;/code&gt;) doesn't mean an exploitable vulnerability. Most users will
not even have &lt;code&gt;seunshare&lt;/code&gt;, and those that do have it will not be able to
call it if you are running with SELinux in &lt;em&gt;strict&lt;/em&gt; or have
&lt;code&gt;USE="-unconfined"&lt;/code&gt; set for the other policies. If &lt;code&gt;USE="unconfined"&lt;/code&gt; is
set and you run &lt;em&gt;mcs&lt;/em&gt;, &lt;em&gt;targeted&lt;/em&gt; or &lt;em&gt;mls&lt;/em&gt; (which isn't default either,
the default is &lt;em&gt;strict&lt;/em&gt;) then if your users are still mapped to the
regular user domains (&lt;code&gt;user_t&lt;/code&gt;, &lt;code&gt;staff_t&lt;/code&gt; or even &lt;code&gt;sysadm_t&lt;/code&gt;) then
&lt;code&gt;seunshare&lt;/code&gt; doesn't work as the SELinux policy prevents its behavior
before the vulnerability is triggered.&lt;/p&gt;
&lt;p&gt;Assuming you &lt;em&gt;do&lt;/em&gt; have a &lt;em&gt;targeted&lt;/em&gt; policy with users mapped to
&lt;code&gt;unconfined_t&lt;/code&gt; and you have built &lt;code&gt;policycoreutils&lt;/code&gt; with
&lt;code&gt;USE="sesandbox"&lt;/code&gt; or you run in SELinux in permissive mode, then please
tell me if you can trigger the exploit. On my systems, &lt;code&gt;seunshare&lt;/code&gt; fails
with the message that it can't drop its privileges and thus exits
(instead of executing the exploit code as it suggested by the reports).&lt;/p&gt;
&lt;p&gt;Since I mentioned that most user don't use SELinux sandbox, and because
I can't even get it to work (regardless of the vulnerability), I decided
to drop support for it from the builds. That also allows me to more
quickly introduce the new userspace utilities as I don't need to
refactor the code to switch from &lt;code&gt;sandbox&lt;/code&gt; to &lt;code&gt;sesandbox&lt;/code&gt; anymore.&lt;/p&gt;
&lt;p&gt;So, &lt;code&gt;policycoreutils-2.2.5-r4&lt;/code&gt; and &lt;code&gt;policycoreutils-2.3_rc1-r1&lt;/code&gt; are now
available which do not build &lt;code&gt;seunshare&lt;/code&gt; anymore. And now I can focus on
providing the full &lt;em&gt;2.3&lt;/em&gt; userspace that has been announced today.&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="hardened"></category><category term="policycoreutils"></category><category term="selinux"></category><category term="seunshare"></category><category term="vulnerability"></category></entry><entry><title>Online hardened meeting of March</title><link href="http://blog.siphos.be/2014/03/online-hardened-meeting-of-march/" rel="alternate"></link><published>2014-03-27T23:44:00+01:00</published><updated>2014-03-27T23:44:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-03-27:/2014/03/online-hardened-meeting-of-march/</id><summary type="html">&lt;p&gt;I'm back from the depths of the unknown, so time to pick up my usual
write-up of the online Gentoo Hardened meeting.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GCC 4.9 is being worked on, and might be released by end of April (based
on the amount of open bugs). You can find the &lt;a href="http://gcc.gnu.org/gcc-4.9/changes.html"&gt;changes â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm back from the depths of the unknown, so time to pick up my usual
write-up of the online Gentoo Hardened meeting.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GCC 4.9 is being worked on, and might be released by end of April (based
on the amount of open bugs). You can find the &lt;a href="http://gcc.gnu.org/gcc-4.9/changes.html"&gt;changes
online&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Speaking of GCC, pipacs asked if it is possible in the upcoming 4.8.2
ebuilds to disable the SSP protection for development purposes (such as
when you're developing GCC plugins that do similar protection measures
like SSP, but you don't want those to collide with each other). Recent
discussion on Gentoo development mailinglist had a consensus that the
SSP protection measures (&lt;code&gt;-fstack-protector&lt;/code&gt;) can be enabled by default,
but of course if people are developing new GCC plugins which might
interfere with SSP, disabling it is needed. One can use
&lt;code&gt;-fno-stack-protector&lt;/code&gt; for this, or build stuff with &lt;code&gt;-D__KERNEL__&lt;/code&gt; (as
for kernel builds the default SSP handling is disabled anyway, allowing
for kernel-specific implementations).&lt;/p&gt;
&lt;p&gt;Other than those, there is no direct method to make SSP generally
unavailable.&lt;/p&gt;
&lt;p&gt;Blueness is also working on &lt;a href="http://www.musl-libc.org/"&gt;musc-libc&lt;/a&gt; on
Gentoo, which would give a strong incentive for hardened embedded
devices. For desktops, well, don't hold your breath just yet.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Kernel grSec/PaX&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It looks like kernel 3.13 will be Ubuntu's LTS kernel choice, which also
makes it the kernel version that grSecurity will put the long term
support for in. And with Linux 3.14 almost out, the grsec patches for it
are ready as well. Of the previous LTS kernels, 3.2 will probably finish
seeing grsec support somewhere this year.&lt;/p&gt;
&lt;p&gt;The C wrapper (called &lt;strong&gt;install-xattr&lt;/strong&gt;) used to preserve xattr
information during Portage builds has not been integrated in Portage
yet, but the development should be finished.&lt;/p&gt;
&lt;p&gt;During the chat session, we also discussed the
&lt;a href="https://lwn.net/Articles/274859/"&gt;gold&lt;/a&gt;
&lt;a href="https://wiki.gentoo.org/wiki/Gold"&gt;linker&lt;/a&gt; and how it might be used by
more and more packages (so not only by users that explicitly ask for
it). udev version 210 onwards is one example, but some others exist. But
other than its existence there's not much to say right here.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SELinux&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The
&lt;a href="http://oss.tresys.com/projects/refpolicy/wiki/DownloadRelease"&gt;20140311&lt;/a&gt;
release of the reference policy is now in the Portage tree.&lt;/p&gt;
&lt;p&gt;Also, prometheanfire caught a vulnerability
(&lt;a href="https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-1874"&gt;CVE-2014-1874&lt;/a&gt;)
in SELinux which has been fixed in the latest kernels.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;System Integrity&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I made a few updates to the &lt;a href="http://dev.gentoo.org/~swift/docs/security_benchmarks/"&gt;gentoo hardening
guide&lt;/a&gt; in
XCCDF/OVAL format. Nothing major, and I still need to add in a lot of
other best practices (as well as automate the tests through OVAL), but I
do intend to update the files (at least the gentoo one and ssh as
OpenSSH 6 is now readily available) regularly in the next few weeks.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Profiles&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A few minor changes have been made to &lt;code&gt;hardened/uclibc&lt;/code&gt; to support
multilib, but other than that nothing has been done (nor needed to be
done) to our profiles.&lt;/p&gt;
&lt;p&gt;That's it for this months hardened meeting write-up. See you next time!&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="hardened"></category><category term="irc"></category><category term="meeting"></category></entry><entry><title>Fixing the busybox build failure</title><link href="http://blog.siphos.be/2014/03/fixing-the-busybox-build-failure/" rel="alternate"></link><published>2014-03-26T14:18:00+01:00</published><updated>2014-03-26T14:18:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-03-26:/2014/03/fixing-the-busybox-build-failure/</id><summary type="html">&lt;p&gt;Since a few months I have a build failure every time I try to generate
an initial ram file system (as my current primary workstation uses a
separate &lt;code&gt;/usr&lt;/code&gt; and LVM for everything except &lt;code&gt;/boot&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;* busybox: &amp;gt;&amp;gt; Compiling...
* ERROR: Failed to compile the &amp;quot;all&amp;quot; target...
* 
* -- Grepping log... --
* 
*           - busybox-1.7.4-signal-hack.patch â€¦&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Since a few months I have a build failure every time I try to generate
an initial ram file system (as my current primary workstation uses a
separate &lt;code&gt;/usr&lt;/code&gt; and LVM for everything except &lt;code&gt;/boot&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;* busybox: &amp;gt;&amp;gt; Compiling...
* ERROR: Failed to compile the &amp;quot;all&amp;quot; target...
* 
* -- Grepping log... --
* 
*           - busybox-1.7.4-signal-hack.patch
* busybox: &amp;gt;&amp;gt; Configuring...
*COMMAND: make -j2 CC=&amp;quot;gcc&amp;quot; LD=&amp;quot;ld&amp;quot; AS=&amp;quot;as&amp;quot;  
*  HOSTCC  scripts/basic/fixdep
*make: execvp: /var/tmp/genkernel/18562.2920.28766.17301/busybox-1.20.2/scripts/gen_build_files.sh: Permission denied
*make: *** [gen_build_files] Error 127
*make: *** Waiting for unfinished jobs....
*/bin/sh: scripts/basic/fixdep: Permission denied
*make[1]: *** [scripts/basic/fixdep] Error 1
*make: *** [scripts_basic] Error 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I know it isn't SELinux that is causing this, as I have no denial
messages and even putting SELinux in permissive mode doesn't help. Today
I found the time to look at it with more fresh eyes, and noticed that it
wants to execute a file (&lt;code&gt;gen_build_files.sh&lt;/code&gt;) situated in &lt;code&gt;/var/tmp&lt;/code&gt;
somewhere. That file system however is mounted with &lt;code&gt;noexec&lt;/code&gt; (amongst
other settings) so executing anything from within that file system is
not allowed.&lt;/p&gt;
&lt;p&gt;The solution? Update &lt;code&gt;/etc/genkernel.conf&lt;/code&gt; and have &lt;code&gt;TMPDIR&lt;/code&gt; point to a
location where executing &lt;em&gt;is&lt;/em&gt; allowed. Of course, this being a SELinux
system, the new location will need to be labeled as &lt;code&gt;tmp_t&lt;/code&gt; as well, but
that's just a simple thing to do.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# semanage fcontext -a -t tmp_t /var/build/genkernel(/.*)?
~# restorecon -R /var/build/genkernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The new location is not world-writable (only for root as only root
builds initial ram file systems here) so not having &lt;code&gt;noexec&lt;/code&gt; here is ok.&lt;/p&gt;</content><category term="Gentoo"></category><category term="busybox"></category><category term="genkernel"></category><category term="Gentoo"></category><category term="initramfs"></category><category term="initrd"></category><category term="noexec"></category><category term="tmp"></category></entry><entry><title>Create your own SELinux Gentoo profile</title><link href="http://blog.siphos.be/2014/03/create-your-own-selinux-gentoo-profile/" rel="alternate"></link><published>2014-03-24T21:51:00+01:00</published><updated>2014-03-24T21:51:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-03-24:/2014/03/create-your-own-selinux-gentoo-profile/</id><summary type="html">&lt;p&gt;Or any other profile for that matter ;-)&lt;/p&gt;
&lt;p&gt;A month or so ago we got the question how to enable SELinux on a Gentoo
profile that doesn't have a &lt;code&gt;&amp;lt;some profilename&amp;gt;/selinux&lt;/code&gt; equivalent.
Because we don't create SELinux profiles for all possible profiles out
there, having a way to do this â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Or any other profile for that matter ;-)&lt;/p&gt;
&lt;p&gt;A month or so ago we got the question how to enable SELinux on a Gentoo
profile that doesn't have a &lt;code&gt;&amp;lt;some profilename&amp;gt;/selinux&lt;/code&gt; equivalent.
Because we don't create SELinux profiles for all possible profiles out
there, having a way to do this yourself is good to know.&lt;/p&gt;
&lt;p&gt;Sadly, the most efficient way to deal with this isn't supported by
Portage: creating a &lt;code&gt;parent&lt;/code&gt; file pointing to
&lt;code&gt;/usr/portage/profiles/features/selinux&lt;/code&gt; in &lt;code&gt;/etc/portage/profile&lt;/code&gt;, as
is done for all SELinux enabled profiles. The &lt;code&gt;/etc/portage/profile&lt;/code&gt;
location (where users can do local changes to the profile settings) does
not support a &lt;code&gt;parent&lt;/code&gt; file in there.&lt;/p&gt;
&lt;p&gt;Luckily, enabling SELinux is a matter of merging the files in
&lt;code&gt;/usr/portage/profiles/features/selinux&lt;/code&gt; into &lt;code&gt;/etc/portage/profile&lt;/code&gt;. If
you don't have any files in there, you can blindly copy over the files
from &lt;code&gt;features/selinux&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit:&lt;/em&gt; &lt;em&gt;aballier&lt;/em&gt; on &lt;code&gt;#gentoo-dev&lt;/code&gt; mentioned that you can create a
&lt;code&gt;/etc/portage/make.profile&lt;/code&gt; directory (instead of having it be a symlink
managed by &lt;strong&gt;eselect profile&lt;/strong&gt;) which does support &lt;code&gt;parent&lt;/code&gt; files. In
that case, just create one with two entries: one path to the profile you
want, and one path to the &lt;code&gt;features/selinux&lt;/code&gt; location.&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="profile"></category></entry><entry><title>Can Gentoo play a role in a RHEL-only environment?</title><link href="http://blog.siphos.be/2014/01/can-gentoo-play-a-role-in-a-rhel-only-environment/" rel="alternate"></link><published>2014-01-09T04:13:00+01:00</published><updated>2014-01-09T04:13:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-01-09:/2014/01/can-gentoo-play-a-role-in-a-rhel-only-environment/</id><summary type="html">&lt;p&gt;Sounds like a stupid question, as the answer is already in the title. If
a company has only RedHat Enterprise Linux as allowed / supported Linux
platform (be it for a support model requirement, ISV certification,
management tooling support or what not) how could or would Gentoo still
play a role â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sounds like a stupid question, as the answer is already in the title. If
a company has only RedHat Enterprise Linux as allowed / supported Linux
platform (be it for a support model requirement, ISV certification,
management tooling support or what not) how could or would Gentoo still
play a role in it.&lt;/p&gt;
&lt;p&gt;But the answer is, surprisingly, that Gentoo can still be made available
in the company architecture. One of the possible approaches is a
&lt;em&gt;virtual appliance&lt;/em&gt; role.&lt;/p&gt;
&lt;p&gt;Virtual appliances are entire operating systems, provided through VM
images (be it VMDK or in an
&lt;a href="http://en.wikipedia.org/wiki/Open_Virtualization_Format"&gt;OVF&lt;/a&gt; package),
which offer a well defined service to its consumers. More and more
products are being presented as virtual appliances. Why not - in the
past, they would be in sealed hardware appliances (but still running
some form of Linux on it) but nowadays the hypervisor and other
infrastructure is strong and powerful enough to handle even the most
intensive tasks in a virtual guest.&lt;/p&gt;
&lt;p&gt;Gentoo is extremely powerful as a meta-distribution. You can tweak,
update, enhance and tune a Gentoo Linux installation to fulfill whatever
requirement you have. And in the end, you can easily create a virtual
image from it, and have it run as a virtual appliance in the company.&lt;/p&gt;
&lt;p&gt;An example could be to offer a web-based password management suite. A
Gentoo Linux deployment could be created, fully
&lt;a href="https://wiki.gentoo.org/wiki/Project:Hardened"&gt;hardened&lt;/a&gt; of course,
with a MAC such as SELinux active. On it, a properly secured web server
with the password management suite, with underlying database (of course
only listening on localhost - don't want to expose the database to the
wider network). Through a simple menu, the various administrative
services needed to integrate the "appliance" in a larger environment can
be configured: downloading an SSL certificate request (and uploading the
signed one), (encrypted) backup/restore routines, SNMP configuration and
more.&lt;/p&gt;
&lt;p&gt;If properly designed, all configuration data could be easily exported
and imported (or provided through a secundary mount) so that updates on
the appliance are as simple as booting a new image and
uploading/mounting the configuration data.&lt;/p&gt;
&lt;p&gt;Building such a virtual appliance can be simplified with &lt;a href="http://www.gentoo.org/proj/en/gentoo-alt/prefix/"&gt;Gentoo
Prefix&lt;/a&gt;, multi-tenancy
on the web application level through the
&lt;a href="http://www.gentoo.org/proj/en/webapps/index.xml"&gt;webapp-config&lt;/a&gt; tool
while all necessary software is readily available in the Portage tree.&lt;/p&gt;
&lt;p&gt;All you need is some imagination...&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="linux"></category><category term="vappliance"></category><category term="virtual appliance"></category></entry><entry><title>Limiting file access with SELinux alone?</title><link href="http://blog.siphos.be/2013/12/limiting-file-access-with-selinux-alone/" rel="alternate"></link><published>2013-12-31T21:18:00+01:00</published><updated>2013-12-31T21:18:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-12-31:/2013/12/limiting-file-access-with-selinux-alone/</id><summary type="html">&lt;p&gt;While writing a small script to handle simple certificate authority
activities using OpenSSL, I considered how to properly protect the files
that OpenSSL uses for these activities. As you are probably aware, a
system that hosts the necessary files for CA activities (like signing
certificate requests) should be very secure â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;While writing a small script to handle simple certificate authority
activities using OpenSSL, I considered how to properly protect the files
that OpenSSL uses for these activities. As you are probably aware, a
system that hosts the necessary files for CA activities (like signing
certificate requests) should be very secure, and the private key used to
sign (and the private subkeys) should be very well protected.&lt;/p&gt;
&lt;p&gt;Without the help of an &lt;a href="https://en.wikipedia.org/wiki/Hardware_security_module"&gt;Hardware Security Module
(HSM)&lt;/a&gt; these
private keys are just plain text files on the file system. Access to
this file system should therefor be very well audited and protected.&lt;/p&gt;
&lt;p&gt;It of course starts with proper Discretionary Access Control (DAC)
protections on Linux. The private key should only be accessible by the
(technical) user used to operate the CA activities. Next, access to this
user should also be properly protected - if the CA activities are not
done through the root account, make sure that all users who can get root
access on the system and to the (technical) user used to perform the CA
activities are trusted.&lt;/p&gt;
&lt;p&gt;Sometimes however this isn't sufficient, or you want to protect it even
more. With SELinux, we can implement a Mandatory Access Control (MAC)
policy to further restrict access to the private key. The idea is to
only allow the application (in my case the script) that performs the CA
activities access to the private key, and nothing more. Even users who
can get root access, but do not have the privileges SELinux-wise to
execute the CA management script (with the proper domain transition)
should not have any access to the private key.&lt;/p&gt;
&lt;p&gt;I'll discuss a sample policy for that later, but for now I want to focus
on what that would mean - not allowing other users access.&lt;/p&gt;
&lt;p&gt;When users log on on a SELinux-enabled system, they (well, the process
that starts the user session) get assigned a security context. This
security context defines what the user is allowed to do on the system.
And although it is "easy" to disallow a domain read access to a
particular file, we must consider all other activities that the user can
perform.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;First risk: direct file access&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Assume that a user is logged on with the &lt;code&gt;unconfined_t&lt;/code&gt; domain (an
entire context is more than just the domain, but let's stick to this for
now). The &lt;code&gt;unconfined_t&lt;/code&gt; domain is an extremely powerful domain -
basically, SELinux will not prevent much. That doesn't mean that SELinux
is disabled, but rather that the &lt;code&gt;unconfined_t&lt;/code&gt; domain is granted many
privileges. So if a user is in the &lt;code&gt;unconfined_t&lt;/code&gt; domain &lt;em&gt;and&lt;/em&gt; is not
prevented by the standard Linux access controls (for instance because he
is root), he can do basically everything.&lt;/p&gt;
&lt;p&gt;SELinux-wise, we can still create a new type that &lt;code&gt;unconfined_t&lt;/code&gt; has no
immediate access to. By creating a new type (say &lt;code&gt;ca_private_key_t&lt;/code&gt;) and
not assign it any attributes that the &lt;code&gt;unconfined_t&lt;/code&gt; domain has
privileges towards, the user would still not be able to access the file
directly. The same is true for the &lt;code&gt;sysadm_t&lt;/code&gt; domain (a still
privileged, yet slightly more restricted user domain designed for system
administrators). However, such users could still access the file
indirectly.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Second risk: indirect access through new SELinux policies&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;An important privilege that these users have is that they can load a new
SELinux policy, or disable SELinux (actually switch it to permissive
mode) if the Linux kernel has this enabled. By allowing users to load a
new policy, they can basically create a SELinux policy module that
grants them the necessary accesses towards the file:&lt;/p&gt;
&lt;p&gt;``` {lang="bash"}
allow sysadm_t ca_misc_file_t:file manage_file_perms;
allow sysadm_t ca_misc_file_t:dir manage_dir_perms;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;So in order to prevent this, we have to make sure that these users can
either not manipulate the SELinux policy - or make sure users on the
system do not get access to these domains to begin with. Preventing
loading new policies can be handled by the Linux kernel itself
(`CONFIG_SECURITY_SELINUX_DEVELOP` should not be set then) and through
SELinux booleans (`secure_mode_policyload` should be set to `on` and
toggling the boolean off again should be prohibited). Still, it makes
more sense to restrict people with access to these roles - something
I&amp;#39;ll definitely come back to at a later point.

*Third risk: indirect access through attributes*

Another privilege that needs to be watched for is the ability to change
the context of a file. If the `ca_private_key_t` type would not be
declared properly, then the type might be assigned an attribute that
domains have privileges against. Consider the `file_type` attribute,
granted to file types (at least the name makes sense ;-)

``` {lang=&amp;quot;bash&amp;quot;}
# seinfo -tca_private_key_t -x
  ca_private_key_t
    file_type
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The moment a domain has been granted read access to the &lt;code&gt;file_type&lt;/code&gt;
files, then it has read access to the &lt;code&gt;ca_private_key_t&lt;/code&gt; type. In other
words, while designing the policy, make sure that all granted
permissions are accounted for.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fourth risk: "raw" file system (or memory) access&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So if SELinux itself would not allow access to the file(s) anymore, are
we done yet? Of course not. In the end, the keys are stored on the file
system, which is located on partitions or disks, accessible by
privileged users. Someone with direct read access to the block devices
can still obtain the file directly, so even that should be properly
governed.&lt;/p&gt;
&lt;p&gt;This even extends towards memory access, because the private key might
be cached in buffers (by the kernel) or even mapped in memory (even for
a short while) and made accessible through direct memory access.&lt;/p&gt;
&lt;p&gt;Such accesses might not be available to many users, but don't forget
that on the system other applications are running as well. Some daemons
might have the necessary privileges to access file systems directly, or
the memory. Some users might have the rights to execute commands that
have direct file system access (or memory). Making sure that &lt;em&gt;all&lt;/em&gt;
domains that have these accesses are properly audited (including the
access to those domains) will already be quite a challenge.&lt;/p&gt;
&lt;p&gt;For a system that acts as a certificate handling system, it makes sense
to limit exposure to a bare minimum as that makes the above auditing a
bit less daunting.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
Ok ok, let's assume the security administrator has thought of all those
things and SELinux policy-wise properly prevents any access. That's
enough, right?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fifth risk: authentication and authorization access&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Of course not. Some processes or users might have access to the
authentication files on the system (and I'm not only talking about the
&lt;code&gt;/etc/shadow&lt;/code&gt; and &lt;code&gt;/etc/passwd&lt;/code&gt; files, but also the &lt;code&gt;/etc/pam.d/*&lt;/code&gt;
files, or the libraries used by the PAM modules in &lt;code&gt;/lib/security&lt;/code&gt;, or
modify rights on binaries likely executed by administrators who do have
rights we want - there might always be a "recovery user" enabled just in
case things really go wrong, but such "recovery users" imply that rights
are still granted somewhere.&lt;/p&gt;
&lt;p&gt;When modify access is granted to any of the authentication or
authorization services, then users can grant them privileges you don't
want to give them. So not only should access to &lt;code&gt;ca_private_key_t&lt;/code&gt;,
&lt;code&gt;memory_device_t&lt;/code&gt;, &lt;code&gt;device_node&lt;/code&gt; and &lt;code&gt;fixed_disk_device_t&lt;/code&gt; be properly
governed - also &lt;code&gt;etc_t&lt;/code&gt; (as this is the default for PAM files - this
really should be worked on) and &lt;code&gt;lib_t&lt;/code&gt; are important types, and these
are very, very open (many domains have write access to those by
default).&lt;/p&gt;
&lt;p&gt;Fine. Let's "hypothetically" consider that the security engineer has
thought about all SELinux accesses and made a perfect policy. Happy now?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sixth risk: system boot privileges&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Actually no... first of all, some users might be able to reboot the
system with updated boot parameters, or even with a different kernel.
With this at hand, they can disable SELinux and still access the file.
So make sure that rebooting the system still happens securely (you can
use secure boot, signed kernels, ... or at least focus on boot loader
password protection and console access). The
&lt;a href="https://wiki.gentoo.org/wiki/Project:Integrity"&gt;Integrity&lt;/a&gt; subproject
of the &lt;a href="https://wiki.gentoo.org/wiki/Project:Hardened"&gt;Gentoo Hardened&lt;/a&gt;
project will focus on these matters more (just waiting for an
EFI-enabled system to properly start documenting things). In the mean
time, make sure that the Linux system itself is properly secured.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Seventh risk: direct system access&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Yet having a secured boot also doesn't protect us completely. If there
is access to the system physically, users can still mount the disk on
their system and access the files. So one might want to consider
encrypting the partition on which the keys are stored. But the
encryption key for the partition should still be available somewhere,
because regular administration might need to reboot the system.&lt;/p&gt;
&lt;p&gt;A reasonably secure system would keep the encryption key in a HSM device
(which we don't have - see beginning of this post) or only have it
decrypted in a secure environment (like a TPM chip on more modern
systems). Handling TPM and securing keys is definitely also something to
focus on further in the Integrity subproject.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Eighth risk: backups&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And if you take backups (which we of course all do) then those backups
should be properly protected as well. We might want to create encrypted
backups (meaning that the CA script should allow for encrypting and
decrypting the private key) and &lt;em&gt;not store the encryption key with the
backup&lt;/em&gt;. And before asking me why I've emphasized this - I've seen it
before, and I'll probably see it again in the future. Don't laugh.&lt;/p&gt;
&lt;p&gt;Almost starts sounding like a nightmare, right? There might even be more
risks that I haven't covered here (and I haven't even discussed
potential vulnerabilities in the CA management script itself, or even in
OpenSSL or other tools like the &lt;a href="http://it.slashdot.org/story/13/12/18/2122226/scientists-extract-rsa-key-from-gnupg-using-sound-of-cpu"&gt;let's hear the encryption
key&lt;/a&gt;
attack). Welcome to the world of security ;-)&lt;/p&gt;
&lt;p&gt;In any case, in the next post I'll focus on the SELinux policy I wrote
up for the simple script I created. But all the above is just to show
that SELinux is not the answer - it is merely a part in an entire
security architecture. A flexible, powerful part... but still a part.&lt;/p&gt;</content><category term="SELinux"></category><category term="access"></category><category term="acl"></category><category term="file access"></category><category term="Gentoo"></category><category term="selinux"></category></entry><entry><title>Upgrading old Gentoo installations</title><link href="http://blog.siphos.be/2013/12/upgrading-old-gentoo-installations/" rel="alternate"></link><published>2013-12-29T14:18:00+01:00</published><updated>2013-12-29T14:18:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-12-29:/2013/12/upgrading-old-gentoo-installations/</id><summary type="html">&lt;p&gt;Today I got "pinged" on &lt;a href="https://bugs.gentoo.org/show_bug.cgi?id=463240"&gt;bug
#463240&lt;/a&gt; about the
difficulty of upgrading a Gentoo Linux deployment after a long time of
inactivity on the system. We already have an &lt;a href="https://wiki.gentoo.org/wiki/Upgrading_Gentoo"&gt;Upgrading
Gentoo&lt;/a&gt; article on the
Gentoo wiki that describes in great detail how upgrades can be
accomplished. But one of the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I got "pinged" on &lt;a href="https://bugs.gentoo.org/show_bug.cgi?id=463240"&gt;bug
#463240&lt;/a&gt; about the
difficulty of upgrading a Gentoo Linux deployment after a long time of
inactivity on the system. We already have an &lt;a href="https://wiki.gentoo.org/wiki/Upgrading_Gentoo"&gt;Upgrading
Gentoo&lt;/a&gt; article on the
Gentoo wiki that describes in great detail how upgrades can be
accomplished. But one of the methods I personally suggest most is to do
small, incremental upgrades.&lt;/p&gt;
&lt;p&gt;Say you have a system from early 2009. Not too long ago, but also not
that recent anymore. If you would upgrade that system using the regular
approach, your system would probably be using a non-existing profile
(the &lt;code&gt;/etc/make.profile&lt;/code&gt; symlink would point to a non-existing
location), and if you switch the profile to an existing one, you might
have to deal with problems like the profile requiring certain features
(or EAPI version) that the software currently available on your system
doesn't support.&lt;/p&gt;
&lt;p&gt;This problem is mentioned in the upgrade guide through the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make sure your Portage is updated before performing any profile
changes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, it does not tell how to update Portage. In my opinion the best
way forward is to install an older Portage tree snapshot (somewhat more
recent than your own deployment) and upgrade &lt;em&gt;at least&lt;/em&gt; portage, perhaps
also the packages belonging to the &lt;em&gt;system&lt;/em&gt; set. So for a system that
has not been updated since January 2009, you might want to try the
portage tree snapshot of July 2009, then January 2010, then July 2010,
etc. until you have a recent deployment again.&lt;/p&gt;
&lt;p&gt;All that is left for you to do is to find such a snapshot (as the
Portage tree snapshots from the mirrors are cleaned out after a few
months). I try to keep a set of &lt;a href="http://dev.gentoo.org/~swift/snapshots/"&gt;Portage tree snapshots
available&lt;/a&gt; with a 2-month
period which should be sufficient for most users to gradually upgrade
their systems.&lt;/p&gt;
&lt;p&gt;Considering I've used this method a few times already I'm going to add
them to the &lt;a href="https://wiki.gentoo.org/wiki/Upgrading_Gentoo"&gt;upgrading
instructions&lt;/a&gt; as well.&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="portage"></category><category term="snapshot"></category><category term="upgrade"></category></entry><entry><title>December hardened meeting</title><link href="http://blog.siphos.be/2013/12/december-hardened-meeting/" rel="alternate"></link><published>2013-12-20T10:20:00+01:00</published><updated>2013-12-20T10:20:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-12-20:/2013/12/december-hardened-meeting/</id><summary type="html">&lt;p&gt;Yesterday evening (UTC, that is) the members of the &lt;a href="https://wiki.gentoo.org/wiki/Project:Hardened"&gt;Gentoo
Hardened&lt;/a&gt; project filled
the #gentoo-hardened IRC channel again - it was time for another online
follow-up meeting.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A few patches on the toolchain need to be created to mark SSP as
default, but this is just a minor workload.&lt;/p&gt;
&lt;p&gt;And â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yesterday evening (UTC, that is) the members of the &lt;a href="https://wiki.gentoo.org/wiki/Project:Hardened"&gt;Gentoo
Hardened&lt;/a&gt; project filled
the #gentoo-hardened IRC channel again - it was time for another online
follow-up meeting.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A few patches on the toolchain need to be created to mark SSP as
default, but this is just a minor workload.&lt;/p&gt;
&lt;p&gt;And on the &lt;a href="http://code.google.com/p/address-sanitizer/"&gt;ASAN (Address
Sanitizer)&lt;/a&gt; debacle;
well... still the same. Doesn't work with PaX. I think there is a
standstill on this.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Kernel, grsecurity/PaX&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It is not clear yet what the next LTS (Long Term Stable) kernel will be
that the &lt;a href="https://grsecurity.net/"&gt;grSecurity&lt;/a&gt; team will support. This
depends on the Ubuntu LTS support, and as it is not clear which kernel
that distribution will use for LTS, the grSecurity team can also not say
what kernel it will be. (So please stop asking ;-)&lt;/p&gt;
&lt;p&gt;grsecurity 3.0 is out, with the following commit message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;commit 4f48151d49f2697c3e2e108a50513a8d61fb150d
Author: Brad Spengler 
Date:   Sun Nov 24 17:47:14 2013 -0500

    Version bumped to 3.0 (we&amp;#39;d been on 2.9.1 for way too long and numerous
    features have been added since then)

    Introduce new atomic RBAC reload method, developed as part of sponsorship
    by EIG

    This is accompanied by an updated 3.0 gradm which will use the new reload
    method when -R is passed to gradm.  The old method will still be available
    via gradm -r (which is what a 2.9.1 gradm will continue to use).

    The new RBAC reload method is atomic in the sense that at no point in the
    reload process will the system not be covered by a coherent full policy.
    In contrast to previous reload behavior, it also preserves inherited subjects
    and special roles.

    The old RBAC reload method has also been made atomic.  Both methods have
    been updated to perform role_allowed_ip checks only against the IP tagged
    to the task at the time its role was first applied or changed.  This resolves
    long-standing usability problems with the use of role_allowed_ip and matches
    the policies created by learning.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The new version requires the use of &lt;code&gt;&amp;gt;=gradm-3.0&lt;/code&gt;. Some hardened-sources
packages already contain the 3.0 patchset (currently in testing). In a
few days, a final hardened-sources with a 2.9.1 patchset will be
stabilized; after that, only 3.0 patchset sources will be used.&lt;/p&gt;
&lt;p&gt;Another open issue (for a while) is the &lt;code&gt;install.py&lt;/code&gt; wrapper used to
properly pax-mark binaries during package building (instead of
post-merge changes). Although it works functionally well, it has serious
performance regressions when hundreds of files need to be merged and
marked. For each file, the Python interpreter is launched again, making
this a very time-consuming effort. Blueness is currently working on a
C-based wrapper which should load much faster.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SELinux&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The live repository of the Gentoo Hardened policies is well up to date
with the latest evolutions of the reference policy. If you want to use
these, use the &lt;code&gt;-9999&lt;/code&gt; ebuilds for the SELinux policy packages. This can
be accomplished with the following line in
&lt;path&gt;package.accept_keywords&lt;/path&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sec-policy/* **
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Recently, revision 5 of the SELinux policies has been pushed to the tree
(currently in testing). This one also contains a few required changes to
the policy for the new userspace utilities which are also now available
in the tree. An important update on the new userspace utilities is that
they contain many of the patches we needed in Gentoo and of course the
necessary updates, patches and improvements all-round. Once the SELinux
policies are stabilized, the userspace utilities will be too.&lt;/p&gt;
&lt;p&gt;After a few successful runs with SELinux on ARM devices, we will most
likely be tagging our SELinux packages (policies and userspace
utilities) as &lt;code&gt;~arm&lt;/code&gt;. Documentation will need to be updated on this as
well, not only to cater for the additional keyword, but also because of
one (perhaps a few) changes needed, like fixing the SELinux binary
policy (as most ARM systems come with a lower kernel version).&lt;/p&gt;
&lt;p&gt;SELinux support on ZFS also seems to work well, with the last patches in
(thanks to prometheanfire).&lt;/p&gt;
&lt;p&gt;As a final aspect, the SELinux eclass in Gentoo Linux now also supports
fetching the latest policy sources from git through HTTP (instead of
git/ssh).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Integrity&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Not much to discuss here; IMA/EVM and kernel signing all work well.&lt;/p&gt;
&lt;p&gt;In the next few days/weeks, I will be working on a &lt;a href="http://dev.gentoo.org/~swift/docs/security_benchmarks/gentoo.html"&gt;Gentoo Security
Benchmark&lt;/a&gt;
as a sort-of follow-up (improvement) of the current &lt;a href="http://www.gentoo.org/doc/en/security/"&gt;Gentoo Security
Handbook&lt;/a&gt;, now using SCAP
methods.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Profiles&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There has been discussion about supporting a &lt;a href="http://www.gentoo.org/doc/en/security/"&gt;hardened desktop
profile&lt;/a&gt; in Gentoo again. This
does come with the nasty surprise that these profiles don't play well
together, so a solution needs to be brought in place. This could be a
"hardened desktop" profile separate from the gentoo desktop one (and as
such manually synchronized), or an improved approach on profile
stacking.&lt;/p&gt;
&lt;p&gt;One idea was to support stacking with a maximum depth, allowing to use
changes made by a profile without inheriting the changes that that
profile inherited to a certain extend.&lt;/p&gt;
&lt;p&gt;Another idea is to use a more dependency-based syntax (similar to OpenRC
dependency system for init scripts), which not only allows for proper
stacking and the necessary flexibility, but also improves readability:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;before {
  hardened/linux/amd64
}
after {
  default/linux/amd64
}
depends {
  targets/desktop/gnome
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next few months will be interesting to see how this will evolve ;-)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Documentation&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;All our documents are on the &lt;a href="https://wiki.gentoo.org"&gt;wiki&lt;/a&gt;, so if you
notice gaps or see possibilities for improvement - by all means, do
them.&lt;/p&gt;
&lt;p&gt;All in all a good session. Thanks for the good work guys!&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="hardened"></category><category term="irc"></category><category term="meeting"></category><category term="online"></category></entry><entry><title>GPT or MBR in the Gentoo Handbook</title><link href="http://blog.siphos.be/2013/12/gpt-or-mbr-in-the-gentoo-handbook/" rel="alternate"></link><published>2013-12-18T12:25:00+01:00</published><updated>2013-12-18T12:25:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-12-18:/2013/12/gpt-or-mbr-in-the-gentoo-handbook/</id><summary type="html">&lt;p&gt;I just committed a set of changes against the Gentoo Handbook (x86 and
amd64) with the intent to have better instructions on GPT (GUID
Partition Table) layout versus MBR (Master Boot Record) or MSDOS-style
layout.&lt;/p&gt;
&lt;p&gt;The part on "Preparing the Disks" saw the most changes. It starts with
explaining the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I just committed a set of changes against the Gentoo Handbook (x86 and
amd64) with the intent to have better instructions on GPT (GUID
Partition Table) layout versus MBR (Master Boot Record) or MSDOS-style
layout.&lt;/p&gt;
&lt;p&gt;The part on "Preparing the Disks" saw the most changes. It starts with
explaining the differences between the two layouts with advantages and
disadvantages. It then helps the user decide what layout is best for him
(or her).&lt;/p&gt;
&lt;p&gt;Second, the &lt;em&gt;example&lt;/em&gt; (and let me stress that one out again, because
many people have reported bugs on it: it is an &lt;em&gt;example&lt;/em&gt;) partition
layout now includes a BIOS boot partition in the beginning, 2 MB in
size. This is to support GRUB2 on GPT, but doesn't hurt for GRUB2 with
the MSDOS-style layout either. That means that the partition numbers now
move up one (the &lt;em&gt;example&lt;/em&gt; /boot is now at sda2, the swap at sda3 and
root on sda4).&lt;/p&gt;
&lt;p&gt;The partitioning instructions now also include the proper alignment
instructions (using MB alignment), and use parted as the default
partitioning method.&lt;/p&gt;
&lt;p&gt;The changes are submitted to CVS so will show up on the Gentoo site in
an hour or so (documentation on the sites is synchronized hourly if I'm
not mistaken). Please do give it a good read and report bugs on
&lt;a href="https://bugs.gentoo.org"&gt;bugs.gentoo.org&lt;/a&gt;. You might also want to ping
me on IRC if it is urgent, although no guarantees that I'm behind my
computer at any point.&lt;/p&gt;</content><category term="Gentoo"></category><category term="documentation"></category><category term="fdisk"></category><category term="gdp"></category><category term="Gentoo"></category><category term="gpt"></category><category term="handbook"></category><category term="mbr"></category><category term="parted"></category></entry><entry><title>Updated Linux Sea, now with viewport thingie</title><link href="http://blog.siphos.be/2013/12/updated-linux-sea-now-with-viewport-thingie/" rel="alternate"></link><published>2013-12-16T23:37:00+01:00</published><updated>2013-12-16T23:37:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-12-16:/2013/12/updated-linux-sea-now-with-viewport-thingie/</id><summary type="html">&lt;p&gt;I just pushed out an update to &lt;a href="http://swift.siphos.be/linux_sea/"&gt;Linux
Sea&lt;/a&gt; (an online resource to introduce
you to Linux, using Gentoo Linux as an example), including its PDF and
ePub versions. The changes are pretty small (see its
&lt;a href="https://github.com/sjvermeu/Linux-Sea/blob/master/ChangeLog"&gt;ChangeLog&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Together with the update, it now also includes a
&lt;code&gt;&amp;lt;meta name="viewport"...&amp;gt;&lt;/code&gt; so â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I just pushed out an update to &lt;a href="http://swift.siphos.be/linux_sea/"&gt;Linux
Sea&lt;/a&gt; (an online resource to introduce
you to Linux, using Gentoo Linux as an example), including its PDF and
ePub versions. The changes are pretty small (see its
&lt;a href="https://github.com/sjvermeu/Linux-Sea/blob/master/ChangeLog"&gt;ChangeLog&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Together with the update, it now also includes a
&lt;code&gt;&amp;lt;meta name="viewport"...&amp;gt;&lt;/code&gt; so that the document renders better on a
mobile device. Not perfect, but at least it's not small text anymore
where you need to pinch-zoom and then scroll left/right all over the
place. Same with my blog btw.&lt;/p&gt;</content><category term="Documentation"></category><category term="css"></category><category term="documentation"></category><category term="Gentoo"></category><category term="linux sea"></category><category term="mobile"></category></entry><entry><title>Gentoo SELinux policy release script</title><link href="http://blog.siphos.be/2013/12/gentoo-selinux-policy-release-script/" rel="alternate"></link><published>2013-12-11T18:37:00+01:00</published><updated>2013-12-11T18:37:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-12-11:/2013/12/gentoo-selinux-policy-release-script/</id><summary type="html">&lt;p&gt;A few months ago, I wrote a small script that aids in the creation of
new SELinux policy packages. The script is on the
&lt;a href="http://git.overlays.gentoo.org/gitweb/?p=proj/hardened-refpolicy.git;a=summary"&gt;repository&lt;/a&gt;
itself, in the &lt;code&gt;gentoo/&lt;/code&gt; subdirectory, and is called
&lt;code&gt;release-prepare.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The reason for the script is that there are a number of steps to
perform â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few months ago, I wrote a small script that aids in the creation of
new SELinux policy packages. The script is on the
&lt;a href="http://git.overlays.gentoo.org/gitweb/?p=proj/hardened-refpolicy.git;a=summary"&gt;repository&lt;/a&gt;
itself, in the &lt;code&gt;gentoo/&lt;/code&gt; subdirectory, and is called
&lt;code&gt;release-prepare.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The reason for the script is that there are a number of steps to
perform, one of which (tagging the release) I forgot to do too often. So
today I made a new release of the policy packages (2.20130424-r4) with
the script, and decided to blog about it as other developers in the
hardened team might one day be asked to make a release when I'm not
available.&lt;/p&gt;
&lt;p&gt;When the script is called, it spits out the usual help information.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sh release-prepare.sh -h
Usage: release-prepare.sh

Example: release-prepare.sh 2.20130424-r2 2.20130424-r3

The script will copy the ebuilds of the  towards the
 and update the string occurrences of that version
(mostly for the BASEPOL variable).

The following environment variables must be declared correctly for the script
to function properly:
  - GENTOOX86 should point to the gentoo-x86 checkout
    E.g. export GENTOOX86=&amp;quot;/home/user/dev/gentoo-x86&amp;quot;
  - HARDENEDREFPOL should point to the hardened-refpolicy.git checkout
    E.g. export HARDENEDREFPOL=&amp;quot;/home/user/dev/hardened-refpolicy&amp;quot;
  - REFPOLRELEASE should point to the current latest /release/ of the reference
    policy (so NOT to a checkout), extracted somewhere on the file system.
    E.g. export REFPOLRELEASE=&amp;quot;/home/user/local/refpolicy-20130424&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So first, we need to export three environment variables needed by the
script:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GENTOOX86&lt;/code&gt; points to the CVS checkout of the Portage tree. It is
    used to create new ebuilds.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HARDENEDREFPOL&lt;/code&gt; is the git checkout of the policy repository. This
    one is used to read the changes from to generate a patch.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REFPOLRELEASE&lt;/code&gt; is an extracted &lt;code&gt;refpolicy-20130424.tar.gz&lt;/code&gt; (the
    upstream release of the reference policy). This extracted location
    is needed to generate the patch (the difference between our
    repository and the upstream release).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After setting the variables, the script does its magic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sh release-prepare.sh 2.20130424-r3 2.20130424-r4
Creating patch 0001-full-patch-against-stable-release.patch... done
Creating patch bundle for 2.20130424-r4... done
Copying patch bundle into /usr/portage/distfiles and dev.g.o... done
Removing old patchbundle references in Manifest (in case of rebuild)... done
Creating new ebuilds based on old version... done
Marking ebuilds as ~arch... done
Creating tag 2.20130424-r4 in our repository... done
The release has now been prepared.

Please go do the following to finish up:
- In /home/swift/dev/gentoo-x86/sec-policy go &amp;quot;cvs add&amp;quot; all the new ebuilds
- In /home/swift/dev/gentoo-x86/sec-policy run &amp;quot;repoman manifest&amp;quot; and &amp;quot;repoman full&amp;quot;

Then, before finally committing - do a run yourself, ensuring that the right
version is deployed of course:
- &amp;quot;emerge -1 sec-policy/selinux-aide
sec-policy/selinux-alsa
...
Only then do a &amp;#39;repoman commit -m &amp;#39;Release of 2.20130424-r4&amp;#39;&amp;#39;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The script performs the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It creates the patch with the difference between the main refpolicy
    release and our repository. Our repository closely follows the
    upstream release, but still contains quite a few changes that have
    not been upstreamed yet (due to history loss of the changes, or the
    changes are very gentoo-specific, or the changes still need to
    be improved). In the past, we maintained all the patches separately,
    but this meant that the deployment of the policy ebuilds took too
    long (around 100 patches being applied takes a while, and took more
    than 80% of the total deployment time on a regular server system).
    By using a single patch file, the deployment time is
    reduced drastically.&lt;/li&gt;
&lt;li&gt;It then compresses this patch file and stores it in
    &lt;code&gt;/usr/portage/distfiles&lt;/code&gt; (so that later &lt;code&gt;repoman manifest&lt;/code&gt; can take
    the file into account) as well as on my dev.gentoo.org location
    (where it is referenced). If other developers create a release, they
    will need to change this location (and the pointer in the ebuilds).&lt;/li&gt;
&lt;li&gt;Previous file references in the &lt;code&gt;Manifest&lt;/code&gt; files are removed, so
    that &lt;code&gt;repoman&lt;/code&gt; does not think the digest can be skipped.&lt;/li&gt;
&lt;li&gt;New ebuilds are created, copied from the previous version. In these
    ebuilds, the &lt;code&gt;KEYWORDS&lt;/code&gt; variable is updated to only contain
    &lt;code&gt;~arch&lt;/code&gt; keywords.&lt;/li&gt;
&lt;li&gt;A release tag is created in the git repository.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then the script tells the user to add the new files to the repository,
run &lt;code&gt;repoman manifest&lt;/code&gt; and &lt;code&gt;repoman full&lt;/code&gt; to verify the quality of the
ebuilds and generate the necessary digests. Then, and also after
testing, the created ebuilds can be committed to the repository.&lt;/p&gt;
&lt;p&gt;The last few steps have explicitly not been automated so the developer
has the chance to update the ebuilds (in case more than just the policy
contents has changed between releases) or do dry runs without affecting
the &lt;code&gt;gentoo-x86&lt;/code&gt; repository.&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="hardened"></category><category term="policy"></category><category term="release"></category><category term="selinux"></category></entry><entry><title>November online hardened meeting</title><link href="http://blog.siphos.be/2013/12/november-online-hardened-meeting/" rel="alternate"></link><published>2013-12-11T12:12:00+01:00</published><updated>2013-12-11T12:12:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-12-11:/2013/12/november-online-hardened-meeting/</id><summary type="html">&lt;p&gt;Later than usual, as I wasn't able to make the meeting myself (thus had
to wait for the meeting logs in order to draft up this summary), so here
it is. The next meeting is scheduled for next week, btw ;-)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The 4.8.2 ebuild for GCC is available â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Later than usual, as I wasn't able to make the meeting myself (thus had
to wait for the meeting logs in order to draft up this summary), so here
it is. The next meeting is scheduled for next week, btw ;-)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The 4.8.2 ebuild for GCC is available in the tree, currently still
masked.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Kernel and grSecurity&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The grSecurity project has made the patches for the 3.12 kernel
available; a hardened 3.12 kernel is available in the
&lt;code&gt;hardened-development&lt;/code&gt; overlay.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SELinux&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Matthew is working on &lt;a href="https://github.com/zfsonlinux/zfs/pull/1835"&gt;ZFSonLinux and
SELinux&lt;/a&gt; support.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Profiles&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Matthew and Steev have been working on SELinux and ARM support. It seems
to work, but kernel versions matter greatly. We might want to open up
ARM keywords.&lt;/p&gt;
&lt;p&gt;That's about it. As blueness wasn't there as well, the topics were
discussed quite fast. The full logs can be found &lt;a href="http://thread.gmane.org/gmane.linux.gentoo.hardened/6117"&gt;on the gentoo-hardened
mailinglist&lt;/a&gt;.&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="hardened"></category><category term="irc"></category><category term="meeting"></category><category term="online"></category></entry><entry><title>Majority of GDP documents moved to Gentoo wiki</title><link href="http://blog.siphos.be/2013/12/majority-of-gdp-documents-moved-to-gentoo-wiki/" rel="alternate"></link><published>2013-12-10T16:03:00+01:00</published><updated>2013-12-10T16:03:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-12-10:/2013/12/majority-of-gdp-documents-moved-to-gentoo-wiki/</id><summary type="html">&lt;p&gt;The majority of the English gentoo documents that resided in
&lt;a href="http://www.gentoo.org/doc/en"&gt;www.gentoo.org/doc/en&lt;/a&gt; have now been
moved to the &lt;a href="https://wiki.gentoo.org"&gt;Gentoo Wiki&lt;/a&gt;. All those documents
have been made available in the main namespace, meaning that
non-developers can continue to contribute on those articles and guides,
fully in the spirit â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The majority of the English gentoo documents that resided in
&lt;a href="http://www.gentoo.org/doc/en"&gt;www.gentoo.org/doc/en&lt;/a&gt; have now been
moved to the &lt;a href="https://wiki.gentoo.org"&gt;Gentoo Wiki&lt;/a&gt;. All those documents
have been made available in the main namespace, meaning that
non-developers can continue to contribute on those articles and guides,
fully in the spirit of a wiki and community.&lt;/p&gt;
&lt;p&gt;We are now working on &lt;a href="https://wiki.gentoo.org/wiki/Project:Documentation/Overview"&gt;a method for displaying an overview of
documents&lt;/a&gt;
that have been moved, or have seen enough development on the wiki that
they are deemed of proper quality and stable (not too many changes
left). Currently, such documents are (requested to be) marked for
translation, allowing me or other developers to review if the guides are
indeed ok to move forward. If so, they are marked as translatable
(allowing the various translation members on the wiki to move forward
with translating the guides) and will be made part of the overview as
well.&lt;/p&gt;
&lt;p&gt;One of the few documents that has not been moved yet is the Gentoo
Handbook as it is of a different format than the guides, and includes
dynamic documentation generation features which I have yet to fully
investigate (wiki-wise). I currently focused mainly on the non-handbook
guides, so the handbook itself will get more attention later (after the
documentation overview is completed).&lt;/p&gt;
&lt;p&gt;Big thanks to &lt;a href="https://wiki.gentoo.org/wiki/User:A3li"&gt;Alex Legler&lt;/a&gt; for
assisting me and providing the necessary features and functionality in
the Gentoo wiki to make this all possible.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit:&lt;/em&gt; added link to overview page.&lt;/p&gt;</content><category term="Documentation"></category><category term="documentation"></category><category term="documents"></category><category term="gdp"></category><category term="Gentoo"></category><category term="wiki"></category></entry><entry><title>The mix of libffi with other changes</title><link href="http://blog.siphos.be/2013/11/the-mix-of-libffi-with-other-changes/" rel="alternate"></link><published>2013-11-03T10:27:00+01:00</published><updated>2013-11-03T10:27:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-11-03:/2013/11/the-mix-of-libffi-with-other-changes/</id><summary type="html">&lt;p&gt;I &lt;a href="http://blog.siphos.be/2013/04/securely-handling-libffi/"&gt;once again&lt;/a&gt;
came across libffi. Not only does the libffi approach fight with SELinux
alone, it also triggers the TPE (Trusted Path Execution) protections in
grSecurity. And when I tried to reinstall Portage, Portage seemed to
create some sort of runtime environment in a temporary directory as
well, and â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I &lt;a href="http://blog.siphos.be/2013/04/securely-handling-libffi/"&gt;once again&lt;/a&gt;
came across libffi. Not only does the libffi approach fight with SELinux
alone, it also triggers the TPE (Trusted Path Execution) protections in
grSecurity. And when I tried to reinstall Portage, Portage seemed to
create some sort of runtime environment in a temporary directory as
well, and SELinux wasn't up to allowing that either.&lt;/p&gt;
&lt;p&gt;Let's first talk about a quick workaround for the libffi-with-TPE issue.
Because libffi wants to create executable files in a world-writable
directory and then execute that file (try finding the potential security
issue here) TPE is prohibiting the execution. The easiest workaround is
to add the &lt;code&gt;portage&lt;/code&gt; Linux user, as well as the Linux accounts that you
use to run emerge with (even just things like &lt;strong&gt;emerge --info&lt;/strong&gt;) in the
&lt;code&gt;wheel&lt;/code&gt; group. This group is exempt from TPE protections (unless you
configured a different group in your kernel for this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# zgrep CONFIG_GRKERNSEC_TPE_TRUSTED_GID /proc/config.gz
CONFIG_GRKERNSEC_TPE_TRUSTED_GID=10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we also need to allow the &lt;code&gt;portage_t&lt;/code&gt; domain to execute files
labeled with &lt;code&gt;portage_tmpfs_t&lt;/code&gt;. You can do this by creating your own
SELinux policy module with the following content (or use selocal):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;can_exec(portage_t, portage_tmpfs_t)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This works around the libffi issue for now. A better solution still has
to be implemented (as discussed in the previous post).&lt;/p&gt;
&lt;p&gt;With regards to the portage installation failing, you'll notice this
quickly when you get an error like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# emerge -1 portage
Calculating dependencies  ... done!
Traceback (most recent call last):
  File &amp;quot;/usr/bin/emerge&amp;quot;, line 50, in &amp;lt;module&amp;gt;
    retval = emerge_main()
  File &amp;quot;/usr/lib64/portage/pym/_emerge/main.py&amp;quot;, line 1031, in emerge_main
    return run_action(emerge_config)
  File &amp;quot;/usr/lib64/portage/pym/_emerge/actions.py&amp;quot;, line 4062, in run_action
    emerge_config.args, spinner)
  File &amp;quot;/usr/lib64/portage/pym/_emerge/actions.py&amp;quot;, line 453, in action_build
    retval = mergetask.merge()
  File &amp;quot;/usr/lib64/portage/pym/_emerge/Scheduler.py&amp;quot;, line 946, in merge
    rval = self._handle_self_update()
  File &amp;quot;/usr/lib64/portage/pym/_emerge/Scheduler.py&amp;quot;, line 316, in _handle_self_update
    _prepare_self_update(self.settings)
  File &amp;quot;/usr/lib64/portage/pym/portage/package/ebuild/doebuild.py&amp;quot;, line 2326, in _prepare_self_update
    shutil.copytree(orig_bin_path, portage._bin_path, symlinks=True)
  File &amp;quot;/usr/lib64/portage/pym/portage/__init__.py&amp;quot;, line 259, in __call__
    rval = self._func(*wrapped_args, **wrapped_kwargs)
  File &amp;quot;/usr/lib64/python3.3/shutil.py&amp;quot;, line 343, in copytree
    raise Error(errors)
shutil.Error: [(b&amp;#39;/usr/lib64/portage/bin/ebuild-helpers/prepalldocs&amp;#39;, 
b&amp;#39;/var/tmp/portage/._portage_reinstall_.osj370/bin/ebuild-helpers/prepalldocs&amp;#39;, 
&amp;quot;[Errno 13] Permission denied: &amp;#39;/var/tmp/portage/._portage_reinstall_.osj370/bin/ebuild-helpers/prepalldocs&amp;#39;&amp;quot;), 
(b&amp;#39;/usr/lib64/portage/bin/ebuild-helpers/prepinfo&amp;#39;, 
b&amp;#39;/var/tmp/portage/._portage_reinstall_.osj370/bin/ebuild-helpers/prepinfo&amp;#39;, 
&amp;quot;[Errno 13] Permission denied: &amp;#39;/var/tmp/portage/._portage_reinstall_.osj370/bin/ebuild-helpers/prepinfo&amp;#39;&amp;quot;), 
(b&amp;#39;/usr/lib64/portage/bin/ebuild-helpers/newlib.so&amp;#39;, 
b&amp;#39;/var/tmp/portage/._portage_reinstall_.osj370/bin/ebuild-helpers/newlib.so&amp;#39;, 
&amp;quot;[Errno 13] Permission denied: &amp;#39;/var/tmp/portage/._portage_reinstall_.osj370/bin/ebuild-helpers/newlib.so&amp;#39;&amp;quot;), 
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the errors go on and on and on.&lt;/p&gt;
&lt;p&gt;I've been able to get it working again by allowing the following SELinux
permissions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;allow portage_t portage_tmp_t:dir relabel_dir_perms;
allow portage_t portage_tmp_t:lnk_file relabel_lnk_file_perms;
allow portage_t bin_t:dir relabel_dir_perms;
allow portage_t bin_t:file relabel_file_perms;
allow portage_t bin_t:lnk_file relabel_lnk_file_perms;
allow portage_t portage_exec_t:file relabel_file_perms;
allow portage_t portage_fetch_exec_t:file relabel_file_perms;
allow portage_t lib_t:dir relabel_dir_perms;
allow portage_t lib_t:file relabel_file_perms;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can somewhat shorten this by combining types (but this doesn't work
with selocal for now):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;allow portage_t { portage_tmp_t bin_t lib_t}:dir relabel_dir_perms;
allow portage_t { portage_tmp_t bin_t }:lnk_file relabel_lnk_file_perms;
allow portage_t { bin_t portage_exec_t portage_fetch_exec_t lib_t}:file relabel_file_perms;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At the end of the emerge process (when the new portage is installed) you
might want to reset the labels of all files provided by the portage
package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# rlpkg portage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These changes have not been passed into the policy yet as I first need
to find out why exactly they are needed, and as you can see from &lt;a href="http://dev.gentoo.org/devaway/"&gt;the
gentoo devaway&lt;/a&gt; page, time is not on my
side to do this. I'll try to free up some time in the next few days to
handle this as well as the &lt;a href="http://userspace.selinuxproject.org/trac/wiki/Releases"&gt;SELinux userspace
release&lt;/a&gt; but no
promises here.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit:&lt;/em&gt; I found why - it is the &lt;code&gt;_prepare_self_update&lt;/code&gt; in the
&lt;code&gt;doebuild.py&lt;/code&gt; script. It creates temporary copies of the Portage
binaries and Portage python libraries, which is why we need to support
relabel operations on the files. Support for this is now in the policy
repository.&lt;/p&gt;
&lt;/p&gt;</content><category term="Security"></category><category term="Gentoo"></category><category term="hardened"></category><category term="libffi"></category><category term="portage"></category><category term="selinux"></category></entry><entry><title>Gentoo Hardened meeting 201310</title><link href="http://blog.siphos.be/2013/10/gentoo-hardened-meeting-201310/" rel="alternate"></link><published>2013-10-24T23:25:00+02:00</published><updated>2013-10-24T23:25:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-10-24:/2013/10/gentoo-hardened-meeting-201310/</id><summary type="html">&lt;p&gt;We gathered online again to talk about the progress, changes and other
stuff related to the &lt;a href="https://wiki.gentoo.org/wiki/Project:Hardened"&gt;Gentoo
Hardened&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;New Developer&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We welcomed Zero_Chaos as a new addition to our team. Big welcome, with
the usual IRC kick in between, ensued.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GCC 4.8.x is unmasked and ready â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;We gathered online again to talk about the progress, changes and other
stuff related to the &lt;a href="https://wiki.gentoo.org/wiki/Project:Hardened"&gt;Gentoo
Hardened&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;New Developer&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We welcomed Zero_Chaos as a new addition to our team. Big welcome, with
the usual IRC kick in between, ensued.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GCC 4.8.x is unmasked and ready for testing. The ASAN problem however is
not resolved and it doesn't look like upstream wants to provide the fix
for this. As a result, if you want to use ASAN, you will need to disable
UDEREF in the kernel.&lt;/p&gt;
&lt;p&gt;A difficult problem here is that, if a user forgets to disable UDEREF,
then building with ASAN will fail. If he disabled UDEREF and uses ASAN,
then booting into a UDEREF enabled kernel will fail. If he starts
building with ASAN on UDEREF kernels, things will break. Its ugly, and
unless the ASAN code is changed to support other technologies using the
address space layout information, it will remain mutually exclusive.&lt;/p&gt;
&lt;p&gt;For now, we'll properly document the situation.&lt;/p&gt;
&lt;p&gt;GCC 4.9 will end its stage1 development phase on November 21st.&lt;/p&gt;
&lt;p&gt;The uclibc stages are currently built with GCC-4.7.3-r1, except for the
MIPS architectures which use GCC 4.8.1-r1.&lt;br&gt;
The stages are built once every two months, give or take.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Kernel grSec/PaX&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Standard maintenance, such as keeping up with upstream changes, has
taken place. The XATTR problems with the &lt;strong&gt;install&lt;/strong&gt; binary/phase has
not been resolved yet due to time constraints. First focus will be on
writing the C-based wrapper to see if this significantly speeds things
up.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;USE=pax_kernel&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There is ambiguity of the meaning or use of the &lt;code&gt;pax_kernel&lt;/code&gt; USE flag.
It seems to be used for multiple, exclusive things, like limiting builds
on PaX kernels or limiting run-time behavior on PaX kernels. To build
Gentoo images, developers need to set &lt;code&gt;pax_kernel&lt;/code&gt; on some packages and
disable it on others in order for the image to build properly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;lt;@blueness&amp;gt; USE=pax_kernel in the case of userland should apply patches etc, that fix the code
            so that it won&amp;#39;t trip pax protection eg mprotect
&amp;lt;@blueness&amp;gt; in the case of kernel modules, it can&amp;#39;t mean that obviously!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One of the mentioned problems is that some ebuilds only enable pax
markings when &lt;code&gt;pax_kernel&lt;/code&gt; is set. However, that shouldn't be done
conditionally. PaX markings can be done even without a PaX kernel.&lt;/p&gt;
&lt;p&gt;Zero_Chaos (new developers always have the necessary energy) will try
to update ebuilds where applicable.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SELinux and System Integrity&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Nothing worth mentioning here.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Profile&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Many users were using hardened profiles on the desktop. In the past, we
had the desktop/hardened profiles removed (referring users to the
regular hardened profiles and asking them to update their system with
the USE flags (and other settings) they want for their desktop.
Apparently, this is giving some problems for some users, so the idea is
to reinstate the desktop/hardened profiles where the hardened settings
overrule the desktop settings.&lt;/p&gt;
&lt;p&gt;However, we should take care of tackling the issues we had in the past
(which is the reason why we removed the profiles in the first place). It
is recommended that we discuss this outside the IRC meeting to make sure
we don't reintroduce the issues again while using a flexible approach.&lt;/p&gt;
&lt;p&gt;That's it. A big thanks to the developers, contributors and thousands of
users!&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="hardened"></category><category term="irc"></category><category term="meeting"></category><category term="online"></category></entry><entry><title>A bug please...</title><link href="http://blog.siphos.be/2013/09/a-bug-please/" rel="alternate"></link><published>2013-09-30T21:53:00+02:00</published><updated>2013-09-30T21:53:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-09-30:/2013/09/a-bug-please/</id><summary type="html">&lt;p&gt;I know contacting me (or other developers) through IRC is often fast,
but having a bug report on our &lt;a href="https://bugs.gentoo.org"&gt;bugzilla&lt;/a&gt; is
very important to me and other developers. Allow me to explain a bit
why.&lt;/p&gt;
&lt;p&gt;First of all, &lt;em&gt;IRC is ephemeral&lt;/em&gt;. If we are not immediately on IRC
noticing it â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I know contacting me (or other developers) through IRC is often fast,
but having a bug report on our &lt;a href="https://bugs.gentoo.org"&gt;bugzilla&lt;/a&gt; is
very important to me and other developers. Allow me to explain a bit
why.&lt;/p&gt;
&lt;p&gt;First of all, &lt;em&gt;IRC is ephemeral&lt;/em&gt;. If we are not immediately on IRC
noticing it, we might not notice it at all. Even with highlights on IRC
or in a separate &lt;code&gt;/QUERY&lt;/code&gt; window we might still miss it, because the IRC
client might disconnect (for instance because the server on which we run
our chat client reboots for a kernel update, or because of some weird
issue where we decide quit/restart is better). That doesn't make IRC the
wrong method - it can be perfect to ask for some attention on a bug, and
if you are on IRC while we are tackling it, it is very easy to ask for
some feedback.&lt;/p&gt;
&lt;p&gt;A second aspect is about the &lt;em&gt;completeness of the report&lt;/em&gt;. On a bugzilla
report, you can (well, should) add in the necessary information that
developers need to troubleshoot it. Gentoo supports many setups, so the
output of &lt;code&gt;emerge --info&lt;/code&gt; and other output that might be requested (like
build logs) are very important. On IRC, a "report" might seem as simple
as "package foo has a circular dependency", but without knowing with
which package the circular dependency is or with which versions, it
might be difficult to deduce. Dependencies can even be USE-driven, so
without knowing what the USE flags are, the circular dependency issue
might not be that obvious. Having a complete bugreport (with the
necessary attachments) makes for a much easier resolution development
lifecycle.&lt;/p&gt;
&lt;p&gt;Third, and in my opinion &lt;strong&gt;extremely important&lt;/strong&gt;, is that bug reports
are &lt;em&gt;searchable&lt;/em&gt;. Other users might have the same problem you are
facing. By having a bugreport they can chime in (if the problem has not
been resolved yet), providing faster feedback (for instance, other users
give feedback on additional questions you ask while you are sleeping and
when you are back up the bug is resolved). Or, if the bug has been
resolved (but the change is still in &lt;code&gt;~arch&lt;/code&gt;) they will find the
solution more easily. And often bugreports also document the workaround
(even if just as a way for the developer to confirm that the issue is
what it is) allowing other users to switch gears faster with the
problem.&lt;/p&gt;
&lt;p&gt;Also, the entire communication chain between developer and reporter(s)
also gives a lot of interesting information. Some developers give a
lengthy explanation as to why the issue occurred (which is always useful
to know) or explain in which circumstances it would or wouldn't be
visible. Most developers also link the bug in the commits and ChangeLog
entries so that people who read through the changes can quickly find
more information about the change.&lt;/p&gt;
&lt;p&gt;Bugreports also allow for tracking by people who are not on IRC (or
mailinglists) but that do want to help out. For instance, bugs assigned
to the SELinux alias on Gentoo's bugzilla are followed up by a handful
of non-developers who often give feedback much faster than I or another
developer can. If this would be reported on IRC only, you would miss the
opportunity to work with these excellent people (and thus get a faster
resolution).&lt;/p&gt;
&lt;p&gt;Another advantage of bugreports is that dependencies between bugs can be
placed. A bug might only be resolved if another bug is resolved as well
- this dependency information is made part of bug reports to give a
clear view on the situation.&lt;/p&gt;
&lt;p&gt;Bug reports on a bugzilla (or other bug tracking software) have other
advantages as well, but the above ones are my top reasons. So while I
don't mind if I can quickly fix things I notice on IRC (such as a
missing dependency), if you want to make sure I catch it, please use
bugzilla.&lt;/p&gt;</content><category term="Gentoo"></category><category term="bugreport"></category><category term="bugs"></category><category term="bugzilla"></category><category term="Gentoo"></category></entry><entry><title>It has finally arrived: SELinux System Administration</title><link href="http://blog.siphos.be/2013/09/it-has-finally-arrived-selinux-system-administration/" rel="alternate"></link><published>2013-09-27T15:10:00+02:00</published><updated>2013-09-27T15:10:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-09-27:/2013/09/it-has-finally-arrived-selinux-system-administration/</id><summary type="html">&lt;p&gt;Almost everyone has it - either physical or in their heads: a list of
things you want to do or achieve before you... well, stop existing. Mine
still has numerous things on it (I should get on it, I know) but one of
the items on that list has recently been â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Almost everyone has it - either physical or in their heads: a list of
things you want to do or achieve before you... well, stop existing. Mine
still has numerous things on it (I should get on it, I know) but one of
the items on that list has recently been removed: write and have a book
published. And the result is a book called &lt;a href="http://www.packtpub.com/selinux-system-administration/book"&gt;SELinux System
Administration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Somewhere in the second quarter of this year, &lt;a href="http://www.packtpub.com/"&gt;Packt
Publishing&lt;/a&gt; contacted me to see if I am
interested in authoring a book about SELinux, focusing on the usage of
SELinux (you know - handling booleans, dealing with file contexts, etc.)
in a short technical book (the aim was 100 pages). Considering that I'm
almost always busy with documentation and editing (for instance, I
&lt;a href="http://www.gentoo.org/news/en/gwn/20031110-newsletter.xml#doc_chap2"&gt;joined
Gentoo&lt;/a&gt;
as documentation translator and editor beginning of 2003 if I remember
correctly) and am busy keeping SELinux support within Gentoo on a good
level, I of course said yes to the request.&lt;/p&gt;
&lt;p&gt;Now, 100 pages is not a lot for a topic as complex and diverse as
SELinux so was really challenging, but I do think I managed to get
everything in it while keeping it practical. The book first starts with
the fundamentals of SELinux - concepts you really need to grasp before
diving into SELinux. Then, it goes on about switching SELinux state
(disabling, permissive, granular permissive, etc.), logging, managing
SELinux users and roles, handling process domains, etc. Just take a look
at the table of contents and you'll see what I mean ;-)&lt;/p&gt;
&lt;p&gt;Inside the book, examples are given based on Fedora (and thus also
RedHat Enterprise Linux) and Gentoo Hardened while ensuring that there
are few distribution specific sections in it, making it usable for Linux
administrators of systems with a different Linux distribution installed
to it. Take a look at the &lt;a href="http://www.packtpub.com/sites/default/files/9781783283170_Chapter-03.pdf?utm_source=packtpub&amp;amp;utm_medium=free&amp;amp;utm_campaign=pdf"&gt;sample
chapter&lt;/a&gt;
and, if you like it, put it on your wish list and let everyone know ;-)&lt;/p&gt;</content><category term="SELinux"></category><category term="administration"></category><category term="book"></category><category term="fedora"></category><category term="Gentoo"></category><category term="packt"></category><category term="packtpub"></category><category term="selinux"></category><category term="system"></category></entry><entry><title>Underestimated or underused: Portage (e)logging</title><link href="http://blog.siphos.be/2013/09/underestimated-or-underused-portage-elogging/" rel="alternate"></link><published>2013-09-25T10:09:00+02:00</published><updated>2013-09-25T10:09:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-09-25:/2013/09/underestimated-or-underused-portage-elogging/</id><summary type="html">&lt;p&gt;Within 30 minutes of each other, two people on the &lt;code&gt;#gentoo&lt;/code&gt; channel
asked if Portage kept logs of the messages displayed during the build
and installation of a package. Of course, the answer is a sounding "yes"
- and depending on your needs, you can even save more of the logging â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Within 30 minutes of each other, two people on the &lt;code&gt;#gentoo&lt;/code&gt; channel
asked if Portage kept logs of the messages displayed during the build
and installation of a package. Of course, the answer is a sounding "yes"
- and depending on your needs, you can even save more of the logging. If
you haven't read the &lt;a href="http://www.gentoo.org/doc/en/handbook"&gt;Gentoo
handbook&lt;/a&gt; yet, do so - it
contains a section on &lt;a href="http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=3&amp;amp;chap=1#doc_chap4"&gt;Logging
Features&lt;/a&gt;
that explains how and when logging is enabled.&lt;/p&gt;
&lt;p&gt;Let's start with the default &lt;em&gt;elog&lt;/em&gt; support. By default, Gentoo's
Portage will log messages that ebuild developers have put in the
packages through the use of the &lt;code&gt;elog&lt;/code&gt;, &lt;code&gt;ewarn&lt;/code&gt; and &lt;code&gt;eerror&lt;/code&gt; functions.
These methods are used by the developers to notify the administrator
about something useful or important (usually &lt;code&gt;elog&lt;/code&gt;), a potential issue
that might occur (&lt;code&gt;ewarn&lt;/code&gt;) or even a problem that was found (&lt;code&gt;eerror&lt;/code&gt;).
Let's look at a snippet of the &lt;code&gt;app-admin/eselect-postgresql-1.0.10&lt;/code&gt;
package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pkg_postinst() {
    ewarn &amp;quot;If you are updating from app-admin/eselect-postgresql-0.4 or older, run:&amp;quot;
    ewarn
    ewarn &amp;quot;    eselect postgresql update&amp;quot;
    ewarn
    ewarn &amp;quot;To get your system in a proper state.&amp;quot;
    elog &amp;quot;You should set your desired PostgreSQL slot:&amp;quot;
    elog &amp;quot;    eselect postgresql list&amp;quot;
    elog &amp;quot;    eselect postgresql set &amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, the developer warns the administrator that, if an upgrade of the
package from version 0.4 or older occurred, an additional action needs
to be taken. For others, he informs the administrators how to mark the
proper active PostgreSQL slot (using the &lt;code&gt;elog&lt;/code&gt; methods).&lt;/p&gt;
&lt;p&gt;Portage will save this information by default in &lt;code&gt;/var/log/portage/elog&lt;/code&gt;
as separate files for each deployment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ ls /var/log/portage/elog/*eselect-postgres*
/var/log/portage/elog/app-admin:eselect-postgresql-1.0.10:20130818-184756.log
/var/log/portage/elog/app-admin:eselect-postgresql-1.2.0:20130915-131631.log
/var/log/portage/elog/app-admin:eselect-postgresql-1.2.0:20130915-200851.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If &lt;code&gt;FEATURES="split-elog"&lt;/code&gt; is set in your &lt;code&gt;make.conf&lt;/code&gt; file, then the
elog files will be stored in separate category subdirectories. Below is
the content of such a single file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ cat /var/log/portage/elog/app-admin\:eselect-postgresql-1.0.10\:20130818-184756.log
INFO: setup
Package:    app-admin/eselect-postgresql-1.0.10
Repository: gentoo
Maintainer: titanofold@gentoo.org postgresql
USE:        abi_x86_64 amd64 elibc_glibc kernel_linux multilib selinux userland_GNU
FEATURES:   preserve-libs sandbox selinux sesandbox
WARN: postinst
If you are updating from app-admin/eselect-postgresql-0.4 or older, run:

    eselect postgresql update

To get your system in a proper state.
LOG: postinst
You should set your desired PostgreSQL slot:
    eselect postgresql list
    eselect postgresql set &amp;lt;slot&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the file, package information is provided, and each set of logging
paragraphs is accompanied with information where in the build process
the logging came up. For instance, &lt;code&gt;WARN: postinst&lt;/code&gt; sais that the
following text is through the &lt;code&gt;ewarn&lt;/code&gt; method in the post install phase
of the package installation process.&lt;/p&gt;
&lt;p&gt;By default Portage logs this, but you can ask it to mail the logs as
well. For more information about that, check the handbook link earlier
and look for the &lt;code&gt;PORTAGE_ELOG_SYSTEM&lt;/code&gt; and &lt;code&gt;PORTAGE_ELOG_MAIL*&lt;/code&gt;
variables. Or look at &lt;strong&gt;man make.conf&lt;/strong&gt; which also contains all the
information needed.&lt;/p&gt;
&lt;p&gt;Now, this only pertains to the specific logging that ebuild maintainers
added in the packages. But what if you want to keep track of all the
build logs? In that case, you need to define &lt;code&gt;PORT_LOGDIR&lt;/code&gt; in your
&lt;code&gt;make.conf&lt;/code&gt; file. This variable has to point to a location where Portage
(which usually runs as the &lt;code&gt;portage&lt;/code&gt; Linux user) has write access to and
where it is allowed to store the build logs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ grep PORT_LOGDIR /etc/portage/make.conf 
PORT_LOGDIR=&amp;quot;/var/log/portage&amp;quot;
~$ ls -ldZ /var/log/portage/
drwxrwsr-x. 3 portage portage system_u:object_r:portage_log_t 679936 Sep 24 13:12 /var/log/portage/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the variable set, build logs will be provided for each emerge (and
unmerge) operation of the package. These logs contain everything shown
on the terminal during a build process. Of course, this directory will
grow considerably in size so it is wise to properly handle old log
files. You can use logrotate for this, or just a single cronjob that
cleans up log files older than say 6 months. But Portage also provides
this functionality. If you set &lt;code&gt;FEATURES="clean-logs"&lt;/code&gt; in your
&lt;code&gt;make.conf&lt;/code&gt; file, then all log files older than 7 days will be removed
from the system. You can fine-tune this by setting &lt;code&gt;PORT_LOGDIR_CLEAN&lt;/code&gt;
to the command you want executed. Its default value can be found in the
&lt;code&gt;/usr/share/portage/config/make.globals&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;If you set &lt;code&gt;PORT_LOGDIR&lt;/code&gt;, be aware that the elog files (described at the
beginning) will be stored in &lt;code&gt;${PORT_LOGDIR}/elog&lt;/code&gt;. Similar to the
elogging, build logging can also be done in category subdirectories. If
&lt;code&gt;FEATURES="split-log"&lt;/code&gt; is set, the build logs will be stored in
&lt;code&gt;${PORT_LOGDIR}/build/&amp;lt;category&amp;gt;&lt;/code&gt; instead of &lt;code&gt;${PORT_LOGDIR}&lt;/code&gt; directly.&lt;/p&gt;
&lt;p&gt;Hopefully this post brings some users closer to this nice feature of
Portage.&lt;/p&gt;</content><category term="Gentoo"></category><category term="elog"></category><category term="Gentoo"></category><category term="logging"></category><category term="portage"></category></entry><entry><title>Gentoo Hardened progress report</title><link href="http://blog.siphos.be/2013/08/gentoo-hardened-progress-report/" rel="alternate"></link><published>2013-08-29T20:27:00+02:00</published><updated>2013-08-29T20:27:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-08-29:/2013/08/gentoo-hardened-progress-report/</id><summary type="html">&lt;p&gt;Today, we had our monthly online meeting to discuss the progress amongst
the various Gentoo Hardened projects. As usual, here is a small
write-up.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Lead election&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As every year, we also reviewed the current project leads. No surprises
here, everybody is happy with the current leads so they are re-elected â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today, we had our monthly online meeting to discuss the progress amongst
the various Gentoo Hardened projects. As usual, here is a small
write-up.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Lead election&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As every year, we also reviewed the current project leads. No surprises
here, everybody is happy with the current leads so they are re-elected
for another term. We did have two candidates for the lead position, but
even the other candidate vote for Zorry - so we had a unanimous vote ;-)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GCC version 4.8.1 will be unmasked pretty soon, and the &lt;code&gt;hardenedno*&lt;/code&gt;
specs on it will work. However, there is still no progress on the asan
(Address Sanitizer) support together with UDEREF. As mentioned in a
previous post, UDEREF "reduces" the address space a bit which doesn't
play well with asan. Still, it isn't inevitable, since PowerPC also has
a reduced address space and so does Windows. So perhaps we can use the
same model for UDEREF enabled kernels? We'll send the suggestion and the
already-existing fixes upstream and hope for the best.&lt;/p&gt;
&lt;p&gt;In GCC 4.8.1, the &lt;code&gt;-fstack-check&lt;/code&gt; option might be enabled by default,
but the question is for which architectures and platforms. We know a few
packages, such as &lt;em&gt;ffmpeg&lt;/em&gt; and &lt;em&gt;libav&lt;/em&gt; have problems with it. In those
cases, the ebuild will be modified to use &lt;code&gt;-fno-stack-check&lt;/code&gt; (if
hardened). We opt to enable it for all as we don't really expect much
(if any) breakage that can't be dealt with swiftly.&lt;/p&gt;
&lt;p&gt;Support for hardened uClibc is still going steadily. Blueness is heating
his room a bit with it, seeing that mips32r2 takes about 2 weeks to
build hardened and vanilla stages - he is using an Ubiquity router
station for this.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Kernel and Grsecurity/PaX&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Due to some boot freezes, as explained in bugs
&lt;a href="https://bugs.gentoo.org/482010"&gt;482010&lt;/a&gt; and
&lt;a href="https://bugs.gentoo.org/481790"&gt;481790&lt;/a&gt;, we don't have a stable 3.10.x
kernel yet. However, most of the issues should be resolved and we're
waiting for confirmation, so we can be looking at a stable 3.10.x kernel
soon.&lt;/p&gt;
&lt;p&gt;The 3.10 kernel will probably not be a long-term support kernel for PaX
and Grsecurity - such LTS kernel will be picked next year, most likely
the same kernel version that Ubuntu LTS settles on.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SELinux&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A small update on &lt;code&gt;policycoreutils&lt;/code&gt; has been made that updates &lt;strong&gt;rlpkg&lt;/strong&gt;
and &lt;strong&gt;selocal&lt;/strong&gt;. Other than that, our policies are in nice shape. A new
revision will be pushed to the tree soon.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Integrity&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;On the Integrity side, recent kernels support custom IMA policies
(again) so our documentation is accurate again. Next to IMA/EVM, I'll be
working on documentation for cryptographically signed kernel module
support soon as well as SCAP-based security baselines for Gentoo.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Profiles&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Blueness added a MUSL-based Gentoo profile (&lt;code&gt;hardened/linux/musl&lt;/code&gt;). Musl
is an even more slim libc and its profile is extremely experimental for
now. The profile structure is still a bit off though, a reorganization
will be suggested soon so that the profile inheritance is clear and
predictable, starting off with a non-hardened one
(&lt;code&gt;default/linux/{uclibc,musl}&lt;/code&gt;) and then a hardened specific one that
inherits from the default.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Documentation&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://wiki.gentoo.org/wiki/Project:Hardened"&gt;Gentoo Hardened
project&lt;/a&gt; now has its main
project page on the &lt;a href="https://wiki.gentoo.org"&gt;Gentoo Wiki&lt;/a&gt;, and all
(most) documentation is moved to there as well for the Gentoo Hardened
subprojects.&lt;/p&gt;
&lt;p&gt;I also explained to the folks that I have authored a book on SELinux
System Administration (for Packt Publishing), which was why I was less
active the last few months. However, that is now done so I'm back on
track. More information about the book follows later on my blog ;-)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Media&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And as usual, klondike has been tweeting the entire meeting through our
&lt;code&gt;@GentooHardened&lt;/code&gt; twitter account ;-)&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="hardened"></category><category term="irc"></category><category term="meeting"></category><category term="minutes"></category><category term="progress_report"></category><category term="report"></category></entry><entry><title>Why our policies don't like emerge --config</title><link href="http://blog.siphos.be/2013/08/why-our-policies-dont-like-emerge-config/" rel="alternate"></link><published>2013-08-23T11:53:00+02:00</published><updated>2013-08-23T11:53:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-08-23:/2013/08/why-our-policies-dont-like-emerge-config/</id><summary type="html">&lt;p&gt;One of the features that Portage provides is to have post-processing
done on request of the administrator for certain packages. For instance,
for the &lt;code&gt;dev-db/postgresql-server&lt;/code&gt; package we can call its
&lt;code&gt;pkg_config()&lt;/code&gt; phase to create the PostgreSQL instance and configure it
so that the configuration of the database is stored â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the features that Portage provides is to have post-processing
done on request of the administrator for certain packages. For instance,
for the &lt;code&gt;dev-db/postgresql-server&lt;/code&gt; package we can call its
&lt;code&gt;pkg_config()&lt;/code&gt; phase to create the PostgreSQL instance and configure it
so that the configuration of the database is stored in
&lt;code&gt;/etc/postgresql-9.2&lt;/code&gt; rather than together with the data files.&lt;/p&gt;
&lt;p&gt;When you run Gentoo with SELinux however, you might already have noticed
that this doesn't work. The reason is that, whenever an administrator
calls &lt;strong&gt;emerge&lt;/strong&gt;, the process (and by default its child processes) will
run in a confined domain called &lt;code&gt;portage_t&lt;/code&gt;. The domain is still quite
privileged, but not as privileged as the administrator domain
&lt;code&gt;sysadm_t&lt;/code&gt;. It holds the rights to build software and install files,
directories and other things on the file system. But it does not support
switching users for instance, which is what the PostgreSQL
&lt;code&gt;pkg_config()&lt;/code&gt; does: it wants to run a certain command as the &lt;code&gt;postgres&lt;/code&gt;
user, which is prohibited by SELinux.&lt;/p&gt;
&lt;p&gt;I'm not sure yet how to tackle this properly. One thing is that I might
update Portage to run in the user domain by default, and transition
dynamically towards the proper domains according to the task(s) it is
executing. We already do this for building software (where we transition
to a &lt;code&gt;portage_sandbox_t&lt;/code&gt; confined domain), perhaps it can be expanded to
support transitioning to &lt;code&gt;portage_t&lt;/code&gt; when it isn't running the
&lt;code&gt;pkg_config()&lt;/code&gt; phase. But that means injecting (more) SELinux-specific
code in Portage, something I'd rather not do (introduces additional
complexity and maintenance).&lt;/p&gt;
&lt;p&gt;Another possibility would be to have administrators explicitly state
that no transition should occur, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# runcon -t sysadm_t emerge --config =dev-db/postgresql-server-9.2.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With a minor addition to the policy, this gave me a good hope... until I
noticed that &lt;strong&gt;emerge&lt;/strong&gt; underlyingly calls &lt;strong&gt;ebuild&lt;/strong&gt; and &lt;strong&gt;ebuild.sh&lt;/strong&gt;,
both labeled as &lt;code&gt;portage_exec_t&lt;/code&gt;, so these calls transition to
&lt;code&gt;portage_t&lt;/code&gt; again.&lt;/p&gt;
&lt;p&gt;I'm going to look further into this - there are quite a few options
still open.&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="pkg_config"></category><category term="portage"></category><category term="selinux"></category></entry><entry><title>Using CUSTOM_BUILDOPT in refpolicy for USE flag-alike functionality?</title><link href="http://blog.siphos.be/2013/08/using-custom_buildopt-in-refpolicy-for-use-flag-alike-functionality/" rel="alternate"></link><published>2013-08-16T09:17:00+02:00</published><updated>2013-08-16T09:17:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-08-16:/2013/08/using-custom_buildopt-in-refpolicy-for-use-flag-alike-functionality/</id><summary type="html">&lt;p&gt;As you are probably aware, Gentoo uses the &lt;a href="http://oss.tresys.com/projects/refpolicy/"&gt;reference
policy&lt;/a&gt; as its base for
SELinux policies. Yes, we do customize it and not everything is already
pushed upstream (for instance, our approach to use &lt;code&gt;xdg_*_home_t&lt;/code&gt;
customizable types to further restrict user application access has been
sent up for comments â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;As you are probably aware, Gentoo uses the &lt;a href="http://oss.tresys.com/projects/refpolicy/"&gt;reference
policy&lt;/a&gt; as its base for
SELinux policies. Yes, we do customize it and not everything is already
pushed upstream (for instance, our approach to use &lt;code&gt;xdg_*_home_t&lt;/code&gt;
customizable types to further restrict user application access has been
sent up for comments a few times but we still need to iron it out
further) but all in all, we're pretty close to the upstream releases.
This is also visible when there are changes upstream as we very easily
integrate them back in our repository.&lt;/p&gt;
&lt;p&gt;But there are still a few things that I want to implement further, and
one of these things is perhaps too specific for Gentoo but would benefit
us (security-wise) in great detail: enabling domain privileges based on
USE flags. Allow me to quickly use an example to make this more
tangible.&lt;/p&gt;
&lt;p&gt;Consider the MPlayer application. As a media application, it of course
offers support for ALSA and PulseAudio (amongst other things). In the
SELinux policy, support for (and thus privileges related to) ALSA and
PulseAudio is handled through &lt;em&gt;optional_policy&lt;/em&gt; statements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;optional_policy(`
  pulseaudio_tmpfs_content(mplayer_tmpfs_t)
&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This means that the rules defined in &lt;em&gt;pulseaudio_tmpfs_content&lt;/em&gt; are
executed if the dependencies match:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;interface(`pulseaudio_tmpfs_content&amp;#39;,`
        gen_require(`
                attribute pulseaudio_tmpfsfile;
        &amp;#39;)

        typeattribute $1 pulseaudio_tmpfsfile;
&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the &lt;code&gt;pulseaudio_tmpfsfile&lt;/code&gt; attribute exists, then the
&lt;code&gt;mplayer_tmpfs_t&lt;/code&gt; type gets the &lt;code&gt;pulseaudio_tmpfsfile&lt;/code&gt; attribute
assigned to it.&lt;/p&gt;
&lt;p&gt;This is flexible, because if the server/workstation does not use
PulseAudio, then in Gentoo, no pulseaudio SELinux module will be loaded
and thus the attribute will not exist. However, Gentoo tries to be a bit
more flexible in this - it is very well possible to have PulseAudio
installed, but disable PulseAudio support in MPlayer (build mplayer with
USE="-pulseaudio"). The current definitions in the policy do not support
this flexibility: if the pulseaudio module is loaded, then the
privileges become active.&lt;/p&gt;
&lt;p&gt;One way SELinux supports a more flexible approach is to use conditionals
in the policy. One could create booleans that administrators can toggle
to enable / disable SELinux rules. For instance, in the mplayer policy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;tunable_policy(`allow_mplayer_execstack&amp;#39;,`
        allow mencoder_t self:process { execmem execstack };
&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If an administrator toggles the &lt;code&gt;allow_mplayer_execstack&lt;/code&gt; boolean to
"on", then the mentioned &lt;code&gt;allow&lt;/code&gt; rule becomes active.&lt;/p&gt;
&lt;p&gt;Sadly, this approach is not fully usable for USE driven decisions. Not
all rules can be enclosed in &lt;code&gt;tunable_policy&lt;/code&gt; statements, and &lt;a href="http://oss.tresys.com/pipermail/refpolicy/2013-July/006452.html"&gt;assigning
attributes to a
type&lt;/a&gt;
is one of them (cfr our pulseaudio example). A recent discussion on the
reference policy mailinglist gave me two ideas to investigate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See if we can support CIL (a new language for SELinux
    policy definitions) where such an approach would be easier&lt;/li&gt;
&lt;li&gt;Use build-time decisions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post, I want to go through the &lt;em&gt;build-time decisions&lt;/em&gt; idea. The
reference policy supports build-time options using &lt;em&gt;ifdef&lt;/em&gt; constructs.
These look at parameters provided by the build system (M4/Makefile
based) to see if rules need to be activated or not. For type attribute
declarations, this is a valid approach. So one idea would be to
transform USE flags, if they are set, into &lt;code&gt;use_${USEFLAG}&lt;/code&gt;, and make
decisions based on this in the policy code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ifdef(`use_pulseaudio&amp;#39;,`
  optional_policy(`
    pulseaudio_tmpfs_content(mplayer_tmpfs_t)
  &amp;#39;)
&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can add in the USE flags, if set, through the &lt;code&gt;CUSTOM_BUILDOPT&lt;/code&gt;
parameter that the reference policy provides. So introducing this is not
that difficult. The only thing I'm currently a bit weary about is the
impact on the policy files themselves (which is why I haven't done this
already) and the fact that USE flags on the "real" package are not know
to policy packages. In other words, if a user explicitly marks
&lt;code&gt;USE="-pulseaudio"&lt;/code&gt; on mplayer, but has &lt;code&gt;USE="pulseaudio"&lt;/code&gt; set as
general value, then the &lt;code&gt;selinux-mplayer&lt;/code&gt; package will still have
pulseaudio enabled.&lt;/p&gt;
&lt;p&gt;Still, I do like the idea. It would make it more consistent with what
Gentoo aims to do: if you do not want a certain support/feature in the
code, then why would the policy still have to allow it? With the proper
documentation towards administrators, I think this would be a good
approach.&lt;/p&gt;</content><category term="Gentoo"></category><category term="boolean"></category><category term="Gentoo"></category><category term="policy"></category><category term="selinux"></category><category term="use"></category><category term="useflag"></category></entry><entry><title>And now, 31 days later...</title><link href="http://blog.siphos.be/2013/08/and-now-31-days-later/" rel="alternate"></link><published>2013-08-01T22:43:00+02:00</published><updated>2013-08-01T22:43:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-08-01:/2013/08/and-now-31-days-later/</id><summary type="html">&lt;p&gt;... the &lt;a href="http://www.gentoo.org/proj/en/hardened"&gt;Gentoo Hardened&lt;/a&gt; team
had its monthly online meeting again ;-)&lt;/p&gt;
&lt;p&gt;On the agenda were the usual suspects, such as the &lt;em&gt;toolchain&lt;/em&gt;. In this
category, Zorry mentioned that he has a fix for GCC 4.8.1 for the
&lt;code&gt;hardenedno*&lt;/code&gt; and vanilla &lt;code&gt;gcc-config&lt;/code&gt; options which will be added to
the tree â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;... the &lt;a href="http://www.gentoo.org/proj/en/hardened"&gt;Gentoo Hardened&lt;/a&gt; team
had its monthly online meeting again ;-)&lt;/p&gt;
&lt;p&gt;On the agenda were the usual suspects, such as the &lt;em&gt;toolchain&lt;/em&gt;. In this
category, Zorry mentioned that he has a fix for GCC 4.8.1 for the
&lt;code&gt;hardenedno*&lt;/code&gt; and vanilla &lt;code&gt;gcc-config&lt;/code&gt; options which will be added to
the tree after some more testing. The problem is that with GCC 4.8,
certain settings need to be set sooner than before (in the code path),
which is what the fix focuses on. The ASAN issue is still unresolved,
but otherwise GCC 4.8 is working fine.&lt;/p&gt;
&lt;p&gt;On &lt;em&gt;SELinux&lt;/em&gt;, the policycoreutils package has been bumped to include
support for &lt;code&gt;mcstrans&lt;/code&gt;, a translation daemon that visualizes humanly
readable strings instead of the standard sensitivity/category sets in
case of MCS/MLS policies.&lt;/p&gt;
&lt;p&gt;Regarding documentation, the wiki team (most notably a3li) is working
hard to support project pages on the &lt;a href="https://wiki.gentoo.org"&gt;Gentoo
Wiki&lt;/a&gt;. Once we can, we will be moving our
project page with all related documentation to the wiki, allowing for
easier documentation development and a more modern look. To support
this, an XML-to-wiki stylesheet is available that translates ProjectXML
and GuideXML to the wiki language.&lt;/p&gt;
&lt;p&gt;During the meeting, we also mentioned the stabilization policy (or at
least, no-longer-stabilization) of the vanilla sources (plain kernel.org
Linux kernel sources). This doesn't immediately effect the hardened
project, but is important to know nonetheless, especially for users of
hardened technologies that are in the main kernel already (like SELinux
or IMA/EVM) as they have to be aware to either use the latest
(regardless of the keywords in use) or switch to gentoo-sources or
(preferably) hardened-sources.&lt;/p&gt;
&lt;p&gt;For uclibc support, the stages will be provided every 2 months rather
than every month as this is a resource-intensive process that isn't
fully automated yet (except for amd64 and x86 which are automated).&lt;/p&gt;
&lt;p&gt;Finally, on PaX and grSecurity support, the XATTR patch for tmpfs is now
in the kernel, and the problem about loosing PaX markings during
installation is fixed as Portage (2.1.12.9 and higher) now preserves the
flags during installation (a wrapper on &lt;code&gt;install&lt;/code&gt; is used that preserves
&lt;code&gt;usr.pax.flags&lt;/code&gt;).&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="grsecurity"></category><category term="hardened"></category><category term="irc"></category><category term="irl"></category><category term="meeting"></category><category term="minutes"></category><category term="pax"></category><category term="project"></category><category term="selinux"></category><category term="toolchain"></category></entry><entry><title>Moving Gentoo docs to the wiki</title><link href="http://blog.siphos.be/2013/07/moving-gentoo-docs-to-the-wiki/" rel="alternate"></link><published>2013-07-28T11:22:00+02:00</published><updated>2013-07-28T11:22:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-07-28:/2013/07/moving-gentoo-docs-to-the-wiki/</id><summary type="html">&lt;p&gt;Slowly but surely Gentoo documentation guides are being moved to the
&lt;a href="https://wiki.gentoo.org"&gt;Gentoo Wiki&lt;/a&gt;. Thanks to the translation
support provided by the infrastructure, all "reasons" not to go forward
with this have been resolved. At first, I'm focusing on documentation
with open bugs that have not been picked up (usually due â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Slowly but surely Gentoo documentation guides are being moved to the
&lt;a href="https://wiki.gentoo.org"&gt;Gentoo Wiki&lt;/a&gt;. Thanks to the translation
support provided by the infrastructure, all "reasons" not to go forward
with this have been resolved. At first, I'm focusing on documentation
with open bugs that have not been picked up (usually due to (human)
resource limits), but other documents will follow.&lt;/p&gt;
&lt;p&gt;Examples of already moved documents are the &lt;a href="https://wiki.gentoo.org/wiki/Xorg/Configuration"&gt;Xorg configuration
guide&lt;/a&gt;, the &lt;a href="https://wiki.gentoo.org/wiki/GCC_optimization"&gt;GCC
optimization guide&lt;/a&gt;,
&lt;a href="https://wiki.gentoo.org/wiki/UTF-8"&gt;UTF-8&lt;/a&gt; and &lt;a href="https://wiki.gentoo.org/wiki/User-mode_Linux/System_testing_with_UML"&gt;System testing with
UML&lt;/a&gt;.
Many more have been moved as well.&lt;/p&gt;
&lt;p&gt;The migrations are assisted by a conversion script that translates
GuideXML into wiki style content, although manual corrections remain
needed. For instance, all &lt;code&gt;&amp;lt;pre caption="..."&amp;gt;&lt;/code&gt; stuff is changed into
&lt;code&gt;{{Code|...}}&lt;/code&gt; even though the Wiki has several templates for code, such
as &lt;code&gt;{{Kernel|...}}&lt;/code&gt; for kernel configurations, &lt;code&gt;{{RootCmd|...}}&lt;/code&gt; for
commands ran as a privileged user and &lt;code&gt;{{Cmd|...}}&lt;/code&gt; for unprivileged
user commands.&lt;/p&gt;
&lt;p&gt;I updated the &lt;a href="http://www.gentoo.org/doc/en/list.xml"&gt;documentation
list&lt;/a&gt; on the main Gentoo site to
reflect the movement of documents as well, as this list will be slowly
shrinking.&lt;/p&gt;</content><category term="Documentation"></category><category term="docs"></category><category term="documentation"></category><category term="gdp"></category><category term="Gentoo"></category><category term="wiki"></category></entry><entry><title>Hardening is our business... new monthly report ;-)</title><link href="http://blog.siphos.be/2013/06/hardening-is-our-business-new-monthly-report/" rel="alternate"></link><published>2013-06-27T23:03:00+02:00</published><updated>2013-06-27T23:03:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-06-27:/2013/06/hardening-is-our-business-new-monthly-report/</id><summary type="html">&lt;p&gt;We're back with another report on the &lt;a href="http://www.gentoo.org/proj/en/hardened"&gt;Gentoo
Hardened&lt;/a&gt; project. Please excuse
my brevity, as you've noticed I'm not that active (yet) due to work on
an external project - I'll be back mid-July though. I promise.&lt;/p&gt;
&lt;p&gt;On the &lt;em&gt;Toolchain&lt;/em&gt; side, GCC 4.8.1 is in the tree and has â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;We're back with another report on the &lt;a href="http://www.gentoo.org/proj/en/hardened"&gt;Gentoo
Hardened&lt;/a&gt; project. Please excuse
my brevity, as you've noticed I'm not that active (yet) due to work on
an external project - I'll be back mid-July though. I promise.&lt;/p&gt;
&lt;p&gt;On the &lt;em&gt;Toolchain&lt;/em&gt; side, GCC 4.8.1 is in the tree and has the GCC plugin
header fix. Also, for IA64 and ARM, the necessary PIE patches are
available as well to make this work on those architectures too.&lt;/p&gt;
&lt;p&gt;For uclibc, blueness is continuing the necessary support for everything
so far. He has also added mips64 n32 uclibc because new router boards
use this.&lt;/p&gt;
&lt;p&gt;In his time, blueness is also playing with a uclibc-powered desktop and
another C library called &lt;a href="http://www.musl-libc.org/"&gt;musl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the &lt;em&gt;Kernel&lt;/em&gt;, &lt;em&gt;grSecurity&lt;/em&gt; and &lt;em&gt;PaX&lt;/em&gt; side, we are having troubles
with the 3.8+ kernels and UEFI machines when the machines have ltitle
memory available (for instance when it is limited with &lt;code&gt;mem=&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The PaX extended attribute support is still on-going, mainly because we
need to have support for the &lt;code&gt;user.pax&lt;/code&gt; attributes in common tools like
&lt;strong&gt;install&lt;/strong&gt;, which is heavily used in Gentoo's ebuilds. The merge phase,
where the data is moved from the image location to the root, has been
supporting xattr moves for a while thanks to zmedico and arfrever, but
other installation phases still needed to be fixed or worked around. We
tried with a common patch on this, but there was little interest in this
approach, so we settled with a wrapper around &lt;strong&gt;install&lt;/strong&gt; inside of
Portage. This will be soon released and we again have full end-to-end
xattr pax flag support.&lt;/p&gt;
&lt;p&gt;On the &lt;em&gt;SELinux&lt;/em&gt; support, the latest userland and policy releases have
been stabilized in the Gentoo tree.&lt;/p&gt;
&lt;p&gt;On the &lt;em&gt;Profiles&lt;/em&gt;, blueness added a musl subprofile for testing of the
musl C library.&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="hardened"></category><category term="irc"></category><category term="meeting"></category><category term="progress"></category></entry><entry><title>Gentoo Hardened spring notes</title><link href="http://blog.siphos.be/2013/05/gentoo-hardened-spring-notes/" rel="alternate"></link><published>2013-05-16T22:54:00+02:00</published><updated>2013-05-16T22:54:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-05-16:/2013/05/gentoo-hardened-spring-notes/</id><summary type="html">&lt;p&gt;We got back together on the &lt;code&gt;#gentoo-hardened&lt;/code&gt; chat channel to discuss
the progress of &lt;a href="http://www.gentoo.org/proj/en/hardened"&gt;Gentoo
Hardened&lt;/a&gt;, so it's time for
another write-up of what was said.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GCC 4.8.1 will be out soon, although nothing major has occurred with it
since the last meeting. There is a plugin â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;We got back together on the &lt;code&gt;#gentoo-hardened&lt;/code&gt; chat channel to discuss
the progress of &lt;a href="http://www.gentoo.org/proj/en/hardened"&gt;Gentoo
Hardened&lt;/a&gt;, so it's time for
another write-up of what was said.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GCC 4.8.1 will be out soon, although nothing major has occurred with it
since the last meeting. There is a plugin header install problem in 4.8
and its not certain that the (trivial) fix is in 4.8.1, but it certainly
is inside Gentoo's release.&lt;/p&gt;
&lt;p&gt;Blueness is also (still, and hopefully for a long time ;-) maintaining
the uclibc hardened related toolchain aspects.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Kernel and grSecurity/PaX&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The further progress on the XATTR_PAX migration was put on a lower
level the past few weeks due to busy, busy... very busy weeks (but this
was announced and known in advance). We still need to do XATTR copying
in &lt;em&gt;install&lt;/em&gt; for packages that do pax markings before &lt;em&gt;src_install()&lt;/em&gt;
and include the &lt;code&gt;user.pax&lt;/code&gt; XATTR patch in the gentoo-sources kernel.
This will silence the errors for non-hardened users and fix the loss of
XATTR markings for those packages that do pax-mark before install.&lt;/p&gt;
&lt;p&gt;The set then needs to be documented further and tested on vanilla and
hardened systems.&lt;/p&gt;
&lt;p&gt;Zorry asked if a separate script can be provided for those ebuilds that
directly call &lt;strong&gt;paxctl&lt;/strong&gt;. These ebuilds might want to switch to the
eclass, but if they need to call &lt;strong&gt;paxctl&lt;/strong&gt; or similar directly (for
instance because the result is immediately used for further building), a
separate script or tool should be made available. Blueness will look
into this.&lt;/p&gt;
&lt;p&gt;On &lt;code&gt;hardened-sources&lt;/code&gt;, we are now with stable 2.6.32-r160, 3.2.42-r1 and
3.8.6 due to some vulnerabilities in earlier versions (in networking
code). There is still some bug (nfs-related) that is fixed in 3.2.44 so
that part might need a bump as well soon.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SELinux&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The
&lt;a href="http://blog.siphos.be/2013/04/introducing-selocal-for-small-selinux-policy-enhancements/"&gt;selocal&lt;/a&gt;
command is now available for Gentoo SELinux users, allowing them to
easily enhance the policy without having to maintain their own SELinux
policy modules (the script is a wrapper that does all that).&lt;/p&gt;
&lt;p&gt;The setools package now also uses the &lt;a href="http://blog.siphos.be/2013/04/sloting-the-old-swig-1/"&gt;SLOT'ed
swig&lt;/a&gt;, so no more
dependency breakage.&lt;/p&gt;
&lt;p&gt;On SELinux userspace and policy, both have seen a new release last
month, and both are already in the Gentoo portage tree.&lt;/p&gt;
&lt;p&gt;Finally, the SELinux policy ebuilds now also call
&lt;a href="http://blog.siphos.be/2013/05/overriding-the-default-selinux-policies/"&gt;epatch_user&lt;/a&gt;
so users can customize the policies even further without having to copy
ebuilds to their overlay.&lt;/p&gt;
&lt;p&gt;Now that &lt;strong&gt;tar&lt;/strong&gt; supports XATTR well, we might want to look into SELinux
stages again. Jmbsvicetto did some work on that, but the builds failed
during stage1. We'll look into that later.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Integrity&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Nothing much to say, we're waiting a bit until the patches proposed by
the IMA team are merged in the main kernel.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Profiles&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Two no-multilib fixes have been applied to the
&lt;code&gt;hardened/amd64/no-multilib&lt;/code&gt; profiles. One was a QA issue and quickly
resolved, the other is due to the profile stacking within Gentoo
profiles, where we missed a profile and thus were missing a few masks
defined in that (missed) profile. But including the profile creates a
lot of duplicates again, so we are going to copy the masks across until
the duplicates are resolved in the other profiles.&lt;/p&gt;
&lt;p&gt;Blueness will also clean up the experimental &lt;code&gt;13.0&lt;/code&gt; directory since all
hardened profiles now follow 13.0.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Docs&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The latest changes on SELinux have been added to the Gentoo SELinux
handbook. Also, I've been slowly (but surely) adding topics to the
&lt;a href="https://wiki.gentoo.org/wiki/SELinux/Tutorials"&gt;SELinux tutorials
listing&lt;/a&gt; on the Gentoo
wiki.&lt;/p&gt;
&lt;p&gt;The grSecurity 2 document is very much out of date, blueness hopes to
put some time in fixing that soon.&lt;/p&gt;
&lt;p&gt;So that's about it for the short write-up. Zorry will surely post the
log later on the appropriate channels. Good work done (again) by all
team members!&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="hardened"></category><category term="irc"></category><category term="meeting"></category><category term="monthly"></category><category term="online"></category></entry><entry><title>Overriding the default SELinux policies</title><link href="http://blog.siphos.be/2013/05/overriding-the-default-selinux-policies/" rel="alternate"></link><published>2013-05-15T03:50:00+02:00</published><updated>2013-05-15T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-05-15:/2013/05/overriding-the-default-selinux-policies/</id><summary type="html">&lt;p&gt;Extending SELinux policies with additional rules is easy. As SELinux
uses a &lt;em&gt;deny by default&lt;/em&gt; approach, all you need to do is to &lt;a href="https://wiki.gentoo.org/wiki/SELinux/Tutorials/Creating_your_own_policy_module_file"&gt;create a
policy
module&lt;/a&gt;
that contains the additional (allow) rules, load that and you're all
set. But what if you want to remove some rules?&lt;/p&gt;
&lt;p&gt;Well, sadly â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Extending SELinux policies with additional rules is easy. As SELinux
uses a &lt;em&gt;deny by default&lt;/em&gt; approach, all you need to do is to &lt;a href="https://wiki.gentoo.org/wiki/SELinux/Tutorials/Creating_your_own_policy_module_file"&gt;create a
policy
module&lt;/a&gt;
that contains the additional (allow) rules, load that and you're all
set. But what if you want to remove some rules?&lt;/p&gt;
&lt;p&gt;Well, sadly, SELinux does not support deny rules. Once an allow rule is
loaded in memory, it cannot be overturned anymore. Yes, you can disable
the module itself that provides the rules, but you cannot selectively
disable rules. So what to do?&lt;/p&gt;
&lt;p&gt;Generally, you can disable the module that contains the rules you want
to disable, and load a custom module that defines everything the
original module did, except for those rules you don't like. For
instance, if you do not want the &lt;code&gt;skype_t&lt;/code&gt; domain to be able to
read/write to the video device, create your own skype-providing module
(&lt;em&gt;myskype&lt;/em&gt;) with the exact same content (except for the module name at
the first line) as the original skype module, except for the video
device:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dev_read_sound(skype_t)
# dev_read_video_dev(skype_t)
dev_write_sound(skype_t)
# dev_write_video_dev(skype_t)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Load in this policy, and you now have the &lt;code&gt;skype_t&lt;/code&gt; domain without the
video access. You will get post-install failures when Gentoo pushes out
an update to the policy though, since it will attempt to reload the
&lt;code&gt;skype.pp&lt;/code&gt; file (through the &lt;code&gt;selinux-skype&lt;/code&gt; package) and fail because
it declares types and attributes already provided (by &lt;em&gt;myskype&lt;/em&gt;). You
can &lt;a href="http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=3&amp;amp;chap=5#doc_chap1"&gt;exclude the
package&lt;/a&gt;
from being updated, which works as long as no packages depend on it. Or
live with the post-install failure ;-) But there might be a simpler
approach: &lt;em&gt;epatch_user&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Recently, I added in support for &lt;em&gt;epatch_user&lt;/em&gt; in the policy ebuilds.
This allows users to create patches against the policy source code that
we use and put them in &lt;code&gt;/etc/portage/patches&lt;/code&gt; in the directory of the
right category/package. For module patches, the working directory used
is within the &lt;code&gt;policy/modules&lt;/code&gt; directory of the policy checkout. For
base, it is below the policy checkout (in other words, the patch will
need to use the &lt;code&gt;refpolicy/&lt;/code&gt; directory base). But because of how
&lt;em&gt;epatch_user&lt;/em&gt; works, any patch taken from the base will work as it will
start stripping directories up to the fourth one.&lt;/p&gt;
&lt;p&gt;This approach is also needed if you want to exclude rules from
interfaces rather than from the &lt;code&gt;.te&lt;/code&gt; file: create a small patch and put
it in &lt;code&gt;/etc/portage/patches&lt;/code&gt; for the &lt;code&gt;sec-policy/selinux-base&lt;/code&gt; package
(as this provides the interfaces).&lt;/p&gt;</content><category term="Gentoo"></category><category term="ebuild"></category><category term="epatch_user"></category><category term="Gentoo"></category><category term="override"></category><category term="patch"></category><category term="policy"></category><category term="selinux"></category></entry><entry><title>Highlevel assessment of Cdorked and Gentoo Hardened/SELinux</title><link href="http://blog.siphos.be/2013/05/highlevel-assessment-of-cdorked-and-gentoo-hardenedselinux/" rel="alternate"></link><published>2013-05-14T03:50:00+02:00</published><updated>2013-05-14T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-05-14:/2013/05/highlevel-assessment-of-cdorked-and-gentoo-hardenedselinux/</id><summary type="html">&lt;p&gt;With all the
&lt;a href="http://www.welivesecurity.com/2013/05/07/linuxcdorked-malware-lighttpd-and-nginx-web-servers-also-affected/"&gt;reports&lt;/a&gt;
surrounding
&lt;a href="https://threatpost.com/attack-using-backdoored-apache-binaries-to-lead-to-blackhole-kit/"&gt;Cdorked&lt;/a&gt;,
I took a look at if SELinux and/or other Gentoo Hardened technologies
could reduce the likelihood that this infection occurs on your system.&lt;/p&gt;
&lt;p&gt;First of all, we don't know yet how the malware gets installed on the
server. We do know that the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;With all the
&lt;a href="http://www.welivesecurity.com/2013/05/07/linuxcdorked-malware-lighttpd-and-nginx-web-servers-also-affected/"&gt;reports&lt;/a&gt;
surrounding
&lt;a href="https://threatpost.com/attack-using-backdoored-apache-binaries-to-lead-to-blackhole-kit/"&gt;Cdorked&lt;/a&gt;,
I took a look at if SELinux and/or other Gentoo Hardened technologies
could reduce the likelihood that this infection occurs on your system.&lt;/p&gt;
&lt;p&gt;First of all, we don't know yet how the malware gets installed on the
server. We do know that the Apache binaries themselves are modified, so
the first thing to look at is to see if this risk can be reduced. Of
course, using an intrusion detection system like
&lt;a href="https://wiki.gentoo.org/wiki/AIDE"&gt;AIDE&lt;/a&gt; helps, but even with Gentoo's
&lt;strong&gt;qcheck&lt;/strong&gt; command you can test the integrity of the files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# qcheck www-servers/apache
Checking www-servers/apache-2.2.24 ...
  * 424 out of 424 files are good
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the binary is modified, this would result in something equivalent to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Checking www-servers/apache-2.2.24 ...
 MD5-DIGEST: /usr/sbin/apache2
  * 423 out of 424 files are good
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I don't know if the modified binary would otherwise work just fine, I
have not been able to find exact details on the infected binary to (in a
sandbox environment of course) analyze this further. Also, because we
don't know how they are installed, it is not easy to know if binaries
that you built yourself are equally likely to be modified/substituted or
if the attack checks checksums of the binaries against a known list.&lt;/p&gt;
&lt;p&gt;Assuming that it would run, then the infecting malware would need to set
the proper SELinux context on the file (if it overwrites the existing
binary, then the context is retained, otherwise it gets the default
context of &lt;code&gt;bin_t&lt;/code&gt;). If the context is wrong, then starting Apache
results in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apache2: Syntax error on line 61 of /etc/apache2/httpd.conf: Cannot load /usr/lib64/apache2/modules/mod_actions.so into server: /usr/lib64/apache2/modules/mod_actions.so: cannot open shared object file: Permission denied
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is because the modified binary stays in the calling domain context
(&lt;code&gt;initrc_t&lt;/code&gt;). If you use a targeted policy, then this will not present
itself as &lt;code&gt;initrc_t&lt;/code&gt; is an unconfined domain. But with strict policies,
&lt;code&gt;initrc_t&lt;/code&gt; is not allowed to read &lt;code&gt;httpd_modules_t&lt;/code&gt;. Even worse, the
remainder of SELinux protections don't apply anymore, since with
unconfined domains, all bets are off. That is why Gentoo focuses this
hard on using a strict policy.&lt;/p&gt;
&lt;p&gt;So, what if the binary runs in the proper domain? Well then, from the
articles I read, the malware can do a reverse connect. That means that
the domain will attempt to connect to an IP address provided by the
attacker (in a specifically crafted URL). For SELinux, this means that
the &lt;em&gt;name_connect&lt;/em&gt; permission is checked:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# sesearch -s httpd_t -c tcp_socket -p name_connect -ACTS
Found 20 semantic av rules:
   allow nsswitch_domain dns_port_t : tcp_socket { name_connect } ; 
DT allow httpd_t port_type : tcp_socket { name_connect } ; [ httpd_can_network_connect ]
DT allow httpd_t ftp_port_t : tcp_socket { name_connect } ; [ httpd_can_network_relay ]
DT allow httpd_t smtp_port_t : tcp_socket { name_connect } ; [ httpd_can_sendmail ]
DT allow httpd_t postgresql_port_t : tcp_socket { name_connect } ; [ httpd_can_network_connect_db ]
DT allow httpd_t oracledb_port_t : tcp_socket { name_connect } ; [ httpd_can_network_connect_db ]
DT allow httpd_t squid_port_t : tcp_socket { name_connect } ; [ httpd_can_network_relay ]
DT allow httpd_t mssql_port_t : tcp_socket { name_connect } ; [ httpd_can_network_connect_db ]
DT allow httpd_t kerberos_port_t : tcp_socket { name_connect } ; [ allow_kerberos ]
DT allow nsswitch_domain ldap_port_t : tcp_socket { name_connect } ; [ authlogin_nsswitch_use_ldap ]
DT allow httpd_t http_cache_port_t : tcp_socket { name_connect } ; [ httpd_can_network_relay ]
DT allow httpd_t http_port_t : tcp_socket { name_connect } ; [ httpd_can_network_relay ]
DT allow httpd_t http_port_t : tcp_socket { name_connect } ; [ httpd_graceful_shutdown ]
DT allow httpd_t mysqld_port_t : tcp_socket { name_connect } ; [ httpd_can_network_connect_db ]
DT allow httpd_t ocsp_port_t : tcp_socket { name_connect } ; [ allow_kerberos ]
DT allow nsswitch_domain kerberos_port_t : tcp_socket { name_connect } ; [ allow_kerberos ]
DT allow httpd_t pop_port_t : tcp_socket { name_connect } ; [ httpd_can_sendmail ]
DT allow nsswitch_domain ocsp_port_t : tcp_socket { name_connect } ; [ allow_kerberos ]
DT allow httpd_t gds_db_port_t : tcp_socket { name_connect } ; [ httpd_can_network_connect_db ]
DT allow httpd_t gopher_port_t : tcp_socket { name_connect } ; [ httpd_can_network_relay ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So by default, the Apache (&lt;code&gt;httpd_t&lt;/code&gt;) domain is allowed to connect to
DNS port (to resolve hostnames). All other &lt;em&gt;name_connect&lt;/em&gt; calls depend
on SELinux booleans (mentioned after it) that are by default disabled
(at least on Gentoo). Disabling hostname resolving is not really
feasible, so if the attacker uses a DNS port as port that the malware
needs to connect to, SELinux will not deny it (unless you use additional
networking constraints).&lt;/p&gt;
&lt;p&gt;Now, the reverse connect is an interesting feature of the malware, but
not the main one. The main focus of the malware is to redirect customers
to particular sites that can trick the user in downloading additional
(client) malware. Because this is done internally within Apache, SELinux
cannot deal with this. As a user, make sure you configure your browser
not to trust non-local iframes and such (always do this, not just
because there is a possible threat right now). The configuration of
Cdorked is a shared memory segment of Apache itself. Of course, since
Apache uses shared memory, the malware embedded within will also have
access to the shared memory. However, if this shared memory would need
to be accessed by third party applications (the malware seems to grant
read/write rights on everybody to this segment) SELinux will prevent
this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# sesearch -t httpd_t -c shm -ACTS
Found 2 semantic av rules:
   allow unconfined_domain_type domain : shm { create destroy getattr setattr read write associate unix_read unix_write lock } ; 
   allow httpd_t httpd_t : shm { create destroy getattr setattr read write associate unix_read unix_write lock } ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Only unconfined domains and the &lt;code&gt;httpd_t&lt;/code&gt; domain itself have access to
&lt;code&gt;httpd_t&lt;/code&gt; labeled shared memory.&lt;/p&gt;
&lt;p&gt;So what about IMA/EVM? Well, those will not help here since IMA checks
for integrity of files that were modified &lt;em&gt;offline&lt;/em&gt;. As the modification
of the Apache binaries is most likely done online, IMA would just accept
this.&lt;/p&gt;
&lt;p&gt;For now, it seems that a good system integrity approach is the most
effective until we know more about how the malware-infected binary is
written to the system in the first place (as this is better protected by
MAC controls like SELinux).&lt;/p&gt;</content><category term="Security"></category><category term="apache"></category><category term="cdorked"></category><category term="Gentoo"></category><category term="hardened"></category><category term="ima"></category><category term="selinux"></category></entry><entry><title>Gentoo metadata support for CPE</title><link href="http://blog.siphos.be/2013/05/gentoo-metadata-support-for-cpe/" rel="alternate"></link><published>2013-05-10T03:50:00+02:00</published><updated>2013-05-10T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-05-10:/2013/05/gentoo-metadata-support-for-cpe/</id><summary type="html">&lt;p&gt;Recently, the &lt;code&gt;metadata.xml&lt;/code&gt; file syntax definition (the DTD for those
that know a bit of XML) has been updated to support CPE definitions. A
&lt;a href="https://nvd.nist.gov/cpe.cfm"&gt;CPE&lt;/a&gt; (Common Platform Enumeration) is an
identifier that
&lt;a href="http://cpe.mitre.org/specification/index.html"&gt;describes&lt;/a&gt; an
application, operating system or hardware device using its vendor,
product name, version, update, edition and â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, the &lt;code&gt;metadata.xml&lt;/code&gt; file syntax definition (the DTD for those
that know a bit of XML) has been updated to support CPE definitions. A
&lt;a href="https://nvd.nist.gov/cpe.cfm"&gt;CPE&lt;/a&gt; (Common Platform Enumeration) is an
identifier that
&lt;a href="http://cpe.mitre.org/specification/index.html"&gt;describes&lt;/a&gt; an
application, operating system or hardware device using its vendor,
product name, version, update, edition and language. This CPE
information is used in the CVE releases (Common Vulnerabilities and
Exposures) - announcements about vulnerabilities in applications,
operating systems or hardware. Not all security vulnerabilities are
assigned a CVE number, but this is as close as you get towards a
(public) elaborate dictionary of vulnerabilities.&lt;/p&gt;
&lt;p&gt;By allowing Gentoo package maintainers to enter (part of) the CPE
information in the &lt;code&gt;metadata.xml&lt;/code&gt; file, applications that parse the CVE
information can now more easily match if software installed on Gentoo is
related to a CVE. I had a &lt;a href="http://blog.siphos.be/2013/04/matching-packages-with-cves/"&gt;related
post&lt;/a&gt; to
this not that long ago on my blog and I'm glad this change has been
made. With this information at hand, we can start feeding CPE
information to the packages and then easily match this with CVEs.&lt;/p&gt;
&lt;p&gt;I had a request to "provide" the scripts I used for the previous post.
Mind you, these are taking too many assumptions (and probably wrong
ones) for now (and I'm not really planning on updating them as I have
different methods for getting information related to CVEs), but I'm
planning on integrating CPE data in Gentoo's packages more and then
create a small script that generates a "watchlist" that I can feed to
&lt;a href="http://cvechecker.sourceforge.net"&gt;cvechecker&lt;/a&gt;. But anyway, here are
the scripts.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dev.gentoo.org/~swift/blog/01/0_createcve.txt"&gt;First&lt;/a&gt;, I took
all CVE information and put it in a simple CSV file. The CSV is the same
one used by cvechecker, so check out the application to see where it
fetches the data from (there is a CVE RSS feed and a simple XSL
transformation).
&lt;a href="http://dev.gentoo.org/~swift/blog/01/1_createhitlist.txt"&gt;Second&lt;/a&gt;, I
create a "hitlist" which generates the CPEs. With the recent change to
&lt;code&gt;metadata.xml&lt;/code&gt; this step can be simplified a lot.
&lt;a href="http://dev.gentoo.org/~swift/blog/01/2_matchcve.txt"&gt;Third&lt;/a&gt;, I try to
match the CPE data with the CVE data, depending on a given time delay of
commits. In other words, you can ask possible CVE fixes for commits made
in the last few XXX days.&lt;/p&gt;</content><category term="Gentoo"></category><category term="cpe"></category><category term="cve"></category><category term="Gentoo"></category><category term="metadata"></category><category term="security"></category></entry><entry><title>Added "predictable network interface" info into the handbook</title><link href="http://blog.siphos.be/2013/05/added-predictable-network-interface-info-into-the-handbook/" rel="alternate"></link><published>2013-05-07T03:50:00+02:00</published><updated>2013-05-07T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-05-07:/2013/05/added-predictable-network-interface-info-into-the-handbook/</id><summary type="html">&lt;p&gt;Being long overdue - like many of our documentation-reported bugs :-( I
worked on &lt;a href="https://bugs.gentoo.org/show_bug.cgi?id=466262"&gt;bug 466262&lt;/a&gt;
to update the &lt;a href="http://www.gentoo.org/doc/en/handbook/"&gt;Gentoo Handbook&lt;/a&gt;
with information about &lt;a href="http://www.gentoo.org/doc/en/handbook/handbook-amd64.xml?part=4&amp;amp;chap=2#doc_chap4"&gt;Network Interface
Naming&lt;/a&gt;.
Of course, the installation instructions have also seen the necessary
updates to refer to this change.&lt;/p&gt;
&lt;p&gt;With some luck (read: time) I might be able â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Being long overdue - like many of our documentation-reported bugs :-( I
worked on &lt;a href="https://bugs.gentoo.org/show_bug.cgi?id=466262"&gt;bug 466262&lt;/a&gt;
to update the &lt;a href="http://www.gentoo.org/doc/en/handbook/"&gt;Gentoo Handbook&lt;/a&gt;
with information about &lt;a href="http://www.gentoo.org/doc/en/handbook/handbook-amd64.xml?part=4&amp;amp;chap=2#doc_chap4"&gt;Network Interface
Naming&lt;/a&gt;.
Of course, the installation instructions have also seen the necessary
updates to refer to this change.&lt;/p&gt;
&lt;p&gt;With some luck (read: time) I might be able to fix various other
documentation-related ones soon. I had some problems with the new
SELinux userspace that I wanted to get fixed before, and then I worked
on the new SELinux policies as well as trying to figure out how SELinux
deals with network related aspects. Hence I saw time fly by at the speed
of a neutrino...&lt;/p&gt;
&lt;p&gt;BTW, the 20130424 policies are in the tree.&lt;/p&gt;</content><category term="Documentation"></category><category term="documentation"></category><category term="gdp"></category><category term="Gentoo"></category><category term="udev"></category></entry><entry><title>Gentoo protip: using buildpkgonly</title><link href="http://blog.siphos.be/2013/04/gentoo-protip-using-buildpkgonly/" rel="alternate"></link><published>2013-04-25T03:50:00+02:00</published><updated>2013-04-25T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-04-25:/2013/04/gentoo-protip-using-buildpkgonly/</id><summary type="html">&lt;p&gt;If you don't want to have the majority of builds run in the background
while you are busy on the system, but you don't want to automatically
install software in the background when you are not behind your desk,
then perhaps you can settle for using &lt;a href="https://wiki.gentoo.org/wiki/Binary_package_guide"&gt;binary
packages&lt;/a&gt;. I'm not â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you don't want to have the majority of builds run in the background
while you are busy on the system, but you don't want to automatically
install software in the background when you are not behind your desk,
then perhaps you can settle for using &lt;a href="https://wiki.gentoo.org/wiki/Binary_package_guide"&gt;binary
packages&lt;/a&gt;. I'm not
saying you need to setup a build server and such or do your updates
first in a chroot.&lt;/p&gt;
&lt;p&gt;No, what this tip is for is to use the &lt;em&gt;--buildpkgonly&lt;/em&gt; parameter of
&lt;strong&gt;emerge&lt;/strong&gt; at night, building some of your software (often the larger
ones) as binary packages only (storing those in the &lt;code&gt;${PKGDIR}&lt;/code&gt; which
defaults to &lt;code&gt;/usr/portage/packages&lt;/code&gt;). When you are then on your system,
you can run the update with binary package included:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# emerge -puDk world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To use &lt;em&gt;--buildpkgonly&lt;/em&gt;, all package(s) that Portage wants to build must
have all their dependencies met. If not, then the build will not go
through and you're left with no binary packages at all. So what we do is
to create a script that looks at the set of packages that would be
build, and then one for one building the binary package.&lt;/p&gt;
&lt;p&gt;When ran, the script will attempt to build binary packages for those
that have no dependency requirements anymore. Those builds will then
create a binary package but will not be merged on the system. When you
later update your system, including binary packages, those packages that
have been build during the night will be merged quickly, reducing the
build load on your system while you are working on it.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;LIST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;mktemp&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

emerge -puDN --color&lt;span class="o"&gt;=&lt;/span&gt;n --columns --quiet&lt;span class="o"&gt;=&lt;/span&gt;y world &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt; &amp;gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LIST&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; PACKAGE in &lt;span class="k"&gt;$(&lt;/span&gt;cat &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LIST&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Building binary package for &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PACKAGE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;... &amp;quot;&lt;/span&gt;
  emerge -uN --quiet-build --quiet&lt;span class="o"&gt;=&lt;/span&gt;y --buildpkgonly &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PACKAGE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt; -eq &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I ran this a couple of days ago when &lt;em&gt;-uDN world&lt;/em&gt; showed 46 package
updates (including a few hefty ones like chromium). After running this
script, 35 of them had a binary package ready so the &lt;em&gt;-uDN world&lt;/em&gt; now
only needed to build 11 packages, merging the remainder from binary
packages.&lt;/p&gt;</content><category term="Gentoo"></category><category term="binpkg"></category><category term="emerge"></category><category term="Gentoo"></category><category term="protip"></category></entry><entry><title>SLOT'ing the old swig-1</title><link href="http://blog.siphos.be/2013/04/sloting-the-old-swig-1/" rel="alternate"></link><published>2013-04-23T03:50:00+02:00</published><updated>2013-04-23T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-04-23:/2013/04/sloting-the-old-swig-1/</id><summary type="html">&lt;p&gt;The &lt;a href="http://www.swig.org"&gt;SWIG&lt;/a&gt; tool helps developers in building
interfaces/libraries that can be accessed from many other languages than
the ones the library is initially written in or for. The SELinux
userland utility &lt;a href="http://oss.tresys.com/projects/setools"&gt;setools&lt;/a&gt; uses
it to provide Python and Ruby interfaces even though the application
itself is written in C â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="http://www.swig.org"&gt;SWIG&lt;/a&gt; tool helps developers in building
interfaces/libraries that can be accessed from many other languages than
the ones the library is initially written in or for. The SELinux
userland utility &lt;a href="http://oss.tresys.com/projects/setools"&gt;setools&lt;/a&gt; uses
it to provide Python and Ruby interfaces even though the application
itself is written in C. Sadly, the tool currently requires swig-1 for
its building of the interfaces and uses constructs that do not seem to
be compatible with swig-2 (same with the apse package, btw).&lt;/p&gt;
&lt;p&gt;I first tried to &lt;a href="http://comments.gmane.org/gmane.comp.security.selinux/17822"&gt;patch
setools&lt;/a&gt; to
support swig-2, but eventually found regressions in the libapol library
it provides so the patch didn't work out (that is why some users
mentioned that a previous setools version did build with swig - yes it
did, but the result wasn't correct). Recently, a &lt;a href="https://plus.google.com/117641514179258643044/posts/gNrhVDuwGzp"&gt;post on Google Plus'
SELinux
community&lt;/a&gt;
showed me that I wasn't wrong in this matter (it really does require
swig-1 and doesn't seem to be trivial to fix).&lt;/p&gt;
&lt;p&gt;Hence, I have to fix the &lt;a href="https://bugs.gentoo.org/show_bug.cgi?id=453512"&gt;gentoo build
problem&lt;/a&gt; where one set
of tools requires swig-1 and another swig-2. Otherwise world-updates and
even building stages for SELinux systems would fail as Portage finds
incompatible dependencies. One way to approach this is to use Gentoo's
support for
&lt;a href="http://devmanual.gentoo.org/general-concepts/slotting/"&gt;SLOTs&lt;/a&gt;. When a
package (ebuild) in Gentoo defines a SLOT, it tells the package manager
that the same package but a different version might be installed
alongside the package if that has a different SLOT version. In case of
swig, the idea is to give swig-1 a different slot than swig-2 (which
uses &lt;code&gt;SLOT="0"&lt;/code&gt;) and make sure that both do not install the same files
(otherwise you get file collisions).&lt;/p&gt;
&lt;p&gt;Luckily, swig places all of its files except for the &lt;strong&gt;swig&lt;/strong&gt; binary
itself in &lt;code&gt;/usr/share/swig/&amp;lt;version&amp;gt;&lt;/code&gt;, so all I had left to do was to
make sure the binary itself is renamed. I chose to use &lt;strong&gt;swig1.3&lt;/strong&gt;
(similar as to how tools like &lt;strong&gt;ruby&lt;/strong&gt; and &lt;strong&gt;python&lt;/strong&gt; and for some
packages even &lt;strong&gt;java&lt;/strong&gt; is implemented on Gentoo). The result (through
&lt;a href="https://bugs.gentoo.org/show_bug.cgi?id=466650"&gt;bug 466650&lt;/a&gt;) is now in
the tree, as well as an adapted setools package that uses the new swig
SLOT.&lt;/p&gt;
&lt;p&gt;Thanks to Samuli Suominen for getting me on the (hopefully ;-) right
track. I don't know why I was afraid of doing this, it was much less
complex than I thought (now let's hope I didn't break other things ;-)&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="selinux"></category><category term="setools"></category><category term="slot"></category><category term="swig"></category></entry><entry><title>Introducing selocal for small SELinux policy enhancements</title><link href="http://blog.siphos.be/2013/04/introducing-selocal-for-small-selinux-policy-enhancements/" rel="alternate"></link><published>2013-04-21T03:50:00+02:00</published><updated>2013-04-21T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-04-21:/2013/04/introducing-selocal-for-small-selinux-policy-enhancements/</id><summary type="html">&lt;p&gt;When working with a SELinux-enabled system, administrators will
eventually need to make small updates to the existing policy. Instead of
building their own full policy (always an option, but most likely not
maintainable in the long term) one or more SELinux policy modules are
created (most distributions use a modular â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;When working with a SELinux-enabled system, administrators will
eventually need to make small updates to the existing policy. Instead of
building their own full policy (always an option, but most likely not
maintainable in the long term) one or more SELinux policy modules are
created (most distributions use a modular approach to the SELinux policy
development) which are then loaded on their target systems.&lt;/p&gt;
&lt;p&gt;In the past, users had to create their own policy module by creating
(and maintaining) the necessary &lt;code&gt;.te&lt;/code&gt; file(s), building the proper &lt;code&gt;.pp&lt;/code&gt;
files and loading it in the active policy store. In Gentoo, from
&lt;code&gt;policycoreutils-2.1.13-r11&lt;/code&gt; onwards, a script is provided to the users
that hopefully makes this a bit more intuitive for regular users:
&lt;strong&gt;selocal&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As the name implies, &lt;strong&gt;selocal&lt;/strong&gt; aims to provide an interface for
handling &lt;em&gt;local&lt;/em&gt; policy updates that do not need to be packaged or
distributed otherwise. It is a command-line application that you feed
single policy rules at one at a time. Each rule can be accompanied with
a single-line comment, making it obvious for the user to know why he
added the rule in the first place.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# selocal --help
Usage: selocal [] []

Command can be one of:
  -l, --list            List the content of a SELinux module
  -a, --add             Add an entry to a SELinux module
  -d, --delete          Remove an entry from a SELinux module
  -M, --list-modules    List the modules currently known by selocal
  -u, --update-dep      Update the dependencies for the rules
  -b, --build           Build the SELinux module (.pp) file (requires privs)
  -L, --load            Load the SELinux module (.pp) file (requires privs)

Options can be one of:
  -m, --module          Module name to use (default: selocal)
  -c, --comment        Comment (with --add)

The option -a requires that a rule is given, like so:
  selocal -a &amp;quot;dbadm_role_change(staff_r)&amp;quot;
The option -d requires that a line number, as shown by the --list, is given, like so:
  selocal -d 12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's say that you need to launch a small script you written as a
daemon, but you want this to run while you are still in the &lt;em&gt;staff_t&lt;/em&gt;
domain (it is a user-sided daemon you use personally). As regular
&lt;em&gt;staff_t&lt;/em&gt; isn't allowed to have processes bind on generic ports/nodes,
you need to enhance the SELinux policy a bit. With &lt;strong&gt;selocal&lt;/strong&gt;, you can
do so as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# selocal --add &amp;quot;corenet_tcp_bind_generic_node(staff_t)&amp;quot; --comment &amp;quot;Launch local webserv.py daemon&amp;quot;
# selocal --add &amp;quot;corenet_tcp_bind_generic_port(staff_t)&amp;quot; --comment &amp;quot;Launch local webserv.my daemon&amp;quot;
# selocal --build --load
(some output on building the policy module)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When finished, the local policy is enhanced with the two mentioned
rules. You can query which rules are currently stored in the policy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# selocal --list
12: corenet_tcp_bind_generic_node(staff_t) # Launch local webserv.py daemon
13: corenet_tcp_bind_generic_port(staff_t) # Launch local webserv.py daemon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you need to delete a rule, just pass the line number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# selocal --delete 13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Having this tool around also makes it easier to test out changes
suggested through bugreports. When I test such changes, I add in the bug
report ID as the comment so I can track which settings are still local
and which ones have been pushed to our policy repository. Underlyingly,
&lt;strong&gt;selocal&lt;/strong&gt; creates and maintains the necessary policy file in
&lt;path&gt;\~/.selocal&lt;/path&gt; and by default uses the &lt;em&gt;selocal&lt;/em&gt; policy module
name.&lt;/p&gt;
&lt;p&gt;I hope this tool helps users with their quest on using SELinux. Feedback
and comments are always appreciated! It is a small bash script and might
still have a few bugs in it, but I have been using it for a few months
so most quirks should be handled.&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="policy"></category><category term="selinux"></category><category term="selocal"></category></entry><entry><title>Transforming GuideXML to DocBook</title><link href="http://blog.siphos.be/2013/04/transforming-guidexml-to-docbook/" rel="alternate"></link><published>2013-04-20T03:50:00+02:00</published><updated>2013-04-20T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-04-20:/2013/04/transforming-guidexml-to-docbook/</id><summary type="html">&lt;p&gt;I recently
&lt;a href="http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo/xml/htdocs/xsl/docbook.xsl?sortby=date&amp;amp;view=log"&gt;committed&lt;/a&gt;
an XSL stylesheet that allows us to transform the GuideXML documents
(both guides and handbooks) to DocBook. This isn't part of a more
elaborate move to try and push DocBook instead of GuideXML for the
Gentoo Documentation though (I'd rather direct documentation development
more to the Gentoo â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently
&lt;a href="http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo/xml/htdocs/xsl/docbook.xsl?sortby=date&amp;amp;view=log"&gt;committed&lt;/a&gt;
an XSL stylesheet that allows us to transform the GuideXML documents
(both guides and handbooks) to DocBook. This isn't part of a more
elaborate move to try and push DocBook instead of GuideXML for the
Gentoo Documentation though (I'd rather direct documentation development
more to the Gentoo wiki instead once translations are allowed): instead,
I use it to be able to generate our documentation in other formats (such
as PDF but also ePub) when asked.&lt;/p&gt;
&lt;p&gt;If you're not experienced with XSL: XSL stands for &lt;em&gt;Extensible
Stylesheet Language&lt;/em&gt; and can be seen as a way of "programming" in XML. A
stylesheet allows developers to transform one XML document towards
another format (either another XML, or as &lt;a href="http://blog.siphos.be/2013/02/transforming-guidexml-to-wiki/"&gt;text-like output like
wiki&lt;/a&gt;)
while manipulating its contents. In case of documentation, we try to
keep as much structure in the document as possible, but other uses could
be to transform a large XML with only a few interesting fields towards a
very small XML (only containing those fields you need) for further
processing.&lt;/p&gt;
&lt;p&gt;For now (and probably for the foreseeable future), the stylesheet is to
be used in an offline mode (we are not going to provide auto-generated
PDFs of all documents) as the process to convert a document from
GuideXML to DocBook to XML:FO to PDF is quite resource-intensive. But
users that are interested can use the stylesheet as linked above to
create their own PDFs of the documentation.&lt;/p&gt;
&lt;p&gt;Assuming you have a checkout of the Gentoo documentation, this process
can be done as follows (example for the AMD64 handbook):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ xsltproc docbook.xsl /path/to/handbook-amd64.xml &amp;gt; /somewhere/handbook-amd64.docbook
$ cd /somewhere
$ xsltproc --output handbook-amd64.fo --stringparam paper.type A4   
 /usr/share/sgml/docbook/xsl-stylesheets/fo/docbook.xsl handbook-amd64.docbook
$ fop handbook-amd64.fo handbook-amd64.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The docbook stylesheets are offered by the
&lt;em&gt;app-text/docbook-xsl-stylesheets&lt;/em&gt; package whereas the &lt;strong&gt;fop&lt;/strong&gt; command
is provided by &lt;em&gt;dev-java/fop&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I have an example output available (temporarily) at my &lt;a href="http://dev.gentoo.org/~swift/tmp/handbook-amd64.pdf"&gt;dev space (amd64
handbook)&lt;/a&gt; but I'm
not going to maintain this for long (so the link might not work in the
near future).&lt;/p&gt;</content><category term="Gentoo"></category><category term="docbook"></category><category term="Gentoo"></category><category term="guidexml"></category><category term="pdf"></category><category term="xsl"></category></entry><entry><title>Another Gentoo Hardened month has passed</title><link href="http://blog.siphos.be/2013/04/another-gentoo-hardened-month-has-passed/" rel="alternate"></link><published>2013-04-18T23:36:00+02:00</published><updated>2013-04-18T23:36:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-04-18:/2013/04/another-gentoo-hardened-month-has-passed/</id><summary type="html">&lt;p&gt;Another month has passed, so time to mention again what we have all been
doing lately ;-)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Version 4.8 of GCC is available in the tree, but currently masked. The
package contains a fix needed to build hardened-sources, and a fix for
the asan (address sanitizer).
&lt;a href="http://www.internetnews.com/blog/skerner/open-source-gcc-4.8-compiler-including-address-sanitizer-security.html"&gt;asan&lt;/a&gt;
support in â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Another month has passed, so time to mention again what we have all been
doing lately ;-)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Version 4.8 of GCC is available in the tree, but currently masked. The
package contains a fix needed to build hardened-sources, and a fix for
the asan (address sanitizer).
&lt;a href="http://www.internetnews.com/blog/skerner/open-source-gcc-4.8-compiler-including-address-sanitizer-security.html"&gt;asan&lt;/a&gt;
support in GCC 4.8 might be seen as an improvement security-wise, but it
is yet unclear if it is an integral part of GCC or could be disabled
with a configure flag. Apparently, asan "makes building gcc 4.8 crazy".
Seeing that it comes from Google, and building Google Chromium is also
crazy, I start seeing a pattern here.&lt;/p&gt;
&lt;p&gt;Anyway, it turns out that PaX/grSec and asan do not get along yet (ASAN
assumes/uses hardcoded userland address space size values, which breaks
when UDEREF is set as it pitches a bit from the size):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ERROR: AddressSanitizer failed to allocate 0x20000001000 (2199023259648) bytes at address 0x0ffffffff000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Given that this is hardcoded in the resulting binaries, it isn't
sufficient to change the size value from 47 bits to 46 bits as hardened
systems can very well boot a kernel with and another kernel without
UDEREF, causing the binaries to fail on the other kernel. Instead, a
proper method would be to dynamically check the size of a userland
address.&lt;/p&gt;
&lt;p&gt;However, GCC 4.8 also brings along some nice enhancements and features.
uclibc profiles work just fine with GCC 4.8, including armv7a and
mips/mipsel. The latter is especially nice to hear, since mips used to
require significant effort with previous GCCs.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Kernel and grSecurity/PaX&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;More recent kernels have now been stabilized to stay close to the
grSecurity/PaX upstream developments. The most recent stable kernel now
is hardened-sources-3.8.3. Others still available are hardened-sources
versions 3.2.40-r1 and 2.6.32-r156.&lt;/p&gt;
&lt;p&gt;The support for XATTR_PAX is still progressing, but a few issues have
come up. One is that non-hardened systems are seeing warnings about
&lt;strong&gt;pax-mark&lt;/strong&gt; not being able to set the XATTR_PAX on tmpfs since vanilla
kernels do not have the patch to support &lt;code&gt;user.*&lt;/code&gt; extended attribute
namespaces for tmpfs. A second issue is that the &lt;strong&gt;install&lt;/strong&gt;
application, as provided by &lt;code&gt;coreutils&lt;/code&gt;, does not copy extended
attributes. This has impact on ebuilds where pax markings are done
before the install phase of a package. But only doing pax markings after
the install phase isn't sufficient either, since sometimes we need the
binaries to be marked already for test phases or even in the compile
phase. So this is still something on the near horizon.&lt;/p&gt;
&lt;p&gt;Most likely the necessary tools will be patched to include extended
attributes on copy operations. However, we need to take care only to
copy over those attributes that make sense: &lt;code&gt;user.pax&lt;/code&gt; does, but
security ones like &lt;code&gt;security.evm&lt;/code&gt; and &lt;code&gt;security.selinux&lt;/code&gt; shouldn't as
those are either recomputed when needed, or governed through policy. The
idea is that USE="pax_kernel" will enable the above on &lt;code&gt;coreutils&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SELinux&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The SELinux support in Gentoo has seen a fair share of updates on the
userland utilities (like policycoreutils, setools, libselinux and such).
Most of these have already made the stable tree or are close to be
bumped to stable. The SELinux policy also has been updated a lot: most
changes can be tracked through bugzilla, looking for the
&lt;code&gt;sec-policy r13&lt;/code&gt; whiteboard. The changes can be applied to the system
immediately if you use the live ebuilds (like &lt;code&gt;selinux-base-9999&lt;/code&gt;), but
I'm planning on releasing revision 13 of our policy set soon.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;System Integrity&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Some of the "early adopter" problems we've noticed on Gentoo Hardened
have been integrated in the repositories upstream and are slowly
progressing towards the main Linux kernel tree.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Profiles&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;All hardened profiles have been moved to the 13.0 base. Some people
frowned when they noticed that the uclibc profiles do not inherit from
any architecture-related profile. This is however with reason: the
architecture profiles are (amongst other reasons) focusing on the glibc
specifics of the architecture. Since the profile intended here is for
uclibc, those changes are not needed (nor wanted). Hence, these are
collapsed in a single profile.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Documentation&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For SELinux, the &lt;a href="http://www.gentoo.org/proj/en/hardened/selinux/selinux-handbook.xml"&gt;SELinux
handbook&lt;/a&gt;
now includes information about USE="unconfined" as well as the
&lt;code&gt;selinux_gentoo&lt;/code&gt; init script as provided by &lt;code&gt;policycoreutils&lt;/code&gt;. Users who
are already running with SELinux enabled can just look at the &lt;a href="http://www.gentoo.org/proj/en/hardened/selinux/selinux-handbook.xml?part=2&amp;amp;chap=7"&gt;Change
History&lt;/a&gt;
to see which changes affect them.&lt;/p&gt;
&lt;p&gt;A set of &lt;a href="https://wiki.gentoo.org/wiki/SELinux/Tutorials"&gt;tutorials&lt;/a&gt;
(which I've blogged about earlier as well) have been put online at the
&lt;a href="https://wiki.gentoo.org"&gt;Gentoo Wiki&lt;/a&gt;. Next to the SELinux tutorials,
an article pertaining to &lt;a href="https://wiki.gentoo.org/wiki/AIDE"&gt;AIDE&lt;/a&gt; has
been added as well as it fits nicely within the principles/concepts of
the &lt;a href="http://www.gentoo.org/proj/en/hardened/integrity/index.xml"&gt;System
Integrity&lt;/a&gt;
subproject.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Media&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you don't do it already, start following
&lt;a href="https://twitter.com/GentooHardened"&gt;@GentooHardened&lt;/a&gt; ;-)&lt;/p&gt;</content><category term="Gentoo"></category><category term="asan"></category><category term="gcc"></category><category term="Gentoo"></category><category term="grsecurity"></category><category term="hardened"></category><category term="integrity"></category><category term="irc"></category><category term="meeting"></category><category term="pax"></category><category term="selinux"></category><category term="uderef"></category></entry><entry><title>Not needing run_init for password-less service management</title><link href="http://blog.siphos.be/2013/04/not-needing-run_init-for-password-less-service-management/" rel="alternate"></link><published>2013-04-09T22:14:00+02:00</published><updated>2013-04-09T22:14:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-04-09:/2013/04/not-needing-run_init-for-password-less-service-management/</id><summary type="html">&lt;p&gt;One of the things that has been bugging me was why, even with having
&lt;code&gt;pam_rootok.so&lt;/code&gt; set in &lt;code&gt;/etc/pam.d/run_init&lt;/code&gt;, I cannot enjoy
passwordless service management without using &lt;strong&gt;run_init&lt;/strong&gt; directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# rc-service postgresql-9.2 status
Authenticating root.
Password:

# run_init rc-service postgresql-9.2 status
Authenticating root.
 * status: started
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the things that has been bugging me was why, even with having
&lt;code&gt;pam_rootok.so&lt;/code&gt; set in &lt;code&gt;/etc/pam.d/run_init&lt;/code&gt;, I cannot enjoy
passwordless service management without using &lt;strong&gt;run_init&lt;/strong&gt; directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# rc-service postgresql-9.2 status
Authenticating root.
Password:

# run_init rc-service postgresql-9.2 status
Authenticating root.
 * status: started
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I decided to &lt;strong&gt;strace&lt;/strong&gt; the two commands and look for the
differences. I found out that there is even a SELinux permission for
being able to use the &lt;em&gt;rootok&lt;/em&gt; setting for passwords! Apparently,
&lt;code&gt;pam_rootok.so&lt;/code&gt; is SELinux-aware and does some additional checks.&lt;/p&gt;
&lt;p&gt;Although I don't know the exact details of it, it looks for the context
before the call (exec) of &lt;strong&gt;run_init&lt;/strong&gt; occurred. Then it checks if this
domain has the right for &lt;em&gt;passwd { rootok }&lt;/em&gt; (unless SELinux is in
permissive, in which case it just continues) and only then it allows the
"rootok" to succeed.&lt;/p&gt;
&lt;p&gt;Now why doesn't this work without using &lt;strong&gt;run_init&lt;/strong&gt;? I think it has to
do with how we integrate &lt;strong&gt;run_init&lt;/strong&gt; in the scripts, because out of
the trace I found that the previous context was also &lt;em&gt;run_init_t&lt;/em&gt;
(instead of &lt;em&gt;sysadm_t&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;20451 open(&amp;quot;/proc/self/task/20451/attr/current&amp;quot;, O_RDONLY) = 3
20451 read(3, &amp;quot;root:sysadm_r:run_init_t\0&amp;quot;, 4095) = 25
20451 close(3)                          = 0
20451 gettid()                          = 20451
20451 open(&amp;quot;/proc/self/task/20451/attr/prev&amp;quot;, O_RDONLY) = 3
20451 read(3, &amp;quot;root:sysadm_r:run_init_t\0&amp;quot;, 4095) = 25
20451 close(3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because there already is a transition to &lt;em&gt;run_init_t&lt;/em&gt; upon calling the
scripts, the underlying call to &lt;strong&gt;runscripts&lt;/strong&gt; causes the "previous"
attribute to be set to &lt;em&gt;run_init_t&lt;/em&gt; as well, and only then is
&lt;strong&gt;run_init&lt;/strong&gt; called (which then causes the PAM functions to be called).
But by prepending the commands with &lt;strong&gt;run_init&lt;/strong&gt; (which quickly causes
the PAM functions to be called) the previous context is &lt;em&gt;sysadm_t&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I tested on a system with the following policy update, and this succeeds
nicely.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;policy_module(localruninit, 1.0)

gen_require(`
  class passwd { passwd chfn chsh rootok };
  type run_init_t;
&amp;#39;)

allow run_init_t self:passwd rootok;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'll probably add this in Gentoo's policy.&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="hardened"></category><category term="pam"></category><category term="rootok"></category><category term="run_init"></category><category term="selinux"></category></entry><entry><title>Separate puppet provider for Gentoo/SELinux?</title><link href="http://blog.siphos.be/2013/04/separate-puppet-provider-for-gentooselinux/" rel="alternate"></link><published>2013-04-07T19:22:00+02:00</published><updated>2013-04-07T19:22:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-04-07:/2013/04/separate-puppet-provider-for-gentooselinux/</id><summary type="html">&lt;p&gt;While slowly transitioning my playground infrastructure towards Puppet,
I already am in process of creating a custom provider for things such as
services. Puppet uses providers as "implementations" for the functions
Puppet needs. For instance, for the &lt;em&gt;service&lt;/em&gt; type (which handles init
script services), there are providers for RedHat, Debian â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;While slowly transitioning my playground infrastructure towards Puppet,
I already am in process of creating a custom provider for things such as
services. Puppet uses providers as "implementations" for the functions
Puppet needs. For instance, for the &lt;em&gt;service&lt;/em&gt; type (which handles init
script services), there are providers for RedHat, Debian, FreeBSD, ...
and it also has providers called &lt;em&gt;gentoo&lt;/em&gt; and &lt;em&gt;openrc&lt;/em&gt;. The &lt;em&gt;openrc&lt;/em&gt; one
uses the service scripts that Gentoo's OpenRC provides, such as
&lt;strong&gt;rc-service&lt;/strong&gt; and &lt;strong&gt;rc-status&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;On a SELinux-enabled system, and especially when using a decentralized
Puppet environment (I dropped the puppet master set in favor of a
decentralized usage of Puppet), if you call &lt;strong&gt;rc-service&lt;/strong&gt; to, say,
start a service, it will ask for the users' password. Of course, Puppet
doesn't want this, so I have to prefix the commands with &lt;strong&gt;run_init&lt;/strong&gt;
and have a &lt;code&gt;pam_rootok.so&lt;/code&gt; rule in run_init's PAM definition.&lt;/p&gt;
&lt;p&gt;So far that's a simple change - I just patched the &lt;code&gt;openrc.rb&lt;/code&gt; file to
do so. But then the second problem I'm facing is that Puppet wants to
use return code based commands for checking the run-time state of
services. Even though some of my services weren't running, Puppet either
thought they were or called the start routine and consider the service
started. Sadly that wasn't the case, as the rc-* scripts always return
0 (you'll need to parse the output).&lt;/p&gt;
&lt;p&gt;So what I did now is to create a simple script called &lt;code&gt;runstatus&lt;/code&gt; which
returns the state of services. It's crude, but seems to work:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;SERVICENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# We need to exit:&lt;/span&gt;
&lt;span class="c1"&gt;# 0 - if running&lt;/span&gt;
&lt;span class="c1"&gt;# 1 - if dead but PID exists&lt;/span&gt;
&lt;span class="c1"&gt;# 2 - if dead but lock file exists&lt;/span&gt;
&lt;span class="c1"&gt;# 3 - if not running&lt;/span&gt;
&lt;span class="c1"&gt;# 4 - if unknown&lt;/span&gt;

rc-status -a -C &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SERVICENAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep -q started &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
rc-status -a -C &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SERVICENAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep -q stopped &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I then have the service provider (I now provide my own instead of
patching the openrc one) call &lt;strong&gt;runstatus&lt;/strong&gt; to get the state of a
service, as well as call it after trying to start a service. But as this
is quite basic functioning, I'm wondering if I'm doing things the right
way or not. Who else has experience with Puppet and Gentoo, and did you
have to tweak things to get services and such working?&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="openrc"></category><category term="provider"></category><category term="puppet"></category><category term="selinux"></category></entry><entry><title>SELinux tutorial series</title><link href="http://blog.siphos.be/2013/03/selinux-tutorial-series/" rel="alternate"></link><published>2013-03-15T00:34:00+01:00</published><updated>2013-03-15T00:34:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-03-15:/2013/03/selinux-tutorial-series/</id><summary type="html">&lt;p&gt;As we get a growing number of SELinux users within Gentoo Hardened and
because the SELinux usage at the firm I work at is most likely going to
grow as well, I decided to join the bunch of documents on SELinux that
are "out there" and start a series of â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;As we get a growing number of SELinux users within Gentoo Hardened and
because the SELinux usage at the firm I work at is most likely going to
grow as well, I decided to join the bunch of documents on SELinux that
are "out there" and start a series of my own. After all, too much
documentation probably doesn't hurt, and SELinux definitely deserves a
lot of documentation.&lt;/p&gt;
&lt;p&gt;I decided to use the &lt;a href="https://wiki.gentoo.org"&gt;Gentoo Wiki&lt;/a&gt; for this
endeavour instead of a GuideXML approach (which is the format used for
Gentoo documentation on the main site). The set of tutorials that I
already wrote can be found under the
&lt;a href="https://wiki.gentoo.org/wiki/SELinux"&gt;SELinux&lt;/a&gt; : &lt;a href="https://wiki.gentoo.org/wiki/SELinux/Tutorials"&gt;Gentoo Hardened
SELinux Tutorials&lt;/a&gt;
location. Although of course meant to support the Gentoo Hardened
SELinux users, I'm hoping to keep the initial set of tutorial articles
deliberately distribution-independent so I can refer to them at work as
well.&lt;/p&gt;
&lt;p&gt;For now (this is a week's work, so don't expect this amount of tutorials
to double in the next few days) I wrote about the security context of a
process, how SELinux controls file and directory accesses, where to find
SELinux permission denial details, controlling file contexts yourself
and how a process gets into a certain context.&lt;/p&gt;
&lt;p&gt;I hope I can keep the articles in good shape and with a gradual step-up
in complexity. That does mean that most articles are not complete (for
instance, when talking about domain transitions, I don't talk about
constraints that might prohibit them, or about the role and type
mismatches (invalid context) that you might get, etc.) and that those
details will follow in later articles. Hopefully that allows users to
learn step by step.&lt;/p&gt;
&lt;p&gt;At the end of each tutorial, you will find a "What you need to remember"
section. This is a very short overview of what was said in the tutorial
and that you will need to know in future articles. If you ever read a
tutorial article, then this section might be sufficient for you to
remember again what it was about - no need to reread the entire article.&lt;/p&gt;
&lt;p&gt;Consider it an attempt at a &lt;code&gt;tl;dr&lt;/code&gt; for articles ;-) Enjoy your reading,
and if you have any remarks, don't hesitate to contribute on the wiki or
talk through the "Talk" pages.&lt;/p&gt;</content><category term="SELinux"></category><category term="articles"></category><category term="documentation"></category><category term="Gentoo"></category><category term="hardened"></category><category term="selinux"></category><category term="tutorials"></category><category term="wiki"></category></entry><entry><title>Gentoo Hardened progress meeting of march 2013</title><link href="http://blog.siphos.be/2013/03/gentoo-hardened-progress-meeting-of-march-2013/" rel="alternate"></link><published>2013-03-07T22:46:00+01:00</published><updated>2013-03-07T22:46:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-03-07:/2013/03/gentoo-hardened-progress-meeting-of-march-2013/</id><summary type="html">&lt;p&gt;Another month has passed, so time for a new progress meeting...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Toolchain&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GCC v4.7 has been unmasked, allowing a large set of users to test out
the new GCC. It is also expected that GCC 4.8-rc1 will hit the tree next
week. In the hardened-dev overlay, hardened support â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Another month has passed, so time for a new progress meeting...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Toolchain&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GCC v4.7 has been unmasked, allowing a large set of users to test out
the new GCC. It is also expected that GCC 4.8-rc1 will hit the tree next
week. In the hardened-dev overlay, hardened support for x86, amd64 and
arm has been added (SPEC updates) and the remainder of architectures
will be added by the end of the week.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kernel and grSecurity/PaX&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kernel 3.7.5 had a security issue (local root privilege escalation) so
3.7.5-r1 which held a fix for this was stabilized quickly. However,
other (non-security) problems have been reported, such as one with
dovecot, regarding the VSIZE memory size. This should be fixed in the
3.8 series, so these are candidate for a faster stabilization. This
faster stabilization is never fun, as it increases the likelihood that
we miss other things, but they are needed as the vulnerability in the
previous stable kernel was too severe.&lt;/p&gt;
&lt;p&gt;Regarding XATTR_PAX, we are getting pretty close to the migration. The
eclass is ready and will be announced for review on the appropriate
mailinglists later this week. A small problem still remains on
Paludis-using systems (Paludis does not record NEEDED.ELF.2 information
- linkage information - so it is hard to get all the linkage information
on a system). A different revdep-pax and migrate-pax toolset will be
built that detects the necessary linkage information, but much slower
than on a Portage-running system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SELinux&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The 11th revision of the policies are now stable, and work is on the way
for the 12th revision which will hit the tree soon. Some work is on the
way for setools and policycoreutils (one due to a new release - setools
- and the other one due to a build failure if PAM is not set). Both
packages will hit the hardened-dev overlay soon.&lt;/p&gt;
&lt;p&gt;A new "edition" of the selinuxnode virtual image has been pushed to the
mirror system, providing a SELinux-enabled (enforcing) Gentoo Hardened
system with grSecurity and PaX, as well as IMA and EVM enabled.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Profiles&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The 13.0 profiles have been running fine for a while at a few of our
developer systems. No changes have been needed (yet) so things are
looking good.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;System Integrity&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The necessary userland utilities have been moved to the main tree. The
documentation for IMA/EVM has been updated as well to reflec the current
state of IMA/EVM within Gentoo Hardened. IMA, even with the custom
policies, seems to be working well. EVM on the other hand has some
issues, so you might need to run with EVM=fix for now. Debugging on this
issue is on the way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some of the user oriented documentation (integrity and SELinux) have
been moved to the Gentoo Wiki for easier user contributions and
simplified management. Other documents will follow soon.&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="grsecurity"></category><category term="hardened"></category><category term="kernel"></category><category term="pax"></category><category term="profiles"></category><category term="selinux"></category><category term="toolchain"></category></entry><entry><title>Uploading selinuxnode test VM</title><link href="http://blog.siphos.be/2013/02/uploading-selinuxnode-test-vm/" rel="alternate"></link><published>2013-02-25T03:05:00+01:00</published><updated>2013-02-25T03:05:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-02-25:/2013/02/uploading-selinuxnode-test-vm/</id><summary type="html">&lt;p&gt;At the time of writing (but I'll delay the publication of this post a
few hours), I'm uploading a new SELinux-enabled KVM guest image. This is
not an update on the previous image though (it's a reinstalled system -
after all, I use VMs for testing, so it makes sense to â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;At the time of writing (but I'll delay the publication of this post a
few hours), I'm uploading a new SELinux-enabled KVM guest image. This is
not an update on the previous image though (it's a reinstalled system -
after all, I use VMs for testing, so it makes sense to reinstall from
time to time to check if the installation instructions are still
accurate). However, the focus remains the same:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A minimal Gentoo Linux installation for amd64 (x86_64) as guest
    within a KVM hypervisor. The image is about 190 Mb in size
    compressed, and 1.6 Gb in size uncompressed. The file format is
    Qemu's QCOW2 so expect the image to grow as you work with it. The
    file systems are, in total, sized to about 50 Gb.&lt;/li&gt;
&lt;li&gt;The installation has SELinux enabled (strict policy, enforcing
    mode), various grSecurity settings enabled (including PaX and TPE),
    but now also includes IMA (Integrity Measurement Architecture) and
    EVM (Extended Verification Module) although EVM is by default
    started in fix mode.&lt;/li&gt;
&lt;li&gt;The image will not start any network-facing daemons by default
    (unlike the previous image) for security reasons (if I let this
    image stay around this long as I did with the previous, it's prone
    to have some vulnerabilities in the future, although I'm hoping I
    can update the image more frequently). This includes SSH, so you'll
    need access to the image console first after which you can configure
    the network and start SSH (&lt;strong&gt;run_init rc-service sshd start&lt;/strong&gt; does
    the trick).&lt;/li&gt;
&lt;li&gt;A couple of default accounts are created, and the image will display
    those accounts and their passwords on the screen (it is a test/play
    VM, not a production VM).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are still a few minor issues with it, that I hope to fix by the
next upload:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugs.gentoo.org/show_bug.cgi?id=457812"&gt;Bug 457812&lt;/a&gt; is
    still applicable to the image, so you'll notice lots of SELinux
    denials on the mknod capability. They seem to be cosmetic though.&lt;/li&gt;
&lt;li&gt;At shutdown, udev somewhere fails with a SELinux initial
    context problem. I thought I had it covered, but I noticed after
    compressing the image that it is still there. I'll fix it - I
    promise ;)&lt;/li&gt;
&lt;li&gt;EVM is enabled in fix mode, because otherwise EVM is &lt;a href="http://sourceforge.net/mailarchive/forum.php?thread_name=1361476641.29360.114.camel%40falcor1&amp;amp;forum_name=linux-ima-user"&gt;prohibiting
    mode
    changes&lt;/a&gt;
    on files in /run. I still have to investigate this further though -
    I had to use the EVM=fix workaround due to time pressure.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When uploaded, I'll ask the Gentoo infrastructure team to synchronise
the image with our mirrors so you can enjoy it. It'll be on the
distfiles, under experimental/amd64/qemu-selinux (it has the 20130224
date in the name, so you can see for yourself if the sync has already
occurred or not).&lt;/p&gt;</content><category term="Gentoo"></category><category term="evm"></category><category term="Gentoo"></category><category term="grsecurity"></category><category term="hardened"></category><category term="ima"></category><category term="kvm"></category><category term="selinux"></category><category term="virtual"></category></entry><entry><title>Working on a new selinuxnode VM</title><link href="http://blog.siphos.be/2013/02/working-on-a-new-selinuxnode-vm/" rel="alternate"></link><published>2013-02-23T14:04:00+01:00</published><updated>2013-02-23T14:04:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-02-23:/2013/02/working-on-a-new-selinuxnode-vm/</id><summary type="html">&lt;p&gt;A long time ago, I made a &lt;a href="http://distfiles.gentoo.org/experimental/amd64/qemu-selinux/"&gt;SELinux enabled
VM&lt;/a&gt; for
people to play with, displaying a minimal Gentoo installation, including
the hardening features it supports (PIE/PIC toolchain, grSecurity, PaX
and SELinux). I'm currently trying to create a new one, which also
includes IMA/EVM, but it looks like â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;A long time ago, I made a &lt;a href="http://distfiles.gentoo.org/experimental/amd64/qemu-selinux/"&gt;SELinux enabled
VM&lt;/a&gt; for
people to play with, displaying a minimal Gentoo installation, including
the hardening features it supports (PIE/PIC toolchain, grSecurity, PaX
and SELinux). I'm currently trying to create a new one, which also
includes IMA/EVM, but it looks like I still have many things to
investigate further...&lt;/p&gt;
&lt;p&gt;First of all, I notice that many SELinux domains want to use the mknod
capability, even for domains of which I have no idea whatsoever why they
need it. I don't notice any downsides though, and running in permissive
mode doesn't change the domain behavior. But still, I'm reluctant to
mark them dontaudit as long as I'm not 100% sure.&lt;/p&gt;
&lt;p&gt;Second, the gettys (I think it is the getty) result in a "Cannot change
SELinux context: permission denied" error, even though everything is
running in the right SELinux context. I still have to confirm if it
really is the getty process or something else (the last run I had the
impression it was a udev-related process). But there are no denials and
no SELinux errors in the logs.&lt;/p&gt;
&lt;p&gt;Third, during shutdown, many domains have problems accessing their PID
files in /var/run (which is a link to /run). I most likely need to allow
read privileges on all domains that have access to var_run_t towards
the var_t symlinks. It isn't a problem per se (the processes still run
correctly) but ugly as hell, and if you introduce monitoring it'll go
haywire (as no PID files were either found, or were stale).&lt;/p&gt;
&lt;p&gt;Also, EVM is giving me a hard time, not allowing me to change mode and
ownership in files on /var/run. I have received some feedback from the
IMA user list on this so it is still very much a work-in-progress.&lt;/p&gt;
&lt;p&gt;Finally, the first attempt to generate a new VM resulted in a download
of 817 MB (instead of the 158 MB of the previous release), so I still
have to correct my USE flags and doublecheck the installed applications.
Anyway, definitely to be continued. Too bad time is a scarce resource
:-(&lt;/p&gt;</content><category term="Gentoo"></category><category term="evm"></category><category term="Gentoo"></category><category term="hardened"></category><category term="ima"></category><category term="selinux"></category><category term="selinuxnode"></category><category term="vm"></category></entry><entry><title>Transforming GuideXML to wiki</title><link href="http://blog.siphos.be/2013/02/transforming-guidexml-to-wiki/" rel="alternate"></link><published>2013-02-12T20:12:00+01:00</published><updated>2013-02-12T20:12:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-02-12:/2013/02/transforming-guidexml-to-wiki/</id><summary type="html">&lt;p&gt;The &lt;a href="http://www.gentoo.org"&gt;Gentoo project&lt;/a&gt; has its own &lt;a href="https://wiki.gentoo.org"&gt;official
wiki&lt;/a&gt; for some time now, and we are going to
use it more and more in the next few months. For instance, in the last
Gentoo Hardened meeting, we already discussed that most user-oriented
documentation should be put on the wiki, and I've â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="http://www.gentoo.org"&gt;Gentoo project&lt;/a&gt; has its own &lt;a href="https://wiki.gentoo.org"&gt;official
wiki&lt;/a&gt; for some time now, and we are going to
use it more and more in the next few months. For instance, in the last
Gentoo Hardened meeting, we already discussed that most user-oriented
documentation should be put on the wiki, and I've heard that there are
ideas on moving Gentoo project pages at large towards the wiki. And also
for the regular &lt;a href="http://www.gentoo.org/doc/en/list.xml"&gt;Gentoo
documentation&lt;/a&gt; I will be moving
those guides that we cannot maintain ourselves anymore easily towards
the wiki.&lt;/p&gt;
&lt;p&gt;To support migrations of documents, I created a
&lt;a href="https://github.com/sjvermeu/small.coding/blob/master/gxml2docbook/gxml2wiki.xsl"&gt;gxml2wiki.xsl&lt;/a&gt;
stylesheet. Such a stylesheet can be used, together with tools like
&lt;strong&gt;xsltproc&lt;/strong&gt;, to transform GuideXML documents into text output
&lt;em&gt;somewhat&lt;/em&gt; suitable for the wiki. It isn't perfect (far from it
actually) but at least it allows for a more simple migration of
documents with minor editing afterwards.&lt;/p&gt;
&lt;p&gt;Currently, using it is as simple as invoking it against the GuideXML
document you want to transform:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ xsltproc gxml2wiki.xsl /path/to/document.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The output shown on the screen can then be used as a page. The following
things still need to be corrected manually:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Whitespace is broken, sometimes there are too many newlines. I had
    to make the decision to put in newlines when needed (which makes too
    many newlines) rather than a few newlines too few (which makes it
    more difficult to find where to add in).&lt;/li&gt;
&lt;li&gt;Links need to be double/triple checked, but i'll try to fix that in
    later editions of the stylesheet&lt;/li&gt;
&lt;li&gt;Commands will have "INTERNAL" in them - you'll need to move the
    commands themselves into the proper location and only put the
    necessary output in the pre-tags. This is because the wiki format
    has more structure than GuideXML in this matter, thus
    transformations are more difficult to write in this regard.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The stylesheet currently automatically adds in a link towards a Server
and security category, but of course you'll need to change that to the
proper category for the document you are converting.&lt;/p&gt;
&lt;p&gt;Happy documentation hacking!&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="guidexml"></category><category term="stylesheet"></category><category term="wiki"></category><category term="xml"></category><category term="xsl"></category></entry><entry><title>Gentoo Hardened goes onward (aka project meeting)</title><link href="http://blog.siphos.be/2013/02/gentoo-hardened-goes-onward-aka-project-meeting/" rel="alternate"></link><published>2013-02-07T23:40:00+01:00</published><updated>2013-02-07T23:40:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-02-07:/2013/02/gentoo-hardened-goes-onward-aka-project-meeting/</id><summary type="html">&lt;p&gt;It's been a while again, so time for another Gentoo Hardened online
progress meeting.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GCC 4.8 is on development stage 4, so the hardened patches will be
worked on next week. Some help on it is needed to test the patches on
ARM, PPC and MIPS though. For â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's been a while again, so time for another Gentoo Hardened online
progress meeting.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GCC 4.8 is on development stage 4, so the hardened patches will be
worked on next week. Some help on it is needed to test the patches on
ARM, PPC and MIPS though. For those interested, keep a close eye on the
hardened-dev overlay as those will contain the latest fixes. When GCC
4.9 starts development phase 1, Zorry will again try to upstream the
patches.&lt;/p&gt;
&lt;p&gt;With the coming fixes, we might probably (need to) remove the various
hardenedno* GCC profiles from the hardened Gentoo profiles. This
shouldn't impact too many users as ebuilds add in the correct flags
anyhow (for instance when needing to turn off PIE/PIC).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Kernel, grSecurity and PaX&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The kernel release 3.7.0 that we have stable in our tree has seen a few
setbacks, but no higher version is stable yet (mainly due to the
stabilization period needed). 3.7.4-r1 and 3.7.5 are prime candidates
with good track record,&lt;br&gt;
so we might be stabilizing 3.7.5 in the very near future (next week
probably).&lt;/p&gt;
&lt;p&gt;On the PaX flag migration (you know, from ELF-header based marking to
extended attributes marking), the documentation has seen its necessary
upgrades and the userland utilities have been updated to reflect the use
of xattr markings. The eclass we use for the markings will use the
correct utility based on the environment.&lt;/p&gt;
&lt;p&gt;One issue faced when trying to support both markings is that some
actions (like the "paxctl -Cc" which creates the PT_PAX header if it is
missing) make no sense with the other (as there is no header when using
XATTR_PAX). The eclass will be updated to ignore these flags when
XATTR_PAX is selected.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SELinux&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Revision 10 is stable in the tree, and revision 11 is waiting
stabilization period. A few more changes have been put in the policy
repository already (which are installed when using the live ebuilds) and
will of course be part of&lt;br&gt;
revision 12.&lt;/p&gt;
&lt;p&gt;A change in the userland utilities was also pushed out to allow
permissive domains (so run a single domain in permissive mode instead of
the entire system).&lt;/p&gt;
&lt;p&gt;Finally, the SELinux eclass has been updated to remove SELinux modules
from all defined SELinux module stores if the SELinux policy package is
removed from the system. Before that, the user had to remove the modules
from the store himself manually, but this is error-prone and easily
forgotten, especially for the non-default SELinux policy stores.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Profiles&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;All hardened subprofiles are marked as deprecated now (you've seen the
discussions on this on the mailinglist probably on this) so we now have
a sane set of hardened profiles to manage. The subprofiles were used for
things like&lt;br&gt;
"desktop" or "server", whereas users can easily stack their profiles as
they see fit anyhow - so there was little reason for the project to
continue managing those subprofiles.&lt;/p&gt;
&lt;p&gt;Also, now that Gentoo has released its 13.0 profile, we will need to
migrate our profiles to the 13.0 ones as well. So, the idea is to
temporarily support 13.0 in a subprofile, test it thoroughly, and then
remove the subprofile and switch the main one to 13.0.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;System Integrity&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The documentation for IMA and EVM is available on the Gentoo Hardened
project site. They currently still refer to the IMA and EVM subsystems
as development-only, but they are available in the stable kernels now.
Especially the default policy that is available in the kernel is pretty
useful. When you want to consider custom policies (for instance with
SELinux integration) you'll need a kernel patch that is already
upstreamed but not applied to the stable kernels yet.&lt;/p&gt;
&lt;p&gt;To support IMA/EVM, a package called ima-evm-utils is available in the
hardened-dev overlay, which will be moved to the main tree soon.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Documentation&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As mentioned before, the PaX documentation has seen quite a lot of
updates. Other documents that have seen updates are the Hardened FAQ,
Integrity subproject and SELinux documentation although most of them
were small changes.&lt;/p&gt;
&lt;p&gt;Another suggestion given is to clean up the Hardened project page;
however, there has been some talk within Gentoo to move project pages to
the Gentoo wiki. Such a move might make the suggestion easier to handle.
And while on the subject of the wiki, we might want to move user guides
to the wiki already.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bugs&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Bug &lt;a href="https://bugs.gentoo.org/443630"&gt;443630&lt;/a&gt; refers to segmentation
faults with libvirt when starting Qemu domains on a SELinux-enabled
host. Sadly, I'm not able to test libvirt myself so either someone with
SELinux and libvirt&lt;br&gt;
expertise can chime in, or we will need to troubleshoot it by bug
(using gdb, strace'ing more, ...) which might take quite some time and
is not user friendly...&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Media&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Various talks where held at FOSDEM regarding Gentoo Hardened, and a lot
of people attended those talks. Also the round table was quite
effective, with many users interacting with developers all around. For
next year, chances are very high that we'll give a "What has changed
since last year" session and a round table again.&lt;/p&gt;
&lt;p&gt;With many thanks to the usual suspects: Zorry, blueness, prometheanfire,
lejonet, klondike and the several dozen contributors that are going to
kill me for not mentioning their (nick)names.&lt;/p&gt;</content><category term="Gentoo"></category><category term="Gentoo"></category><category term="grsecurity"></category><category term="hardened"></category><category term="kernel"></category><category term="meeting"></category><category term="minutes"></category><category term="online"></category><category term="pax"></category><category term="profiles"></category><category term="selinux"></category></entry><entry><title>Listing files of (not) installed software</title><link href="http://blog.siphos.be/2010/06/listing-files-of-not-installed-software/" rel="alternate"></link><published>2010-06-05T10:54:00+02:00</published><updated>2010-06-05T10:54:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2010-06-05:/2010/06/listing-files-of-not-installed-software/</id><summary type="html">&lt;p&gt;Everyone that has been using Gentoo for a while now knows about tools
such as &lt;strong&gt;qlist&lt;/strong&gt; that show you the list of files installed by an
(installed) package, or &lt;strong&gt;qfile&lt;/strong&gt; that allows you to find which package
provided a particular file on your system.&lt;/p&gt;
&lt;p&gt;One thing lacking is to be â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Everyone that has been using Gentoo for a while now knows about tools
such as &lt;strong&gt;qlist&lt;/strong&gt; that show you the list of files installed by an
(installed) package, or &lt;strong&gt;qfile&lt;/strong&gt; that allows you to find which package
provided a particular file on your system.&lt;/p&gt;
&lt;p&gt;One thing lacking is to be able to find out which package &lt;em&gt;would&lt;/em&gt;
provide a file. Unlike the previous tools, this tool cannot rely on the
information found on your system as the package isn't installed yet.&lt;/p&gt;
&lt;p&gt;There have been projects in the past that attempted to provide such
functionality, almost always through an online queryable database. Many
haven't survived, due to too high expectations or little server
infrastructure resources. But it seems like
&lt;a href="http://www.portagefilelist.de"&gt;PortageFileList&lt;/a&gt; is to stay for a while.&lt;/p&gt;
&lt;p&gt;The project not only offers an online interface for querying
information, it also provides a package (&lt;code&gt;app-portage/pfl&lt;/code&gt;) that allows
you to query their infrastructure from the command line. The package
provides a tool called &lt;strong&gt;e-file&lt;/strong&gt; which supports SQL-like syntax for the
queries.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~$ e-file '%bin/xdm'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The above command will then display, using the well-known emerge/Portage
output, which package provides the file (as well as which file was
matched by the query).&lt;/p&gt;
&lt;p&gt;Definitely a nice tool to have around. Thanks guys of
&lt;a href="http://www.portagefilelist.de"&gt;PortageFileList&lt;/a&gt;!&lt;/p&gt;</content><category term="Gentoo"></category><category term="gentoo"></category></entry></feed>