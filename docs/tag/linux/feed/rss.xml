<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Simplicity is a form of art... - linux</title><link>https://blog.siphos.be/</link><description></description><lastBuildDate>Sun, 09 Aug 2015 14:48:00 +0200</lastBuildDate><item><title>Can SELinux substitute DAC?</title><link>https://blog.siphos.be/2015/08/can-selinux-substitute-dac/</link><description>&lt;p&gt;A nice &lt;a href="https://twitter.com/sjvermeu/status/630107879123623936"&gt;twitter discussion&lt;/a&gt;
with &lt;a href="https://twitter.com/erlheldata"&gt;Erling Hellenäs&lt;/a&gt; caught my full attention later
when I was heading home: Can SELinux substitute DAC? I know it can't and doesn't
in the current implementation, but why not and what would be needed?&lt;/p&gt;
&lt;p&gt;SELinux is implemented through the &lt;a href="https://en.wikipedia.org/wiki/Linux_Security_Modules"&gt;Linux Security Modules framework&lt;/a&gt;
which allows …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 09 Aug 2015 14:48:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-08-09:/2015/08/can-selinux-substitute-dac/</guid><category>SELinux</category><category>selinux</category><category>refpolicy</category><category>linux</category><category>dac</category><category>lsm</category></item><item><title>D-Bus and SELinux</title><link>https://blog.siphos.be/2014/06/d-bus-and-selinux/</link><description>&lt;p&gt;After a &lt;a href="http://blog.siphos.be/2014/06/d-bus-quick-recap/"&gt;post about
D-Bus&lt;/a&gt; comes the
inevitable related post about SELinux with D-Bus.&lt;/p&gt;
&lt;p&gt;Some users might not know that D-Bus is an SELinux-aware application.
That means it has SELinux-specific code in it, which has the D-Bus
behavior based on the SELinux policy (and might not necessarily honor
the "permissive …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 30 Jun 2014 20:07:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-06-30:/2014/06/d-bus-and-selinux/</guid><category>SELinux</category><category>busconfig</category><category>d-bus</category><category>dbus</category><category>linux</category><category>policy</category><category>selinux</category></item><item><title>D-Bus, quick recap</title><link>https://blog.siphos.be/2014/06/d-bus-quick-recap/</link><description>&lt;p&gt;I've never fully investigated the what and how of D-Bus. I know it is
some sort of IPC, but higher level than the POSIX IPC methods. After
some reading, I think I start to understand how it works and how
administrators can work with it. So a quick write-down is …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 29 Jun 2014 19:16:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-06-29:/2014/06/d-bus-quick-recap/</guid><category>Free Software</category><category>dbus</category><category>linux</category></item><item><title>What is that net-pf-## thingie?</title><link>https://blog.siphos.be/2014/04/what-is-that-net-pf-thingie/</link><description>&lt;p&gt;When checking audit logs, you might come across applications that
request loading of a &lt;code&gt;net-pf-##&lt;/code&gt; module, with &lt;code&gt;##&lt;/code&gt; being an integer.
Having requests for &lt;code&gt;net-pf-10&lt;/code&gt; is a more known cause (enable IPv6) but
what about &lt;code&gt;net-pf-34&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;The answer can be found in &lt;code&gt;/usr/src/linux/include/linux/socket.h&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#define AF_ATMPVC …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 01 Apr 2014 19:46:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-04-01:/2014/04/what-is-that-net-pf-thingie/</guid><category>Free Software</category><category>linux</category><category>module_request</category><category>net-pf</category></item><item><title>Managing Inter-Process Communication (IPC)</title><link>https://blog.siphos.be/2014/03/managing-inter-process-communication-ipc/</link><description>&lt;p&gt;As a Linux administrator, you'll eventually need to concern you about
&lt;em&gt;Inter-Process Communication (IPC)&lt;/em&gt;. The IPC primitives that most POSIX
operating systems provide are semaphores, shared memory and message
queues. On Linux, the first utility that helps you with those primitives
is &lt;strong&gt;ipcs&lt;/strong&gt;. Let's start with semaphores first.&lt;/p&gt;
&lt;p&gt;Semaphores in …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 30 Mar 2014 12:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-03-30:/2014/03/managing-inter-process-communication-ipc/</guid><category>Free Software</category><category>ipc</category><category>ipcrm</category><category>ipcs</category><category>linux</category><category>msg</category><category>sem</category><category>shmem</category></item><item><title>Can Gentoo play a role in a RHEL-only environment?</title><link>https://blog.siphos.be/2014/01/can-gentoo-play-a-role-in-a-rhel-only-environment/</link><description>&lt;p&gt;Sounds like a stupid question, as the answer is already in the title. If
a company has only RedHat Enterprise Linux as allowed / supported Linux
platform (be it for a support model requirement, ISV certification,
management tooling support or what not) how could or would Gentoo still
play a role …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 09 Jan 2014 04:13:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-01-09:/2014/01/can-gentoo-play-a-role-in-a-rhel-only-environment/</guid><category>Gentoo</category><category>Gentoo</category><category>linux</category><category>vappliance</category><category>virtual appliance</category></item><item><title>Linux protip: environment for a process</title><link>https://blog.siphos.be/2014/01/linux-protip-environment-for-a-process/</link><description>&lt;p&gt;Just a quick pro-tip: if you need to know the environment variables for
a process, you can see them in that process' &lt;code&gt;/proc/${PID}/environ&lt;/code&gt;
file. The file however shows the environment variables on one line, with
a null character as separator. With a simple &lt;strong&gt;sed&lt;/strong&gt; you can show it …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 07 Jan 2014 04:31:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-01-07:/2014/01/linux-protip-environment-for-a-process/</guid><category>Free Software</category><category>environ</category><category>linux</category><category>protip</category></item><item><title>Umounting IPv6 NFS(v4) mounts</title><link>https://blog.siphos.be/2013/08/umounting-ipv6-nfsv4-mounts/</link><description>&lt;p&gt;I had issues umounting my NFSv4 shares on an IPv6-only network. When
trying to umount the share, it said that it couldn't find the mount in
&lt;code&gt;/proc/mounts&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# umount /mnt/nfs/portage
/mnt/nfs/portage was not found in /proc/mounts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The solution: copy &lt;code&gt;/proc/mounts&lt;/code&gt; to &lt;code&gt;/etc/mtab&lt;/code&gt;, and …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 23 Aug 2013 13:46:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-08-23:/2013/08/umounting-ipv6-nfsv4-mounts/</guid><category>Misc</category><category>ip6</category><category>ipv6</category><category>linux</category><category>nfs4</category><category>nfsv4</category><category>umount</category></item><item><title>Using extended attributes for custom information</title><link>https://blog.siphos.be/2013/06/using-extended-attributes-for-custom-information/</link><description>&lt;p&gt;One of the things I have been meaning to implement on my system is a way
to properly "remove" old files from the system. Currently, I do this
through frequently listing all files, going through them and deleting
those I feel I no longer need (in any case, I can …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 02 Jun 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-06-02:/2013/06/using-extended-attributes-for-custom-information/</guid><category>Free Software</category><category>attributes</category><category>expiration</category><category>extended attributes</category><category>linux</category><category>xattr</category></item><item><title>Looking at the local Linux kernel privilege escalation</title><link>https://blog.siphos.be/2013/05/looking-at-the-local-linux-kernel-privilege-escalation/</link><description>&lt;p&gt;There has been a few posts already on the local Linux kernel privilege
escalation, which has received the
&lt;a href="https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-2094"&gt;CVE-2013-2094&lt;/a&gt;
ID.
&lt;a href="http://arstechnica.com/security/2013/05/critical-linux-vulnerability-imperils-users-even-after-silent-fix/"&gt;arstechnica&lt;/a&gt;
has a write-up with links to good resources on the Internet, but I
definitely want to point readers to the
&lt;a href="http://www.reddit.com/r/netsec/comments/1eb9iw/sdfucksheeporgs_semtexc_local_linux_root_exploit/c9ykrck"&gt;explanation&lt;/a&gt;
that Brad Spengler made on the vulnerability.&lt;/p&gt;
&lt;p&gt;In …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 17 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-17:/2013/05/looking-at-the-local-linux-kernel-privilege-escalation/</guid><category>Security</category><category>event</category><category>grsecurity</category><category>kernexec</category><category>linux</category><category>pax</category><category>perf</category><category>selinux</category><category>uderef</category><category>vulnerability</category></item><item><title>Enabling Kernel Samepage Merging (KSM)</title><link>https://blog.siphos.be/2013/05/enabling-kernel-samepage-merging-ksm/</link><description>&lt;p&gt;When using virtualization extensively, you will pretty soon hit the
limits of your system (at least, the resources on it). When the
virtualization is used primarily for testing (such as in my case), the
limit is memory. So it makes sense to seek memory optimization
strategies on such systems. The …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 09 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-09:/2013/05/enabling-kernel-samepage-merging-ksm/</guid><category>Free Software</category><category>cow</category><category>ksm</category><category>kvm</category><category>linux</category><category>virtualization</category></item><item><title>Overview of Linux capabilities, part 3</title><link>https://blog.siphos.be/2013/05/overview-of-linux-capabilities-part-3/</link><description>&lt;p&gt;In &lt;a href="http://blog.siphos.be/2013/05/capabilities-a-short-intro/"&gt;previous&lt;/a&gt;
&lt;a href="http://blog.siphos.be/2013/05/restricting-and-granting-capabilities/"&gt;posts&lt;/a&gt;
&lt;a href="http://blog.siphos.be/2013/05/overview-of-linux-capabilities-part-1/"&gt;I&lt;/a&gt;
&lt;a href="http://blog.siphos.be/2013/05/overview-of-linux-capabilities-part-2/"&gt;talked&lt;/a&gt;
about capabilities and gave an introduction to how this powerful
security feature within Linux can be used (and also exploited). I also
covered a few capabilities, so let's wrap this up with the remainder of
them.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;CAP_AUDIT_CONTROL&lt;/dt&gt;
&lt;dd&gt;Enable and disable kernel auditing; change auditing filter …&lt;/dd&gt;&lt;/dl&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 06 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-06:/2013/05/overview-of-linux-capabilities-part-3/</guid><category>Security</category><category>capabilities</category><category>capsh</category><category>libcap</category><category>linux</category></item><item><title>Overview of Linux capabilities, part 2</title><link>https://blog.siphos.be/2013/05/overview-of-linux-capabilities-part-2/</link><description>&lt;p&gt;As I've (in a very high level) &lt;a href="http://blog.siphos.be/2013/05/capabilities-a-short-intro/"&gt;described
capabilities&lt;/a&gt;
and talked a bit on how to &lt;a href="http://blog.siphos.be/2013/05/restricting-and-granting-capabilities/"&gt;work with
them&lt;/a&gt;,
I started with a small overview of
&lt;a href="http://blog.siphos.be/2013/05/overview-of-linux-capabilities-part-1/"&gt;file-related&lt;/a&gt;
capabilities. So next up are process-related capabilities (note, this
isn't a conform terminology, more some categorization that I do myself).&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;CAP_IPC_LOCK&lt;/dt&gt;
&lt;dd&gt;Allow the …&lt;/dd&gt;&lt;/dl&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 05 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-05:/2013/05/overview-of-linux-capabilities-part-2/</guid><category>Security</category><category>capabilities</category><category>grsecurity</category><category>linux</category><category>nosuid</category><category>selinux</category><category>tpe</category></item><item><title>Overview of Linux capabilities, part 1</title><link>https://blog.siphos.be/2013/05/overview-of-linux-capabilities-part-1/</link><description>&lt;p&gt;In the
&lt;a href="http://blog.siphos.be/2013/05/capabilities-a-short-intro/"&gt;previous&lt;/a&gt;
&lt;a href="http://blog.siphos.be/2013/05/restricting-and-granting-capabilities/"&gt;posts&lt;/a&gt;,
I talked about capabilities and how they can be used to allow processes
to run in a privileged fashion without granting them full root access to
the system. An example given was how capabilities can be leveraged to
run &lt;strong&gt;ping&lt;/strong&gt; without granting it setuid root rights …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 04 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-04:/2013/05/overview-of-linux-capabilities-part-1/</guid><category>Security</category><category>capabilities</category><category>linux</category></item><item><title>Restricting and granting capabilities</title><link>https://blog.siphos.be/2013/05/restricting-and-granting-capabilities/</link><description>&lt;p&gt;As
&lt;a href="http://blog.siphos.be/2013/05/capabilities-a-short-intro"&gt;capabilities&lt;/a&gt;
are a way for running processes with some privileges, without having the
need to grant them root privileges, it is important to understand that
they exist if you are a system administrator, but also as an auditor or
other security-related function. Having processes run as a non-root user …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 03 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-03:/2013/05/restricting-and-granting-capabilities/</guid><category>Security</category><category>capabilities</category><category>linux</category></item><item><title>Capabilities, a short intro</title><link>https://blog.siphos.be/2013/05/capabilities-a-short-intro/</link><description>&lt;p&gt;Capabilities. You probably have heard of them already, but when you
start developing SELinux policies, you'll notice that you come in closer
contact with them than before. This is because SELinux, when
applications want to do something "root-like", checks the capability of
that application. Without SELinux, this either requires the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 02 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-02:/2013/05/capabilities-a-short-intro/</guid><category>Security</category><category>capabilities</category><category>linux</category><category>ping</category><category>selinux</category></item><item><title>Simple drawing for I/O positioning</title><link>https://blog.siphos.be/2013/04/simple-drawing-for-io-positionin/</link><description>&lt;p&gt;Instead of repeatedly trying to create an overview of the various layers
involved with I/O operations within Linux on whatever white-board is in
the vicinity, I decided to draw one up in &lt;a href="http://www.draw.io"&gt;Draw.io&lt;/a&gt;
that I can then update as I learn more from this fascinating world. The
drawing's …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 18 Apr 2013 01:00:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-04-18:/2013/04/simple-drawing-for-io-positionin/</guid><category>Documentation</category><category>io</category><category>linux</category></item></channel></rss>