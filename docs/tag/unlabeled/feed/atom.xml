<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Simplicity is a form of art... - unlabeled</title><link href="https://blog.siphos.be/" rel="alternate"></link><link href="https://blog.siphos.be/tag/unlabeled/feed/atom.xml" rel="self"></link><id>https://blog.siphos.be/</id><updated>2013-05-21T03:50:00+02:00</updated><entry><title>Why oh why does a process run in unlabeled_t?</title><link href="https://blog.siphos.be/2013/05/why-oh-why-does-a-process-run-in-unlabeled_t/" rel="alternate"></link><published>2013-05-21T03:50:00+02:00</published><updated>2013-05-21T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-05-21:/2013/05/why-oh-why-does-a-process-run-in-unlabeled_t/</id><summary type="html">&lt;p&gt;If you notice that a process is running in the &lt;code&gt;unlabeled_t&lt;/code&gt; domain, the
first question to ask is how it got there.&lt;/p&gt;
&lt;p&gt;Well, one way is to have a process running in a known domain, like
&lt;code&gt;screen_t&lt;/code&gt;, after which the SELinux policy module that provides this
domain is removed from â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you notice that a process is running in the &lt;code&gt;unlabeled_t&lt;/code&gt; domain, the
first question to ask is how it got there.&lt;/p&gt;
&lt;p&gt;Well, one way is to have a process running in a known domain, like
&lt;code&gt;screen_t&lt;/code&gt;, after which the SELinux policy module that provides this
domain is removed from the system (or updated and the update does not
contain the &lt;code&gt;screen_t&lt;/code&gt; definition anymore):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;test ~ # ps -eZ | grep screen
root:sysadm_r:sysadm_screen_t    5047 ?        00:00:00 screen
test ~ # semodule -r screen
test ~ # ps -eZ | grep screen
system_u:object_r:unlabeled_t    5047 ?        00:00:00 screen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In permissive mode, this will be visible easily; in enforcing mode, the
domains you are running in might not be allowed to do anything with
&lt;code&gt;unlabeled_t&lt;/code&gt; files, directories and processes, so &lt;strong&gt;ps&lt;/strong&gt; might not show
it even though it still exists:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;test audit # ps -eZ | grep 5047
test audit # ls -dZ /proc/5047
ls: cannot access /proc/5047: Permission denied
test audit # tail audit.log | grep unlabeled
type=AVC msg=audit(1368698097.494:27806): avc:  denied  { getattr } for  pid=4137 comm=&amp;quot;bash&amp;quot; path=&amp;quot;/proc/5047&amp;quot; dev=&amp;quot;proc&amp;quot; ino=6677 scontext=root:sysadm_r:sysadm_t tcontext=system_u:object_r:unlabeled_t tclass=dir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that, if you reload the module, the process becomes visible
again. That is because the process context itself (&lt;code&gt;screen_t&lt;/code&gt;) is
retained, but because the policy doesn't know it anymore, it shows it as
&lt;code&gt;unlabeled_t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Basically, the moment the policy doesn't know how a label would be
(should be), it uses &lt;code&gt;unlabeled_t&lt;/code&gt;. The SELinux policy then defines how
this &lt;code&gt;unlabeled_t&lt;/code&gt; domain is handled. Processes getting into
&lt;code&gt;unlabeled_t&lt;/code&gt; is not that common though as there is no supported
transition to it. The above one is one way that this still can occur.&lt;/p&gt;</content><category term="SELinux"></category><category term="policy"></category><category term="selinux"></category><category term="unlabeled"></category></entry></feed>