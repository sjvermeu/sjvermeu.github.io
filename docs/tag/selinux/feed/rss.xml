<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Simplicity is a form of art... - selinux</title><link>https://blog.siphos.be/</link><description></description><lastBuildDate>Wed, 06 Jan 2021 20:00:00 +0100</lastBuildDate><item><title>SELinux System Administration 3rd Edition</title><link>https://blog.siphos.be/2021/01/selinux-system-administration-3rd-edition/</link><description>&lt;p&gt;As I mentioned previously, recently my latest installment of "SELinux System
Administration" has been released by Packt Publishing. This is already the
third edition of the book, after the first (2013) and second (2016) editions
have gotten reasonable success given the technical and often hard nature of
full SELinux administration.&lt;/p&gt;
&lt;p&gt;Like with the previous editions, this book remains true to the public of
system administrators, rather than SELinux policy developers. Of course,
SELinux policy development is not ignored in the book.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 06 Jan 2021 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2021-01-06:/2021/01/selinux-system-administration-3rd-edition/</guid><category>SELinux</category><category>selinux</category><category>packt</category><category>book</category></item><item><title>SELinux and extended permissions</title><link>https://blog.siphos.be/2017/11/selinux-and-extended-permissions/</link><description>&lt;p&gt;One of the features present in the &lt;a href="https://github.com/SELinuxProject/selinux/wiki/Releases"&gt;August release&lt;/a&gt; of the SELinux user space is its support for ioctl xperm rules in modular policies. In the past, this was only possible in monolithic ones (and CIL). Through this, allow rules can be extended to not only cover source (domain) and target (resource) identifiers, but also a specific number on which it applies. And ioctl's are the first (and currently only) permission on which this is implemented.&lt;/p&gt;
&lt;p&gt;Note that ioctl-level permission controls isn't a new feature by itself, but the fact that it can be used in modular policies is.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 20 Nov 2017 17:00:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2017-11-20:/2017/11/selinux-and-extended-permissions/</guid><category>SELinux</category><category>selinux</category><category>ioctl</category></item><item><title>SELinux Userspace 2.7</title><link>https://blog.siphos.be/2017/09/selinux-userspace-2.7/</link><description>&lt;p&gt;A few days ago, &lt;a href="http://blog.perfinion.com/"&gt;Jason "perfinion" Zaman&lt;/a&gt; stabilized the 2.7 SELinux userspace on
Gentoo. This release has quite a &lt;a href="https://raw.githubusercontent.com/wiki/SELinuxProject/selinux/files/releases/20170804/RELEASE-20170804.txt"&gt;few new features&lt;/a&gt;, which I'll cover in later
posts, but for distribution packagers the main change is that the userspace
now has many more components to package. The project has split up the
policycoreutils package in separate packages so that deployments can be made
more specific.&lt;/p&gt;
&lt;p&gt;Let's take a look at all the various userspace packages again, learn what their
purpose is, so that you can decide if they're needed or not on a system. Also,
when I cover the contents of a package, be aware that it is based on the deployment
on my system, which might or might not be a complete installation (as with Gentoo,
different USE flags can trigger different package deployments).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 26 Sep 2017 14:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2017-09-26:/2017/09/selinux-userspace-2.7/</guid><category>SELinux</category><category>gentoo</category><category>selinux</category><category>userspace</category></item><item><title>Using nVidia with SELinux</title><link>https://blog.siphos.be/2017/08/using-nvidia-with-selinux/</link><description>&lt;p&gt;Yesterday I've &lt;a href="http://blog.siphos.be/2017/08/switch-to-gentoo-sources/"&gt;switched to the gentoo-sources kernel package&lt;/a&gt; on Gentoo Linux.
And with that, I also attempted (succesfully) to use the propriatary nvidia drivers
so that I can enjoy both a smoother 3D experience while playing minecraft, as well
as use the CUDA support so I don't need to use cloud-based services for small
exercises.&lt;/p&gt;
&lt;p&gt;The move to nvidia was quite simple, as the &lt;a href="https://wiki.gentoo.org/wiki/NVidia/nvidia-drivers"&gt;nvidia-drivers wiki article&lt;/a&gt; on
the Gentoo wiki was quite easy to follow.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 23 Aug 2017 19:04:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2017-08-23:/2017/08/using-nvidia-with-selinux/</guid><category>SELinux</category><category>gentoo</category><category>selinux</category><category>nvidia</category></item><item><title>Switch to Gentoo sources</title><link>https://blog.siphos.be/2017/08/switch-to-gentoo-sources/</link><description>&lt;p&gt;You've might already read it on the Gentoo news site, the &lt;a href="https://www.gentoo.org/news/2017/08/19/hardened-sources-removal.html"&gt;Hardened Linux kernel sources
are removed from the tree&lt;/a&gt; due to the &lt;a href="http://grsecurity.net/"&gt;grsecurity&lt;/a&gt; change where the grsecurity
Linux kernel patches are no longer provided for free. The decision was made due to
supportability and maintainability reasons.&lt;/p&gt;
&lt;p&gt;That doesn't mean that users who want to stick with the grsecurity related hardening
features are left alone. &lt;a href="https://blogs.gentoo.org/ago/2017/08/21/sys-kernel-grsecurity-sources-available/#utm_source=feed&amp;amp;utm_medium=feed&amp;amp;utm_campaign=feed"&gt;Agostino Sarubbo has started providing sys-kernel/grsecurity-sources&lt;/a&gt;
for the users who want to stick with it, as it is based on &lt;a href="https://github.com/minipli/linux-unofficial_grsec"&gt;minipli's unofficial patchset&lt;/a&gt;.
I seriously hope that the patchset will continue to be maintained and, who knows, even evolve further.&lt;/p&gt;
&lt;p&gt;Personally though, I'm switching to the Gentoo sources, and stick with SELinux as one of the
protection measures. And with that, I might even start using my NVidia graphics card a bit more, 
as that one hasn't been touched in several years (I have an Optimus-capable setup with both an
Intel integrated graphics card and an NVidia one, but all attempts to use nouveau for the one game
I like to play - minecraft - didn't work out that well).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 22 Aug 2017 19:04:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2017-08-22:/2017/08/switch-to-gentoo-sources/</guid><category>Gentoo</category><category>gentoo</category><category>hardened</category><category>grsecurity</category><category>selinux</category></item><item><title>SELinux System Administration, 2nd Edition</title><link>https://blog.siphos.be/2016/12/selinux-system-administration-2nd-edition/</link><description>&lt;p&gt;While still working on a few other projects, one of the time consumers of the
past half year (haven't you noticed? my blog was quite silent) has come to an
end: the &lt;a href="https://www.packtpub.com/networking-and-servers/selinux-system-administration-second-edition"&gt;SELinux System Administration - Second Edition&lt;/a&gt;
book is now available. With almost double the amount of pages and a serious
update of the content, the book can now be bought either through Packt Publishing
itself, or the various online bookstores such as &lt;a href="https://www.amazon.com/SELinux-System-Administration-Sven-Vermeulen-ebook/dp/B01LWM02WI"&gt;Amazon&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the holidays now approaching, I hope to be able to execute a few tasks
within the Gentoo community (and of the Gentoo Foundation) and get back on track.
Luckily, my absence was not jeopardizing the state of &lt;a href="https://wiki.gentoo.org/wiki/SELinux"&gt;SELinux&lt;/a&gt;
in Gentoo thanks to the efforts of Jason Zaman.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 22 Dec 2016 19:26:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2016-12-22:/2016/12/selinux-system-administration-2nd-edition/</guid><category>SELinux</category><category>selinux</category><category>gentoo</category><category>rhel</category><category>redhat</category><category>packt</category><category>book</category><category>publishing</category></item><item><title>We do not ship SELinux sandbox</title><link>https://blog.siphos.be/2016/09/we-do-not-ship-selinux-sandbox/</link><description>&lt;p&gt;A few days ago a vulnerability was reported in the SELinux sandbox user space
utility. The utility is part of the &lt;code&gt;policycoreutils&lt;/code&gt; package. Luckily, Gentoo's
&lt;code&gt;sys-apps/policycoreutils&lt;/code&gt; package is not vulnerable - and not because we were
clairvoyant about this issue, but because we don't ship this utility.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 27 Sep 2016 20:47:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2016-09-27:/2016/09/we-do-not-ship-selinux-sandbox/</guid><category>SELinux</category><category>selinux</category><category>sandbox</category><category>gentoo</category><category>vulnerability</category><category>seunshare</category></item><item><title>Getting su to work in init scripts</title><link>https://blog.siphos.be/2015/09/getting-su-to-work-in-init-scripts/</link><description>&lt;p&gt;While developing an init script which has to switch user, I got a couple of
errors from SELinux and the system itself:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;~# rc-service hadoop-namenode format&lt;/span&gt;
&lt;span class="go"&gt;Authenticating root.&lt;/span&gt;
&lt;span class="go"&gt; * Formatting HDFS ...&lt;/span&gt;
&lt;span class="go"&gt;su: Authentication service cannot retrieve authentication info&lt;/span&gt;
&lt;span class="gp gp-VirtualEnv"&gt;(Ignored)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 14 Sep 2015 16:37:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-09-14:/2015/09/getting-su-to-work-in-init-scripts/</guid><category>SELinux</category><category>selinux</category><category>initrc</category></item><item><title>Custom CIL SELinux policies in Gentoo</title><link>https://blog.siphos.be/2015/09/custom-cil-selinux-policies-in-gentoo/</link><description>&lt;p&gt;In Gentoo, we have been supporting &lt;a href="https://wiki.gentoo.org/wiki/SELinux/Tutorials/Creating_your_own_policy_module_file"&gt;custom policy packages&lt;/a&gt;
for a while now. Unlike most other distributions, which focus on binary packages,
Gentoo has always supported source-based packages as default (although 
&lt;a href="https://wiki.gentoo.org/wiki/Binary_package_guide"&gt;binary packages&lt;/a&gt; are 
supported as well).&lt;/p&gt;
&lt;p&gt;A recent &lt;a href="https://gitweb.gentoo.org/repo/gentoo.git/commit/?id=8f2aa45db35bbf3a74f8db09ece9edac60e79ee4"&gt;commit&lt;/a&gt;
now also allows CIL files to be used.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 10 Sep 2015 07:13:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-09-10:/2015/09/custom-cil-selinux-policies-in-gentoo/</guid><category>Gentoo</category><category>gentoo</category><category>cil</category><category>selinux</category><category>ebuild</category><category>eclass</category></item><item><title>Using multiple OpenSSH daemons</title><link>https://blog.siphos.be/2015/09/using-multiple-openssh-daemons/</link><description>&lt;p&gt;I administer a couple of systems which provide interactive access by end users,
and for this interactive access I position &lt;a href="http://www.openssh.com/"&gt;OpenSSH&lt;/a&gt;. 
However, I also use this for administrative access to the system, and I tend to
have harder security requirements for OpenSSH than most users do.&lt;/p&gt;
&lt;p&gt;For instance, on one system, end users with a userid + password use the
sFTP server for publishing static websites. Other access is prohibited,
so I really like this OpenSSH configuration to use chrooted users, internal
sftp support, whereas a different OpenSSH is used for administrative access
(which is only accessible by myself and some trusted parties).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 06 Sep 2015 16:37:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-09-06:/2015/09/using-multiple-openssh-daemons/</guid><category>Free-Software</category><category>openssh</category><category>ssh</category><category>u2f</category><category>selinux</category></item><item><title>Doing away with interfaces</title><link>https://blog.siphos.be/2015/08/doing-away-with-interfaces/</link><description>&lt;p&gt;CIL is SELinux' Common Intermediate Language, which brings on a whole new set of
possibilities with policy development. I hardly know CIL but am (slowly)
learning. Of course, the best way to learn is to try and do lots of things with
it, but real-life work and time-to-market for now forces me to stick with the
M4-based refpolicy one.&lt;/p&gt;
&lt;p&gt;Still, I do try out some things here and there, and one of the things I wanted
to look into was how CIL policies would deal with interfaces.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 29 Aug 2015 11:30:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-08-29:/2015/08/doing-away-with-interfaces/</guid><category>SELinux</category><category>selinux</category><category>cil</category></item><item><title>Why we do confine Firefox</title><link>https://blog.siphos.be/2015/08/why-we-do-confine-firefox/</link><description>&lt;p&gt;If you're a bit following the SELinux development community you will know
&lt;a href="http://danwalsh.livejournal.com"&gt;Dan Walsh&lt;/a&gt;, a &lt;a href="http://people.redhat.com/dwalsh/"&gt;Red Hat&lt;/a&gt;
security engineer. Today he &lt;a href="http://danwalsh.livejournal.com/72697.html"&gt;blogged&lt;/a&gt; 
about &lt;em&gt;CVE-2015-4495 and SELinux, or why doesn't SELinux confine Firefox&lt;/em&gt;. He 
should've asked why the &lt;em&gt;reference policy&lt;/em&gt; or &lt;em&gt;Red Hat/Fedora policy&lt;/em&gt; does not
confine Firefox, because SELinux is, as I've
&lt;a href="http://blog.siphos.be/2015/08/dont-confuse-selinux-with-its-policy/"&gt;mentioned before&lt;/a&gt;,
not the same as its policy.&lt;/p&gt;
&lt;p&gt;In effect, Gentoo's SELinux policy &lt;em&gt;does&lt;/em&gt; confine Firefox by default. One of the
principles we focus on in Gentoo Hardened is to
&lt;a href="https://wiki.gentoo.org/wiki/Project:SELinux/Development_policy#Develop_desktop_policies"&gt;develop desktop policies&lt;/a&gt;
in order to reduce exposure and information leakage of user documents. We might
not have the manpower to confine all desktop applications, but I do think it is
worthwhile to at least attempt to do this, even though what Dan Walsh mentioned
is also correct: desktops are notoriously difficult to use a mandatory access
control system on.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 11 Aug 2015 19:18:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-08-11:/2015/08/why-we-do-confine-firefox/</guid><category>SELinux</category><category>gentoo</category><category>selinux</category><category>policy</category><category>firefox</category><category>cve</category><category>vulnerability</category><category>xdg</category></item><item><title>Can SELinux substitute DAC?</title><link>https://blog.siphos.be/2015/08/can-selinux-substitute-dac/</link><description>&lt;p&gt;A nice &lt;a href="https://twitter.com/sjvermeu/status/630107879123623936"&gt;twitter discussion&lt;/a&gt;
with &lt;a href="https://twitter.com/erlheldata"&gt;Erling Hellenäs&lt;/a&gt; caught my full attention later
when I was heading home: Can SELinux substitute DAC? I know it can't and doesn't
in the current implementation, but why not and what would be needed?&lt;/p&gt;
&lt;p&gt;SELinux is implemented through the &lt;a href="https://en.wikipedia.org/wiki/Linux_Security_Modules"&gt;Linux Security Modules framework&lt;/a&gt;
which allows for different security systems to be implemented and integrated
in the Linux kernel. Through LSM, various security-sensitive operations can be
secured further through &lt;em&gt;additional&lt;/em&gt; access checks. This criteria was made to
have LSM be as minimally invasive as possible.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 09 Aug 2015 14:48:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-08-09:/2015/08/can-selinux-substitute-dac/</guid><category>SELinux</category><category>selinux</category><category>refpolicy</category><category>linux</category><category>dac</category><category>lsm</category></item><item><title>Filtering network access per application</title><link>https://blog.siphos.be/2015/08/filtering-network-access-per-application/</link><description>&lt;p&gt;Iptables (and the successor nftables) is a powerful packet filtering system in
the Linux kernel, able to create advanced firewall capabilities. One of the 
features that it &lt;em&gt;cannot&lt;/em&gt; provide is per-application filtering. Together with
SELinux however, it is possible to implement this on a &lt;em&gt;per domain&lt;/em&gt; basis.&lt;/p&gt;
&lt;p&gt;SELinux does not know applications, but it knows domains. If we ensure that each
application runs in its own domain, then we can leverage the firewall
capabilities with SELinux to only allow those domains access that we need.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 07 Aug 2015 03:49:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-08-07:/2015/08/filtering-network-access-per-application/</guid><category>SELinux</category><category>selinux</category><category>network</category><category>iptables</category></item><item><title>Don't confuse SELinux with its policy</title><link>https://blog.siphos.be/2015/08/dont-confuse-selinux-with-its-policy/</link><description>&lt;p&gt;With the increased attention that SELinux is getting thanks to its inclusion in
recent &lt;a href="https://source.android.com/devices/tech/security/selinux/"&gt;Android&lt;/a&gt;
releases, more and more people are understanding that SELinux is not a singular
security solution. Many administrators are still disabling SELinux on their 
servers because it does not play well with their day-to-day operations. But
the Android inclusion shows that SELinux itself is not the culprit for this:
it is the policy.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 03 Aug 2015 01:49:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-08-03:/2015/08/dont-confuse-selinux-with-its-policy/</guid><category>SELinux</category><category>selinux</category><category>policy</category><category>cil</category></item><item><title>Loading CIL modules directly</title><link>https://blog.siphos.be/2015/07/loading-cil-modules-directly/</link><description>&lt;p&gt;In a &lt;a href="http://blog.siphos.be/2015/06/where-does-cil-play-in-the-selinux-system/"&gt;previous
post&lt;/a&gt;
I used the &lt;code&gt;secilc&lt;/code&gt; binary to load an additional test policy. Little did
I know (and that's actually embarrassing because it was one of the
things I complained about) that you can just use the CIL policy as
modules directly.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMMARY --&gt;

&lt;p&gt;With this I mean that a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 15 Jul 2015 15:54:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-07-15:/2015/07/loading-cil-modules-directly/</guid><category>SELinux</category><category>cil</category><category>selinux</category></item><item><title>Intermediate policies</title><link>https://blog.siphos.be/2015/07/intermediate-policies/</link><description>&lt;p&gt;When developing SELinux policies for new software (or existing ones
whose policies I don't agree with) it is often more difficult to finish
the policies so that they are broadly usable. When dealing with personal
policies, having them "just work" is often sufficient. To make the
policies reusable for distributions (or for the upstream project), a
number of things are necessary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Try structuring the policy using the style as suggested by refpolicy
    or Gentoo&lt;/li&gt;
&lt;li&gt;Add the role interfaces that are most likely to be used or required,
    or which are in the current draft implemented differently&lt;/li&gt;
&lt;li&gt;Refactor some of the policies to use refpolicy/Gentoo style
    interfaces&lt;/li&gt;
&lt;li&gt;Remove the comments from the policies (as refpolicy does not want
    too verbose policies)&lt;/li&gt;
&lt;li&gt;Change or update the file context definitions for default
    installations (rather than the custom installations I use)&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 05 Jul 2015 18:17:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-07-05:/2015/07/intermediate-policies/</guid><category>SELinux</category><category>community</category><category>contributions</category><category>policy-development</category><category>selinux</category></item><item><title>Where does CIL play in the SELinux system?</title><link>https://blog.siphos.be/2015/06/where-does-cil-play-in-the-selinux-system/</link><description>&lt;p&gt;SELinux policy developers already have a number of file formats to work
with. Currently, policy code is written in a set of three files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;.te&lt;/code&gt; file contains the SELinux policy code (type
    enforcement rules)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;.if&lt;/code&gt; file contains functions which turn a set of arguments into
    blocks of SELinux policy code (interfaces). These functions are
    called by other interface files or type enforcement files&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;.fc&lt;/code&gt; file contains mappings of file path expressions towards
    labels (file contexts)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These files are compiled into loadable modules (or a base module) which
are then transformed to an active policy. But this is not a single-step
approach.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 13 Jun 2015 23:12:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-06-13:/2015/06/where-does-cil-play-in-the-selinux-system/</guid><category>SELinux</category><category>cil</category><category>selinux</category><category>userspace</category></item><item><title>Live SELinux userspace ebuilds</title><link>https://blog.siphos.be/2015/06/live-selinux-userspace-ebuilds/</link><description>&lt;p&gt;In between courses, I pushed out live ebuilds for the SELinux userspace
applications: libselinux, policycoreutils, libsemanage, libsepol,
sepolgen, checkpolicy and secilc. These live ebuilds (with Gentoo
version 9999) pull in the current development code of the &lt;a href="https://github.com/SELinuxProject/selinux"&gt;SELinux
userspace&lt;/a&gt; so that developers
and contributors can already work with in-progress code developments as
well as see how they work on a Gentoo platform.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 10 Jun 2015 20:07:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-06-10:/2015/06/live-selinux-userspace-ebuilds/</guid><category>Gentoo</category><category>cil</category><category>Gentoo</category><category>selinux</category><category>userspace</category></item><item><title>Testing with permissive domains</title><link>https://blog.siphos.be/2015/05/testing-with-permissive-domains/</link><description>&lt;p&gt;When testing out new technologies or new setups, not having (proper)
SELinux policies can be a nuisance. Not only are the number of SELinux
policies that are available through the standard repositories limited,
some of these policies are not even written with the same level of
confinement that an administrator might expect. Or perhaps the
technology to be tested is used in a completely different manner.&lt;/p&gt;
&lt;p&gt;Without proper policies, any attempt to start such a daemon or
application might or will cause permission violations. In many cases,
developers or users tend to disable SELinux enforcing then so that they
can continue playing with the new technology. And why not? After all,
policy development is to be done &lt;em&gt;after&lt;/em&gt; the technology is understood.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 18 May 2015 13:40:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-05-18:/2015/05/testing-with-permissive-domains/</guid><category>SELinux</category><category>permissive</category><category>policy</category><category>selinux</category><category>semanage</category><category>test</category></item><item><title>Audit buffering and rate limiting</title><link>https://blog.siphos.be/2015/05/audit-buffering-and-rate-limiting/</link><description>&lt;p&gt;Be it because of SELinux experiments, or through general audit
experiments, sometimes you'll get in touch with a message similar to the
following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;audit: audit_backlog=321 &amp;gt; audit_backlog_limit=320
audit: audit_lost=44395 audit_rate_limit=0 audit_backlog_limit=320
audit: backlog limit exceeded
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;!-- PELICAN_END_SUMMMARY --&gt;

&lt;p&gt;The message shows …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 10 May 2015 14:18:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-05-10:/2015/05/audit-buffering-and-rate-limiting/</guid><category>Free-Software</category><category>audit</category><category>kernel</category><category>security</category><category>selinux</category></item><item><title>Use change management when you are using SELinux to its fullest</title><link>https://blog.siphos.be/2015/04/use-change-management-when-you-are-using-selinux-to-its-fullest/</link><description>&lt;p&gt;If you are using SELinux on production systems (with which I mean
systems that you offer services with towards customers or other parties
beyond you, yourself and your ego), please consider proper change
management if you don't do already. SELinux is a very sensitive security
subsystem - not in the sense …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 30 Apr 2015 20:58:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-04-30:/2015/04/use-change-management-when-you-are-using-selinux-to-its-fullest/</guid><category>SELinux</category><category>change-management</category><category>policy</category><category>selinux</category></item><item><title>Moving closer to 2.4 stabilization</title><link>https://blog.siphos.be/2015/04/moving-closer-to-2-4-stabilization/</link><description>&lt;p&gt;The &lt;a href="https://github.com/SELinuxProject/selinux/wiki"&gt;SELinux userspace&lt;/a&gt;
project has released version 2.4 in february this year, after release
candidates have been tested for half a year. After its release, we at
the &lt;a href="https://wiki.gentoo.org/wiki/Project:Hardened"&gt;Gentoo Hardened&lt;/a&gt;
project have been working hard to integrate it within Gentoo. This
effort has been made a bit more difficult …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 27 Apr 2015 19:18:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-04-27:/2015/04/moving-closer-to-2-4-stabilization/</guid><category>Gentoo</category><category>2.4</category><category>Gentoo</category><category>hardened</category><category>selinux</category><category>userspace</category></item><item><title>CIL and attributes</title><link>https://blog.siphos.be/2015/02/cil-and-attributes/</link><description>&lt;p&gt;I keep on struggling to remember this, so let's make a blog post out of
it ;-)&lt;/p&gt;
&lt;p&gt;When the SELinux policy is being built, recent userspace (2.4 and
higher) will convert the policy into CIL language, and then build the
binary policy. When the policy supports type attributes, these are …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 15 Feb 2015 15:49:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-02-15:/2015/02/cil-and-attributes/</guid><category>SELinux</category><category>attribute</category><category>cil</category><category>selinux</category></item><item><title>SELinux is great for enterprises (but many don't know it yet)</title><link>https://blog.siphos.be/2015/01/selinux-is-great-for-enterprises-but-many-dont-know-it-yet/</link><description>&lt;p&gt;Large companies that handle their own IT often have internal support
teams for many of the technologies that they use. Most of the time, this
is for reusable components like database technologies, web application
servers, operating systems, middleware components (like file transfers,
messaging infrastructure, ...) and more. All components that are …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 03 Jan 2015 13:36:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-01-03:/2015/01/selinux-is-great-for-enterprises-but-many-dont-know-it-yet/</guid><category>SELinux</category><category>companies</category><category>configuration</category><category>engineering</category><category>enterprise</category><category>selinux</category></item><item><title>Why does it access /etc/shadow?</title><link>https://blog.siphos.be/2014/12/why-does-it-access-etcshadow/</link><description>&lt;p&gt;While updating the SELinux policy for the Courier IMAP daemon, I noticed
that it (well, the authdaemon that is part of Courier) wanted to access
&lt;code&gt;/etc/shadow&lt;/code&gt;, which is of course a big no-no. It doesn't take long to
know that this is through the PAM support (more specifically,
&lt;code&gt;pam …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 30 Dec 2014 22:48:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-12-30:/2014/12/why-does-it-access-etcshadow/</guid><category>SELinux</category><category>chkpwd</category><category>pam</category><category>selinux</category><category>shadow</category><category>unix_chkpwd</category></item><item><title>Sometimes I forget how important communication is</title><link>https://blog.siphos.be/2014/12/sometimes-i-forget-how-important-communication-is/</link><description>&lt;p&gt;Free software (and documentation) developers don't always have all the
time they want. Instead, they grab whatever time they have to do what
they believe is the most productive - be it documentation editing,
programming, updating ebuilds, SELinux policy improvements and what not.
But they often don't take the time to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 10 Dec 2014 20:38:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-12-10:/2014/12/sometimes-i-forget-how-important-communication-is/</guid><category>Gentoo</category><category>communication</category><category>developer</category><category>Gentoo</category><category>selinux</category><category>time</category></item><item><title>No more DEPENDs for SELinux policy package dependencies</title><link>https://blog.siphos.be/2014/11/no-more-depends-for-selinux-policy-package-dependencies/</link><description>&lt;p&gt;I just finished updating 102 packages. The change? Removing the
following from the ebuilds:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;DEPEND=&amp;quot;selinux? ( sec-policy/selinux-${packagename} )&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the past, we needed this construction in both DEPEND and RDEPEND.
Recently however, the SELinux eclass got updated with some logic to
relabel files after the policy package is deployed …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 02 Nov 2014 14:51:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-11-02:/2014/11/no-more-depends-for-selinux-policy-package-dependencies/</guid><category>Gentoo</category><category>DEPEND</category><category>ebuild</category><category>Gentoo</category><category>RDEPEND</category><category>selinux</category></item><item><title>Using multiple priorities with modules</title><link>https://blog.siphos.be/2014/10/using-multiple-priorities-with-modules/</link><description>&lt;p&gt;One of the new features of the 2.4 SELinux userspace is support for
module priorities. The idea is that distributions and administrators can
override a (pre)loaded SELinux policy module with another module without
removing the previous module. This lower-version module will remain in
the store, but will not …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 31 Oct 2014 18:24:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-10-31:/2014/10/using-multiple-priorities-with-modules/</guid><category>SELinux</category><category>priorities</category><category>priority</category><category>selinux</category><category>semodule</category></item><item><title>Migrating to SELinux userspace 2.4 (small warning for users)</title><link>https://blog.siphos.be/2014/10/migrating-to-selinux-userspace-2-4-small-warning-for-users/</link><description>&lt;p&gt;In a few moments, SELinux users which have the \~arch KEYWORDS set
(either globally or for the SELinux utilities in particular) will notice
that the SELinux userspace will upgrade to version 2.4 (release
candidate 5 for now). This upgrade comes with a manual step that needs
to be performed …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 30 Oct 2014 19:44:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-10-30:/2014/10/migrating-to-selinux-userspace-2-4-small-warning-for-users/</guid><category>Gentoo</category><category>cil</category><category>Gentoo</category><category>migrate</category><category>selinux</category><category>semanage</category><category>upgrade</category><category>userspace</category></item><item><title>Some changes under the hood</title><link>https://blog.siphos.be/2014/08/some-changes-under-the-hood/</link><description>&lt;p&gt;In between conferences, technical writing jobs and traveling, we did a
few changes under the hood for SELinux in Gentoo.&lt;/p&gt;
&lt;p&gt;First of all, new policies are bumped and also stabilized (2.20130411-r3
is now stable, 2.20130411-r5 is \~arch). These have a few updates
(mergers from upstream), and r5 also …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 09 Aug 2014 21:45:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-08-09:/2014/08/some-changes-under-the-hood/</guid><category>Gentoo</category><category>eclass</category><category>Gentoo</category><category>git</category><category>hardened</category><category>refpolicy</category><category>selinux</category></item><item><title>D-Bus and SELinux</title><link>https://blog.siphos.be/2014/06/d-bus-and-selinux/</link><description>&lt;p&gt;After a &lt;a href="http://blog.siphos.be/2014/06/d-bus-quick-recap/"&gt;post about
D-Bus&lt;/a&gt; comes the
inevitable related post about SELinux with D-Bus.&lt;/p&gt;
&lt;p&gt;Some users might not know that D-Bus is an SELinux-aware application.
That means it has SELinux-specific code in it, which has the D-Bus
behavior based on the SELinux policy (and might not necessarily honor
the "permissive …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 30 Jun 2014 20:07:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-06-30:/2014/06/d-bus-and-selinux/</guid><category>SELinux</category><category>busconfig</category><category>d-bus</category><category>dbus</category><category>linux</category><category>policy</category><category>selinux</category></item><item><title>Chroots for SELinux enabled applications</title><link>https://blog.siphos.be/2014/06/chroots-for-selinux-enabled-applications/</link><description>&lt;p&gt;Today I had to prepare a chroot jail (thank you grsecurity for the neat
additional chroot protection features) for a SELinux-enabled
application. As a result, "just" making a chroot was insufficient: the
application needed access to &lt;code&gt;/sys/fs/selinux&lt;/code&gt;. Of course, granting
access to &lt;code&gt;/sys&lt;/code&gt; is not something I like …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 22 Jun 2014 20:16:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-06-22:/2014/06/chroots-for-selinux-enabled-applications/</guid><category>SELinux</category><category>bind-mount</category><category>bindmount</category><category>mount</category><category>read-only</category><category>ro</category><category>selinux</category></item><item><title>Visualizing constraints</title><link>https://blog.siphos.be/2014/05/visualizing-constraints/</link><description>&lt;p&gt;SELinux constraints are an interesting way to implement specific, well,
constraints on what SELinux allows. Most SELinux rules that users come
in contact with are purely type oriented: allow something to do
something against something. In fact, most of the SELinux rules applied
on a system are such &lt;code&gt;allow&lt;/code&gt; rules …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 31 May 2014 03:47:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-05-31:/2014/05/visualizing-constraints/</guid><category>SELinux</category><category>constrain</category><category>constraints</category><category>dot</category><category>graphviz</category><category>seinfo</category><category>selinux</category></item><item><title>Revamped our SELinux documentation</title><link>https://blog.siphos.be/2014/05/revamped-our-selinux-documentation/</link><description>&lt;p&gt;In the move to the &lt;a href="https://wiki.gentoo.org"&gt;Gentoo wiki&lt;/a&gt;, I have
updated and revamped most of our SELinux documentation. The end result
can be seen through the &lt;a href="https://wiki.gentoo.org/wiki/SELinux"&gt;main SELinux
page&lt;/a&gt;. Most of the content is
below this page (as subpages).&lt;/p&gt;
&lt;p&gt;We start with a new &lt;a href="https://wiki.gentoo.org/wiki/SELinux/Quick_introduction"&gt;introduction to
SELinux&lt;/a&gt;
article which goes over …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 12 May 2014 22:15:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-05-12:/2014/05/revamped-our-selinux-documentation/</guid><category>Gentoo</category><category>documentation</category><category>Gentoo</category><category>selinux</category><category>wiki</category></item><item><title>Dropping sesandbox support</title><link>https://blog.siphos.be/2014/05/dropping-sesandbox-support/</link><description>&lt;p&gt;A &lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3215"&gt;vulnerability in
seunshare&lt;/a&gt;,
part of &lt;code&gt;policycoreutils&lt;/code&gt;, came to light recently (through &lt;a href="https://bugs.gentoo.org/show_bug.cgi?id=509896"&gt;bug
509896&lt;/a&gt;). The issue is
within &lt;code&gt;libcap-ng&lt;/code&gt; actually, but the specific situation in which the
vulnerability can be exploited is only available in &lt;code&gt;seunshare&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, &lt;code&gt;seunshare&lt;/code&gt; is not built by default on Gentoo. You need to define
&lt;code&gt;USE …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 09 May 2014 21:03:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-05-09:/2014/05/dropping-sesandbox-support/</guid><category>Gentoo</category><category>Gentoo</category><category>hardened</category><category>policycoreutils</category><category>selinux</category><category>seunshare</category><category>vulnerability</category></item><item><title>If things are weird, check for policy.29</title><link>https://blog.siphos.be/2014/04/if-things-are-weird-check-for-policy-29/</link><description>&lt;p&gt;Today we analyzed a weird issue one of our SELinux users had with their
system. He had a denial when calling &lt;strong&gt;audit2allow&lt;/strong&gt;, informing us that
&lt;code&gt;sysadm_t&lt;/code&gt; had no rights to read the SELinux policy. This is a known
issue that has been resolved in our current SELinux policy repository …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 17 Apr 2014 21:01:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-04-17:/2014/04/if-things-are-weird-check-for-policy-29/</guid><category>SELinux</category><category>load_policy</category><category>policy</category><category>selinux</category><category>semanage</category></item><item><title>Proof of concept for USE enabled policies</title><link>https://blog.siphos.be/2014/03/proof-of-concept-for-use-enabled-policies/</link><description>&lt;p&gt;&lt;em&gt;tl;dr:&lt;/em&gt; Some (&lt;code&gt;-9999&lt;/code&gt;) policy ebuilds now have &lt;code&gt;USE&lt;/code&gt; support for
building in (or leaving out) SELinux policy statements.&lt;/p&gt;
&lt;p&gt;One of the "problems" I have been facing since I took on the maintenance
of SELinux policies within Gentoo Hardened is the (seeming) inability to
make a "least privilege" policy that …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 31 Mar 2014 18:33:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-03-31:/2014/03/proof-of-concept-for-use-enabled-policies/</guid><category>Gentoo</category><category>alsa</category><category>policy</category><category>selinux</category></item><item><title>Decoding the hex-coded path information in AVC denials</title><link>https://blog.siphos.be/2014/03/decoding-the-hex-coded-path-information-in-avc-denials/</link><description>&lt;p&gt;When investigating AVC denials, some denials show a path that isn't
human readable, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;type=AVC msg=audit(1396189189.734:1913): avc:  denied  { execute } for  pid=17955 comm=&amp;quot;emerge&amp;quot; path=2F7661722F666669737A69596157202864656C6574656429 dev=&amp;quot;dm-3&amp;quot; ino=1838 scontext=staff_u:sysadm_r:portage_t tcontext=staff_u:object_r:var_t …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 30 Mar 2014 16:37:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-03-30:/2014/03/decoding-the-hex-coded-path-information-in-avc-denials/</guid><category>SELinux</category><category>avc</category><category>decode</category><category>path</category><category>selinux</category></item><item><title>Querying SELinux policy for boolean information</title><link>https://blog.siphos.be/2014/03/querying-selinux-policy-for-boolean-information/</link><description>&lt;p&gt;Within an SELinux policy, certain access vectors (permissions) can be
conditionally granted based on the value of a &lt;em&gt;SELinux boolean&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To find the list of SELinux booleans that are available on your system,
you can use the &lt;strong&gt;getsebool -a&lt;/strong&gt; method, or &lt;strong&gt;semanage boolean -l&lt;/strong&gt;. The
latter also displays the description …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 28 Mar 2014 23:38:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-03-28:/2014/03/querying-selinux-policy-for-boolean-information/</guid><category>SELinux</category><category>boolean</category><category>query</category><category>selinux</category><category>sesearch</category></item><item><title>Talk about SELinux on GSE Linux/Security</title><link>https://blog.siphos.be/2014/03/talk-about-selinux-on-gse-linuxsecurity/</link><description>&lt;p&gt;On today's &lt;a href="http://www.gsebelux.com"&gt;GSE Linux / GSE Security&lt;/a&gt; meeting
(in cooperation with
&lt;a href="http://www.imug.be/events_be/IMUG_LinuxSecurity_Event.asp"&gt;IMUG&lt;/a&gt;) I
gave a small (30 minutes) presentation about what SELinux is. The
&lt;a href="http://dev.gentoo.org/~swift/blog/201403/20140325_GSE_SELinux.pdf"&gt;slides are
online&lt;/a&gt;
and cover two aspects of SELinux: some of its design principles, and
then a set of features provided by SELinux. The talk is directed …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 25 Mar 2014 23:11:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-03-25:/2014/03/talk-about-selinux-on-gse-linuxsecurity/</guid><category>Security</category><category>gse</category><category>mainframe</category><category>s390x</category><category>security</category><category>selinux</category><category>zenterprise</category></item><item><title>Hidden symbols and dynamic linking</title><link>https://blog.siphos.be/2014/03/hidden-symbols-and-dynamic-linking/</link><description>&lt;p&gt;A few weeks ago, we introduced an error in the (\~arch) &lt;code&gt;libselinux&lt;/code&gt;
ebuild which caused the following stacktrace to occur every time the
&lt;strong&gt;semanage&lt;/strong&gt; command was invoked:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~ # semanage
Traceback (most recent call last):
  File &amp;quot;/usr/lib/python-exec/python2.7/semanage&amp;quot;, line 27, in 
    import seobject
  File &amp;quot;/usr/lib64/python2.7 …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 24 Mar 2014 21:14:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-03-24:/2014/03/hidden-symbols-and-dynamic-linking/</guid><category>Gentoo</category><category>elf</category><category>hidden</category><category>selinux</category><category>symbols</category></item><item><title>Switching context depending on user code-wise</title><link>https://blog.siphos.be/2014/01/switching-context-depending-on-user-code-wise/</link><description>&lt;p&gt;I blogged about how SELinux decides what the context should be for a
particular Linux user; how it checks the default context(s) and tells
the SELinux-aware application on what the new context should be. Let's
look into the C code that does so, and how an application should behave …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 12 Jan 2014 22:43:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-01-12:/2014/01/switching-context-depending-on-user-code-wise/</guid><category>SELinux</category><category>default_context</category><category>domain</category><category>libselinux</category><category>selinux</category><category>selinux-aware</category><category>transition</category></item><item><title>How does foo_t get this privilege?</title><link>https://blog.siphos.be/2014/01/how-does-foo_t-get-this-privilege/</link><description>&lt;p&gt;Today a question was raised how the unprivileged user domain &lt;code&gt;user_t&lt;/code&gt;
was allowed to write to &lt;code&gt;cgroup_t&lt;/code&gt; files. There is nothing obvious about
that in the &lt;code&gt;roles/unprivuser.te&lt;/code&gt; file, so what gives?&lt;/p&gt;
&lt;p&gt;I used a simple script (which I've been using for a while already)
called &lt;strong&gt;seshowtree …&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 05 Jan 2014 04:14:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-01-05:/2014/01/how-does-foo_t-get-this-privilege/</guid><category>SELinux</category><category>policy</category><category>selinux</category><category>seshowtree</category></item><item><title>Oh it is cron again...</title><link>https://blog.siphos.be/2014/01/oh-it-is-cron-again/</link><description>&lt;p&gt;Today I was pointed to the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;test fcron[6722]: fcron[6722] 3.1.2 started
test fcron[6722]: Cannot bind socket to &amp;#39;/var/run/fcron.fifo&amp;#39;: Permission denied
test fcron[6722]:  &amp;quot;at&amp;quot; reboot jobs will only be run at computer&amp;#39;s startup.
test fcron[6722]: updating configuration from …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 03 Jan 2014 21:05:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-01-03:/2014/01/oh-it-is-cron-again/</guid><category>SELinux</category><category>cron</category><category>selinux</category></item><item><title>Private key handling and SELinux protection</title><link>https://blog.siphos.be/2014/01/private-key-handling-and-selinux-protection/</link><description>&lt;p&gt;In this post I'll give some insight in a &lt;em&gt;possible&lt;/em&gt; SELinux policy for a
script I wrote.&lt;/p&gt;
&lt;p&gt;The script is a certificate authority handling script, in which I can
generate a private key (and certificate assigned to it), sign the
certificate either by itself (for the root CA key) or …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 02 Jan 2014 04:00:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-01-02:/2014/01/private-key-handling-and-selinux-protection/</guid><category>SELinux</category><category>ca</category><category>certcli</category><category>policy</category><category>selinux</category></item><item><title>Limiting file access with SELinux alone?</title><link>https://blog.siphos.be/2013/12/limiting-file-access-with-selinux-alone/</link><description>&lt;p&gt;While writing a small script to handle simple certificate authority
activities using OpenSSL, I considered how to properly protect the files
that OpenSSL uses for these activities. As you are probably aware, a
system that hosts the necessary files for CA activities (like signing
certificate requests) should be very secure …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 31 Dec 2013 21:18:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-12-31:/2013/12/limiting-file-access-with-selinux-alone/</guid><category>SELinux</category><category>access</category><category>acl</category><category>file-access</category><category>Gentoo</category><category>selinux</category></item><item><title>Gentoo SELinux policy release script</title><link>https://blog.siphos.be/2013/12/gentoo-selinux-policy-release-script/</link><description>&lt;p&gt;A few months ago, I wrote a small script that aids in the creation of
new SELinux policy packages. The script is on the
&lt;a href="http://git.overlays.gentoo.org/gitweb/?p=proj/hardened-refpolicy.git;a=summary"&gt;repository&lt;/a&gt;
itself, in the &lt;code&gt;gentoo/&lt;/code&gt; subdirectory, and is called
&lt;code&gt;release-prepare.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The reason for the script is that there are a number of steps to
perform …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 11 Dec 2013 18:37:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-12-11:/2013/12/gentoo-selinux-policy-release-script/</guid><category>Gentoo</category><category>Gentoo</category><category>hardened</category><category>policy</category><category>release</category><category>selinux</category></item><item><title>The mix of libffi with other changes</title><link>https://blog.siphos.be/2013/11/the-mix-of-libffi-with-other-changes/</link><description>&lt;p&gt;I &lt;a href="http://blog.siphos.be/2013/04/securely-handling-libffi/"&gt;once again&lt;/a&gt;
came across libffi. Not only does the libffi approach fight with SELinux
alone, it also triggers the TPE (Trusted Path Execution) protections in
grSecurity. And when I tried to reinstall Portage, Portage seemed to
create some sort of runtime environment in a temporary directory as
well, and …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 03 Nov 2013 10:27:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-11-03:/2013/11/the-mix-of-libffi-with-other-changes/</guid><category>Security</category><category>Gentoo</category><category>hardened</category><category>libffi</category><category>portage</category><category>selinux</category></item><item><title>It has finally arrived: SELinux System Administration</title><link>https://blog.siphos.be/2013/09/it-has-finally-arrived-selinux-system-administration/</link><description>&lt;p&gt;Almost everyone has it - either physical or in their heads: a list of
things you want to do or achieve before you... well, stop existing. Mine
still has numerous things on it (I should get on it, I know) but one of
the items on that list has recently been …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 27 Sep 2013 15:10:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-09-27:/2013/09/it-has-finally-arrived-selinux-system-administration/</guid><category>SELinux</category><category>administration</category><category>book</category><category>fedora</category><category>Gentoo</category><category>packt</category><category>packtpub</category><category>selinux</category><category>system</category></item><item><title>Why our policies don't like emerge --config</title><link>https://blog.siphos.be/2013/08/why-our-policies-dont-like-emerge-config/</link><description>&lt;p&gt;One of the features that Portage provides is to have post-processing
done on request of the administrator for certain packages. For instance,
for the &lt;code&gt;dev-db/postgresql-server&lt;/code&gt; package we can call its
&lt;code&gt;pkg_config()&lt;/code&gt; phase to create the PostgreSQL instance and configure it
so that the configuration of the database is …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 23 Aug 2013 11:53:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-08-23:/2013/08/why-our-policies-dont-like-emerge-config/</guid><category>Gentoo</category><category>Gentoo</category><category>pkg_config</category><category>portage</category><category>selinux</category></item><item><title>Network routing based on SELinux?</title><link>https://blog.siphos.be/2013/08/network-routing-based-on-selinux/</link><description>&lt;p&gt;Today we had a question on #selinux if it was possible to route traffic
of a specific process using SELinux. The answer to this is "no",
although it has to be explained a bit in more detail.&lt;/p&gt;
&lt;p&gt;SELinux does not route traffic. SELinux is a local mandatory access
control system …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 21 Aug 2013 19:43:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-08-21:/2013/08/network-routing-based-on-selinux/</guid><category>SELinux</category><category>ipsec</category><category>netlabel</category><category>networking</category><category>secmark</category><category>selinux</category></item><item><title>Using CUSTOM_BUILDOPT in refpolicy for USE flag-alike functionality?</title><link>https://blog.siphos.be/2013/08/using-custom_buildopt-in-refpolicy-for-use-flag-alike-functionality/</link><description>&lt;p&gt;As you are probably aware, Gentoo uses the &lt;a href="http://oss.tresys.com/projects/refpolicy/"&gt;reference
policy&lt;/a&gt; as its base for
SELinux policies. Yes, we do customize it and not everything is already
pushed upstream (for instance, our approach to use &lt;code&gt;xdg_*_home_t&lt;/code&gt;
customizable types to further restrict user application access has been
sent up for …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 16 Aug 2013 09:17:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-08-16:/2013/08/using-custom_buildopt-in-refpolicy-for-use-flag-alike-functionality/</guid><category>Gentoo</category><category>boolean</category><category>Gentoo</category><category>policy</category><category>selinux</category><category>use</category><category>useflag</category></item><item><title>Some things sound more scary than they are</title><link>https://blog.siphos.be/2013/08/some-things-sound-more-scary-than-they-are/</link><description>&lt;p&gt;A few days ago I finally got to the next thing on my &lt;em&gt;Want to do this
year&lt;/em&gt; list: put a new android
(&lt;a href="http://www.cyanogenmod.org/"&gt;Cyanogenmod&lt;/a&gt;) on my tablet, which was
still running the stock Android - but hasn't seen any updates in more
than a year. Considering the (in)security of Android …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 15 Aug 2013 10:02:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-08-15:/2013/08/some-things-sound-more-scary-than-they-are/</guid><category>SELinux</category><category>android</category><category>grsecurity</category><category>pax</category><category>selinux</category><category>tablet</category></item><item><title>And now, 31 days later...</title><link>https://blog.siphos.be/2013/08/and-now-31-days-later/</link><description>&lt;p&gt;... the &lt;a href="http://www.gentoo.org/proj/en/hardened"&gt;Gentoo Hardened&lt;/a&gt; team
had its monthly online meeting again ;-)&lt;/p&gt;
&lt;p&gt;On the agenda were the usual suspects, such as the &lt;em&gt;toolchain&lt;/em&gt;. In this
category, Zorry mentioned that he has a fix for GCC 4.8.1 for the
&lt;code&gt;hardenedno*&lt;/code&gt; and vanilla &lt;code&gt;gcc-config&lt;/code&gt; options which will be added to
the tree …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 01 Aug 2013 22:43:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-08-01:/2013/08/and-now-31-days-later/</guid><category>Gentoo</category><category>Gentoo</category><category>grsecurity</category><category>hardened</category><category>irc</category><category>irl</category><category>meeting</category><category>minutes</category><category>pax</category><category>project</category><category>selinux</category><category>toolchain</category></item><item><title>Rebuilding SELinux contexts with sefcontext_compile</title><link>https://blog.siphos.be/2013/07/rebuilding-selinux-contexts-with-sefcontext_compile/</link><description>&lt;p&gt;A recent update of &lt;em&gt;libpcre&lt;/em&gt; caused the binary precompiled regular
expression files of SELinux to become outdated (and even blatantly
wrong). The details are in bug &lt;a href="https://bugs.gentoo.org/471718"&gt;471718&lt;/a&gt;
but that doesn't help the users that are already facing the problem, nor
have we found a good place to put the fix …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 08 Jul 2013 20:55:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-07-08:/2013/07/rebuilding-selinux-contexts-with-sefcontext_compile/</guid><category>SELinux</category><category>hardened</category><category>pcre</category><category>selinux</category></item><item><title>Adding mcstrans to Gentoo</title><link>https://blog.siphos.be/2013/07/adding-mcstrans-to-gentoo/</link><description>&lt;p&gt;If you use SELinux, you might be using an MLS-enabled policy. These are
policies that support sensitivity labels on resources and domains. In
Gentoo, these are supported in the &lt;code&gt;mcs&lt;/code&gt; and &lt;code&gt;mls&lt;/code&gt; policy stores. Now
sensitivity ranges are fun to work with, but the moment you have several
sensitivity levels …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 07 Jul 2013 20:38:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-07-07:/2013/07/adding-mcstrans-to-gentoo/</guid><category>Gentoo</category><category>categories</category><category>mcs</category><category>mcstrans</category><category>mls</category><category>selinux</category><category>sensitivity</category></item><item><title>A SELinux policy for incron: finishing up</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-finishing-up/</link><description>&lt;p&gt;After 9 posts, it's time to wrap things up. You can review the final
results online
(&lt;a href="http://dev.gentoo.org/~swift/blog/01/incron.te.txt"&gt;incron.te&lt;/a&gt;,
&lt;a href="http://dev.gentoo.org/~swift/blog/01/incron.if.txt"&gt;incron.if&lt;/a&gt; and
&lt;a href="http://dev.gentoo.org/~swift/blog/01/incron.fc.txt"&gt;incron.fc&lt;/a&gt;) and
adapt to your own needs if you want. But we should also review what we
have accomplished so far...&lt;/p&gt;
&lt;p&gt;We built the start of an entire …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 31 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-31:/2013/05/a-selinux-policy-for-incron-finishing-up/</guid><category>SELinux</category><category>incron</category><category>policy</category><category>selinux</category></item><item><title>A SELinux policy for incron: using booleans</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-using-booleans/</link><description>&lt;p&gt;After using a default set of directories to watch, and &lt;a href="http://blog.siphos.be/2013/05/a-selinux-policy-for-incron-marking-types-eligible-for-watching/"&gt;allowing admins
to mark other
types&lt;/a&gt;
as such as well, let's consider another approach for making the policy
more flexible: booleans. The idea now is that a boolean called
&lt;em&gt;incron_notify_non_security_files&lt;/em&gt; enables &lt;strong&gt;incrond&lt;/strong&gt; to be
notified on …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 30 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-30:/2013/05/a-selinux-policy-for-incron-using-booleans/</guid><category>SELinux</category><category>boolean</category><category>incron</category><category>policy</category><category>selinux</category></item><item><title>A SELinux policy for incron: marking types eligible for watching</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-marking-types-eligible-for-watching/</link><description>&lt;p&gt;In the
&lt;a herf="http://blog.siphos.be/2013/05/a-selinux-policy-for-incron-default-set/"&gt;previous
post&lt;/a&gt; we made &lt;strong&gt;incrond&lt;/strong&gt; able to watch &lt;code&gt;public_content_t&lt;/code&gt; and
&lt;code&gt;public_content_rw_t&lt;/code&gt; types. However, this is not scalable, so we might
want to be able to update the policy more dynamically with additional
types. To accomplish this, we will make types eligible for watching …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 29 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-29:/2013/05/a-selinux-policy-for-incron-marking-types-eligible-for-watching/</guid><category>SELinux</category><category>attribute</category><category>incrond</category><category>selinux</category><category>watch</category></item><item><title>A SELinux policy for incron: default set</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-default-set/</link><description>&lt;p&gt;I finished the last post a bit with a
&lt;a href="http://blog.siphos.be/2013/05/a-selinux-policy-for-incron-the-incrond-daemon/"&gt;cliffhanger&lt;/a&gt;
as &lt;strong&gt;incrond&lt;/strong&gt; is still not working properly, and we got a few denials
that needed to be resolved; here they are again for your convenience:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;type=AVC msg=audit(1368734110.912:28353): avc:  denied  { getattr } for  pid=9716 comm=&amp;quot;incrond …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 28 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-28:/2013/05/a-selinux-policy-for-incron-default-set/</guid><category>SELinux</category><category>booleans</category><category>incrond</category><category>policy</category><category>selinux</category></item><item><title>A SELinux policy for incron: the incrond daemon</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-the-incrond-daemon/</link><description>&lt;p&gt;With &lt;code&gt;incrontab_t&lt;/code&gt; (hopefully) complete, let's look at the &lt;code&gt;incrond_t&lt;/code&gt;
domain. As this domain will also be used to execute the user (and
system) commands provided through the incrontabs, we need to consider
how we are going to deal with this wide range of possible permissions
that it might …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 27 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-27:/2013/05/a-selinux-policy-for-incron-the-incrond-daemon/</guid><category>SELinux</category><category>incrond</category><category>selinux</category></item><item><title>A SELinux policy for incron: new types and transitions</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-new-types-and-transitions/</link><description>&lt;p&gt;So I've shown the &lt;a href="http://blog.siphos.be/2013/05/a-selinux-policy-for-incron-basic-set-for-incrontab/"&gt;iterative approach
used&lt;/a&gt;
to develop policies. Again, please be aware that this is my way of
developing policies, other policy developers might have a different
approach. We were working on the &lt;strong&gt;incrontab&lt;/strong&gt; command, so let's
continue with trying to create a new user incrontab:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ incrontab -e …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 26 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-26:/2013/05/a-selinux-policy-for-incron-new-types-and-transitions/</guid><category>SELinux</category><category>incron</category><category>policy</category><category>selinux</category></item><item><title>A SELinux policy for incron: basic set for incrontab</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-basic-set-for-incrontab/</link><description>&lt;p&gt;Now that our &lt;a href="http://blog.siphos.be/2013/05/a-selinux-policy-for-incron-our-first-interface/"&gt;regular user is
allowed&lt;/a&gt;
to execute &lt;strong&gt;incrontab&lt;/strong&gt;, let's fire it up and look at the denials to
build up the policy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ incrontab --help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That doesn't show much does it? Well, if you look into the &lt;code&gt;audit.log&lt;/code&gt;
(or &lt;code&gt;avc.log&lt;/code&gt;) file, you'll notice a lot of denials …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 25 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-25:/2013/05/a-selinux-policy-for-incron-basic-set-for-incrontab/</guid><category>SELinux</category><category>incron</category><category>incrontab</category><category>policy</category><category>selinux</category></item><item><title>A SELinux policy for incron: the basic skeleton</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-the-basic-skeleton/</link><description>&lt;p&gt;So, in the &lt;a href="http://blog.siphos.be/2013/05/a-selinux-policy-for-incron-what-does-it-do/"&gt;previous
post&lt;/a&gt;
I talked about &lt;em&gt;incron&lt;/em&gt; and why I think moving it into the existing cron
policy would not be a good idea. It works, somewhat, but is probably not
that future-proof. So we're going to create our own policy for it.&lt;/p&gt;
&lt;p&gt;In SELinux, policies are generally …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 23 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-23:/2013/05/a-selinux-policy-for-incron-the-basic-skeleton/</guid><category>SELinux</category><category>fc</category><category>incron</category><category>policy</category><category>selinux</category><category>skeleton</category><category>te</category></item><item><title>A SELinux policy for incron: what does it do?</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-what-does-it-do/</link><description>&lt;p&gt;In this series of posts, we'll go through the creation of a SELinux
policy for
&lt;a href="http://inotify.aiken.cz/?section=incron&amp;amp;page=doc⟨=en"&gt;incron&lt;/a&gt;, a simple
inotify based cron-like application. I will talk about the various steps
that I would take in the creation of this policy, and give feedback when
certain decisions are taken and why. At …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 22 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-22:/2013/05/a-selinux-policy-for-incron-what-does-it-do/</guid><category>SELinux</category><category>incron</category><category>policy</category><category>selinux</category></item><item><title>Why oh why does a process run in unlabeled_t?</title><link>https://blog.siphos.be/2013/05/why-oh-why-does-a-process-run-in-unlabeled_t/</link><description>&lt;p&gt;If you notice that a process is running in the &lt;code&gt;unlabeled_t&lt;/code&gt; domain, the
first question to ask is how it got there.&lt;/p&gt;
&lt;p&gt;Well, one way is to have a process running in a known domain, like
&lt;code&gt;screen_t&lt;/code&gt;, after which the SELinux policy module that provides this
domain is …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 21 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-21:/2013/05/why-oh-why-does-a-process-run-in-unlabeled_t/</guid><category>SELinux</category><category>policy</category><category>selinux</category><category>unlabeled</category></item><item><title>The weird "audit_access" permission</title><link>https://blog.siphos.be/2013/05/the-weird-audit_access-permission/</link><description>&lt;p&gt;While writing up the posts on capabilities, one thing I had in my mind
was to give some additional information on frequently occurring denials,
such as the &lt;em&gt;dac_override&lt;/em&gt; and &lt;em&gt;dac_read_search&lt;/em&gt; capabilities, and
when they are triggered. For the DAC-related capabilities, policy
developers often notice that these capabilities …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 19 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-19:/2013/05/the-weird-audit_access-permission/</guid><category>SELinux</category><category>access</category><category>audit</category><category>audit_access</category><category>selinux</category></item><item><title>Commandline SELinux policy helper functions</title><link>https://blog.siphos.be/2013/05/commandline-selinux-policy-helper-functions/</link><description>&lt;p&gt;To work on SELinux policies, I use a couple of functions that I can call
on the shell (command line): &lt;strong&gt;seshowif&lt;/strong&gt;, &lt;strong&gt;sefindif&lt;/strong&gt;, &lt;strong&gt;seshowdef&lt;/strong&gt;
and &lt;strong&gt;sefinddef&lt;/strong&gt;. The idea behind the methods is that I want to search
(&lt;em&gt;find&lt;/em&gt;) for an interface (&lt;em&gt;if&lt;/em&gt;) or definition (&lt;em&gt;def&lt;/em&gt;) that contains a
particular method or …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 18 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-18:/2013/05/commandline-selinux-policy-helper-functions/</guid><category>SELinux</category><category>bash</category><category>definition</category><category>functions</category><category>interface</category><category>policy</category><category>selinux</category><category>support</category></item><item><title>Looking at the local Linux kernel privilege escalation</title><link>https://blog.siphos.be/2013/05/looking-at-the-local-linux-kernel-privilege-escalation/</link><description>&lt;p&gt;There has been a few posts already on the local Linux kernel privilege
escalation, which has received the
&lt;a href="https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-2094"&gt;CVE-2013-2094&lt;/a&gt;
ID.
&lt;a href="http://arstechnica.com/security/2013/05/critical-linux-vulnerability-imperils-users-even-after-silent-fix/"&gt;arstechnica&lt;/a&gt;
has a write-up with links to good resources on the Internet, but I
definitely want to point readers to the
&lt;a href="http://www.reddit.com/r/netsec/comments/1eb9iw/sdfucksheeporgs_semtexc_local_linux_root_exploit/c9ykrck"&gt;explanation&lt;/a&gt;
that Brad Spengler made on the vulnerability.&lt;/p&gt;
&lt;p&gt;In …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 17 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-17:/2013/05/looking-at-the-local-linux-kernel-privilege-escalation/</guid><category>Security</category><category>event</category><category>grsecurity</category><category>kernexec</category><category>linux</category><category>pax</category><category>perf</category><category>selinux</category><category>uderef</category><category>vulnerability</category></item><item><title>Overriding the default SELinux policies</title><link>https://blog.siphos.be/2013/05/overriding-the-default-selinux-policies/</link><description>&lt;p&gt;Extending SELinux policies with additional rules is easy. As SELinux
uses a &lt;em&gt;deny by default&lt;/em&gt; approach, all you need to do is to &lt;a href="https://wiki.gentoo.org/wiki/SELinux/Tutorials/Creating_your_own_policy_module_file"&gt;create a
policy
module&lt;/a&gt;
that contains the additional (allow) rules, load that and you're all
set. But what if you want to remove some rules?&lt;/p&gt;
&lt;p&gt;Well, sadly …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 15 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-15:/2013/05/overriding-the-default-selinux-policies/</guid><category>Gentoo</category><category>ebuild</category><category>epatch_user</category><category>Gentoo</category><category>override</category><category>patch</category><category>policy</category><category>selinux</category></item><item><title>Highlevel assessment of Cdorked and Gentoo Hardened/SELinux</title><link>https://blog.siphos.be/2013/05/highlevel-assessment-of-cdorked-and-gentoo-hardenedselinux/</link><description>&lt;p&gt;With all the
&lt;a href="http://www.welivesecurity.com/2013/05/07/linuxcdorked-malware-lighttpd-and-nginx-web-servers-also-affected/"&gt;reports&lt;/a&gt;
surrounding
&lt;a href="https://threatpost.com/attack-using-backdoored-apache-binaries-to-lead-to-blackhole-kit/"&gt;Cdorked&lt;/a&gt;,
I took a look at if SELinux and/or other Gentoo Hardened technologies
could reduce the likelihood that this infection occurs on your system.&lt;/p&gt;
&lt;p&gt;First of all, we don't know yet how the malware gets installed on the
server. We do know that the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 14 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-14:/2013/05/highlevel-assessment-of-cdorked-and-gentoo-hardenedselinux/</guid><category>Security</category><category>apache</category><category>cdorked</category><category>Gentoo</category><category>hardened</category><category>ima</category><category>selinux</category></item><item><title>SECMARK and SELinux</title><link>https://blog.siphos.be/2013/05/secmark-and-selinux/</link><description>&lt;p&gt;When using SECMARK, the administrator configures the &lt;strong&gt;iptables&lt;/strong&gt; or
&lt;strong&gt;netfilter&lt;/strong&gt; rules to add a label to the packet data structure (on the
host itself) that can be governed through SELinux policies. Unlike peer
labeling, here the labels assigned to the network traffic is completely
locally defined. Consider the following command …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 13 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-13:/2013/05/secmark-and-selinux/</guid><category>SELinux</category><category>policy</category><category>secmark</category><category>selinux</category></item><item><title>Peer labeling in SELinux policy</title><link>https://blog.siphos.be/2013/05/peer-labeling-in-selinux-policy/</link><description>&lt;p&gt;Allow me to start with an important warning: I don't have much hands-on
experience with the remainder of this post. Its based on the few
resources I found on the Internet and a few tests done locally which
I've investigated in my attempt to understand SELinux policy writing for
networking …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 12 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-12:/2013/05/peer-labeling-in-selinux-policy/</guid><category>SELinux</category><category>cipso</category><category>ipsec</category><category>peer</category><category>policy</category><category>selinux</category></item><item><title>SELinux policy and network controls</title><link>https://blog.siphos.be/2013/05/selinux-policy-and-network-controls/</link><description>&lt;p&gt;Let's talk about how SELinux governs network streams (and how it
reflects this into the policy).&lt;/p&gt;
&lt;p&gt;When you don't do fancy stuff like SECMARK or netlabeling, then the
classes that you should keep an eye on are &lt;em&gt;tcp_socket&lt;/em&gt; and
&lt;em&gt;udp_socket&lt;/em&gt; (depending on the protocol). There used to be …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 11 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-11:/2013/05/selinux-policy-and-network-controls/</guid><category>SELinux</category><category>networking</category><category>policy</category><category>selinux</category></item><item><title>Overview of Linux capabilities, part 2</title><link>https://blog.siphos.be/2013/05/overview-of-linux-capabilities-part-2/</link><description>&lt;p&gt;As I've (in a very high level) &lt;a href="http://blog.siphos.be/2013/05/capabilities-a-short-intro/"&gt;described
capabilities&lt;/a&gt;
and talked a bit on how to &lt;a href="http://blog.siphos.be/2013/05/restricting-and-granting-capabilities/"&gt;work with
them&lt;/a&gt;,
I started with a small overview of
&lt;a href="http://blog.siphos.be/2013/05/overview-of-linux-capabilities-part-1/"&gt;file-related&lt;/a&gt;
capabilities. So next up are process-related capabilities (note, this
isn't a conform terminology, more some categorization that I do myself).&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;CAP_IPC_LOCK …&lt;/dt&gt;&lt;/dl&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 05 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-05:/2013/05/overview-of-linux-capabilities-part-2/</guid><category>Security</category><category>capabilities</category><category>grsecurity</category><category>linux</category><category>nosuid</category><category>selinux</category><category>tpe</category></item><item><title>Capabilities, a short intro</title><link>https://blog.siphos.be/2013/05/capabilities-a-short-intro/</link><description>&lt;p&gt;Capabilities. You probably have heard of them already, but when you
start developing SELinux policies, you'll notice that you come in closer
contact with them than before. This is because SELinux, when
applications want to do something "root-like", checks the capability of
that application. Without SELinux, this either requires the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 02 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-02:/2013/05/capabilities-a-short-intro/</guid><category>Security</category><category>capabilities</category><category>linux</category><category>ping</category><category>selinux</category></item><item><title>SELinux mount options</title><link>https://blog.siphos.be/2013/05/selinux-mount-options/</link><description>&lt;p&gt;When you read through the &lt;a href="http://www.gentoo.org/proj/en/hardened/selinux/selinux-handbook.xml"&gt;Gentoo Hardened SELinux
handbook&lt;/a&gt;,
you'll notice that we sometimes update &lt;code&gt;/etc/fstab&lt;/code&gt; with some
SELinux-specific settings. So, what are these settings about and are
there more of them?&lt;/p&gt;
&lt;p&gt;First of all, let's look at a particular example from the installation
instructions so you see what …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 01 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-01:/2013/05/selinux-mount-options/</guid><category>SELinux</category><category>mount</category><category>selinux</category></item><item><title>Securely handling libffi</title><link>https://blog.siphos.be/2013/04/securely-handling-libffi/</link><description>&lt;p&gt;I've recently came across &lt;a href="http://sourceware.org/libffi/"&gt;libffi&lt;/a&gt; again.
No, not because it was mentioned during the &lt;a href="http://www.gentoo.org/proj/en/hardened"&gt;Gentoo
Hardened&lt;/a&gt; online meeting, but
because my &lt;code&gt;/var/tmp&lt;/code&gt; wasn't mounted correctly, and &lt;strong&gt;emerge&lt;/strong&gt; (actually
python) uses libffi. Most users won't notice this, because libffi works
behind the scenes. But when it fails, it fails bad …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 28 Apr 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-04-28:/2013/04/securely-handling-libffi/</guid><category>Security</category><category>libffi</category><category>selinux</category><category>strace</category></item><item><title>How logins get their SELinux user context</title><link>https://blog.siphos.be/2013/04/how-logins-get-their-selinux-user-context/</link><description>&lt;p&gt;Sometimes, especially when users are converting their systems to be
SELinux-enabled, their user context is wrong. An example would be when,
after logon (in permissive mode), the user is in the
&lt;code&gt;system_u:system_r:local_login_t&lt;/code&gt; domain instead of a user domain like
&lt;code&gt;staff_u:staff_r:staff …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 27 Apr 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-04-27:/2013/04/how-logins-get-their-selinux-user-context/</guid><category>SELinux</category><category>context</category><category>selinux</category><category>user</category></item><item><title>New SELinux userspace release</title><link>https://blog.siphos.be/2013/04/new-selinux-userspace-release/</link><description>&lt;p&gt;A new &lt;a href="http://userspace.selinuxproject.org/trac/wiki/Releases"&gt;release&lt;/a&gt;
of the SELinux userspace utilities was recently announced. I have made
the packages for Gentoo available and they should now be in the main
tree (\~arch of course). During the testing of the packages however, I
made a stupid mistake of running the tests on the wrong …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 26 Apr 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-04-26:/2013/04/new-selinux-userspace-release/</guid><category>Gentoo</category><category>automation</category><category>regression</category><category>release</category><category>selinux</category><category>test</category><category>testing</category><category>userspace</category></item><item><title>Using strace to troubleshoot SELinux problems</title><link>https://blog.siphos.be/2013/04/using-strace-to-troubleshoot-selinux-problems/</link><description>&lt;p&gt;When SELinux is playing tricks on you, you can just "allow" whatever it
wants to do, but that is not always an option: sometimes, there is no
denial in sight because the problem lays within SELinux-aware
applications (applications that might change their behavior based on
what the policy sais or …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 24 Apr 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-04-24:/2013/04/using-strace-to-troubleshoot-selinux-problems/</guid><category>SELinux</category><category>debug</category><category>selinux</category><category>strace</category></item><item><title>SLOT'ing the old swig-1</title><link>https://blog.siphos.be/2013/04/sloting-the-old-swig-1/</link><description>&lt;p&gt;The &lt;a href="http://www.swig.org"&gt;SWIG&lt;/a&gt; tool helps developers in building
interfaces/libraries that can be accessed from many other languages than
the ones the library is initially written in or for. The SELinux
userland utility &lt;a href="http://oss.tresys.com/projects/setools"&gt;setools&lt;/a&gt; uses
it to provide Python and Ruby interfaces even though the application
itself is written in C …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 23 Apr 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-04-23:/2013/04/sloting-the-old-swig-1/</guid><category>Gentoo</category><category>Gentoo</category><category>selinux</category><category>setools</category><category>slot</category><category>swig</category></item><item><title>Introducing selocal for small SELinux policy enhancements</title><link>https://blog.siphos.be/2013/04/introducing-selocal-for-small-selinux-policy-enhancements/</link><description>&lt;p&gt;When working with a SELinux-enabled system, administrators will
eventually need to make small updates to the existing policy. Instead of
building their own full policy (always an option, but most likely not
maintainable in the long term) one or more SELinux policy modules are
created (most distributions use a modular …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 21 Apr 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-04-21:/2013/04/introducing-selocal-for-small-selinux-policy-enhancements/</guid><category>Gentoo</category><category>Gentoo</category><category>policy</category><category>selinux</category><category>selocal</category></item><item><title>Another Gentoo Hardened month has passed</title><link>https://blog.siphos.be/2013/04/another-gentoo-hardened-month-has-passed/</link><description>&lt;p&gt;Another month has passed, so time to mention again what we have all been
doing lately ;-)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Version 4.8 of GCC is available in the tree, but currently masked. The
package contains a fix needed to build hardened-sources, and a fix for
the asan (address sanitizer).
&lt;a href="http://www.internetnews.com/blog/skerner/open-source-gcc-4.8-compiler-including-address-sanitizer-security.html"&gt;asan&lt;/a&gt;
support in …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 18 Apr 2013 23:36:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-04-18:/2013/04/another-gentoo-hardened-month-has-passed/</guid><category>Gentoo</category><category>asan</category><category>gcc</category><category>Gentoo</category><category>grsecurity</category><category>hardened</category><category>integrity</category><category>irc</category><category>meeting</category><category>pax</category><category>selinux</category><category>uderef</category></item><item><title>What could SELinux have done to mitigate the postgresql vulnerability?</title><link>https://blog.siphos.be/2013/04/what-could-selinux-have-done-to-mitigate-the-postgresql-vulnerability/</link><description>&lt;p&gt;&lt;a href="http://www.gentoo.org"&gt;Gentoo&lt;/a&gt; is one of the various distributions
which supports &lt;a href="http://www.gentoo.org/proj/en/hardened/selinux"&gt;SELinux&lt;/a&gt;
as a &lt;em&gt;Mandatory Access Control&lt;/em&gt; system to, amongst other things,
mitigate the results of a succesfull exploit against software. So what
about the recent &lt;a href="http://www.postgresql.org/support/security/faq/2013-04-04/"&gt;PostgreSQL
vulnerability&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;When correctly configured, the PostgreSQL daemon will run in the
&lt;code&gt;postgresql_t&lt;/code&gt; domain. In …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 16 Apr 2013 14:00:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-04-16:/2013/04/what-could-selinux-have-done-to-mitigate-the-postgresql-vulnerability/</guid><category>Security</category><category>postgresql</category><category>selinux</category><category>vulnerability</category></item><item><title>Not needing run_init for password-less service management</title><link>https://blog.siphos.be/2013/04/not-needing-run_init-for-password-less-service-management/</link><description>&lt;p&gt;One of the things that has been bugging me was why, even with having
&lt;code&gt;pam_rootok.so&lt;/code&gt; set in &lt;code&gt;/etc/pam.d/run_init&lt;/code&gt;, I cannot enjoy
passwordless service management without using &lt;strong&gt;run_init&lt;/strong&gt; directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# rc-service postgresql-9.2 status
Authenticating root.
Password:

# run_init rc-service postgresql-9.2 status
Authenticating root …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 09 Apr 2013 22:14:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-04-09:/2013/04/not-needing-run_init-for-password-less-service-management/</guid><category>Gentoo</category><category>Gentoo</category><category>hardened</category><category>pam</category><category>rootok</category><category>run_init</category><category>selinux</category></item><item><title>Separate puppet provider for Gentoo/SELinux?</title><link>https://blog.siphos.be/2013/04/separate-puppet-provider-for-gentooselinux/</link><description>&lt;p&gt;While slowly transitioning my playground infrastructure towards Puppet,
I already am in process of creating a custom provider for things such as
services. Puppet uses providers as "implementations" for the functions
Puppet needs. For instance, for the &lt;em&gt;service&lt;/em&gt; type (which handles init
script services), there are providers for RedHat, Debian …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 07 Apr 2013 19:22:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-04-07:/2013/04/separate-puppet-provider-for-gentooselinux/</guid><category>Gentoo</category><category>Gentoo</category><category>openrc</category><category>provider</category><category>puppet</category><category>selinux</category></item><item><title>Fiddling with puppet apply</title><link>https://blog.siphos.be/2013/03/fiddling-with-puppet-apply/</link><description>&lt;p&gt;As part of a larger exercise, I am switching my local VM set from a
more-or-less scripted manual configuration towards a fully
Puppet-powered one. Of course, it still uses a lot of custom modules and
is most likely too ugly to expose to the wider internet, but it does
seem …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 20 Mar 2013 12:31:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-03-20:/2013/03/fiddling-with-puppet-apply/</guid><category>Gentoo</category><category>provider</category><category>puppet</category><category>selinux</category><category>service</category></item><item><title>SELinux tutorial series</title><link>https://blog.siphos.be/2013/03/selinux-tutorial-series/</link><description>&lt;p&gt;As we get a growing number of SELinux users within Gentoo Hardened and
because the SELinux usage at the firm I work at is most likely going to
grow as well, I decided to join the bunch of documents on SELinux that
are "out there" and start a series of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 15 Mar 2013 00:34:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-03-15:/2013/03/selinux-tutorial-series/</guid><category>SELinux</category><category>articles</category><category>documentation</category><category>Gentoo</category><category>hardened</category><category>selinux</category><category>tutorials</category><category>wiki</category></item><item><title>Gentoo Hardened progress meeting of march 2013</title><link>https://blog.siphos.be/2013/03/gentoo-hardened-progress-meeting-of-march-2013/</link><description>&lt;p&gt;Another month has passed, so time for a new progress meeting...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Toolchain&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GCC v4.7 has been unmasked, allowing a large set of users to test out
the new GCC. It is also expected that GCC 4.8-rc1 will hit the tree next
week. In the hardened-dev overlay, hardened support …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 07 Mar 2013 22:46:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-03-07:/2013/03/gentoo-hardened-progress-meeting-of-march-2013/</guid><category>Gentoo</category><category>Gentoo</category><category>grsecurity</category><category>hardened</category><category>kernel</category><category>pax</category><category>profiles</category><category>selinux</category><category>toolchain</category></item><item><title>Uploading selinuxnode test VM</title><link>https://blog.siphos.be/2013/02/uploading-selinuxnode-test-vm/</link><description>&lt;p&gt;At the time of writing (but I'll delay the publication of this post a
few hours), I'm uploading a new SELinux-enabled KVM guest image. This is
not an update on the previous image though (it's a reinstalled system -
after all, I use VMs for testing, so it makes sense to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 25 Feb 2013 03:05:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-02-25:/2013/02/uploading-selinuxnode-test-vm/</guid><category>Gentoo</category><category>evm</category><category>Gentoo</category><category>grsecurity</category><category>hardened</category><category>ima</category><category>kvm</category><category>selinux</category><category>virtual</category></item><item><title>Working on a new selinuxnode VM</title><link>https://blog.siphos.be/2013/02/working-on-a-new-selinuxnode-vm/</link><description>&lt;p&gt;A long time ago, I made a &lt;a href="http://distfiles.gentoo.org/experimental/amd64/qemu-selinux/"&gt;SELinux enabled
VM&lt;/a&gt; for
people to play with, displaying a minimal Gentoo installation, including
the hardening features it supports (PIE/PIC toolchain, grSecurity, PaX
and SELinux). I'm currently trying to create a new one, which also
includes IMA/EVM, but it looks like …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 23 Feb 2013 14:04:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-02-23:/2013/02/working-on-a-new-selinuxnode-vm/</guid><category>Gentoo</category><category>evm</category><category>Gentoo</category><category>hardened</category><category>ima</category><category>selinux</category><category>selinuxnode</category><category>vm</category></item><item><title>Gentoo Hardened goes onward (aka project meeting)</title><link>https://blog.siphos.be/2013/02/gentoo-hardened-goes-onward-aka-project-meeting/</link><description>&lt;p&gt;It's been a while again, so time for another Gentoo Hardened online
progress meeting.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Toolchain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GCC 4.8 is on development stage 4, so the hardened patches will be
worked on next week. Some help on it is needed to test the patches on
ARM, PPC and MIPS though. For …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 07 Feb 2013 23:40:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-02-07:/2013/02/gentoo-hardened-goes-onward-aka-project-meeting/</guid><category>Gentoo</category><category>Gentoo</category><category>grsecurity</category><category>hardened</category><category>kernel</category><category>meeting</category><category>minutes</category><category>online</category><category>pax</category><category>profiles</category><category>selinux</category></item></channel></rss>