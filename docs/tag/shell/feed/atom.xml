<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Simplicity is a form of art... - shell</title><link href="https://blog.siphos.be/" rel="alternate"></link><link href="https://blog.siphos.be/tag/shell/feed/atom.xml" rel="self"></link><id>https://blog.siphos.be/</id><updated>2014-08-31T01:14:00+02:00</updated><entry><title>Showing return code in PS1</title><link href="https://blog.siphos.be/2014/08/showing-return-code-in-ps1/" rel="alternate"></link><published>2014-08-31T01:14:00+02:00</published><updated>2014-08-31T01:14:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2014-08-31:/2014/08/showing-return-code-in-ps1/</id><summary type="html">&lt;p&gt;If you do daily management on Unix/Linux systems, then checking the
return code of a command is something you'll do often. If you do SELinux
development, you might not even notice that a command has failed without
checking its return code, as policies might prevent the application from
showing â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you do daily management on Unix/Linux systems, then checking the
return code of a command is something you'll do often. If you do SELinux
development, you might not even notice that a command has failed without
checking its return code, as policies might prevent the application from
showing any output.&lt;/p&gt;
&lt;p&gt;To make sure I don't miss out on application failures, I wanted to add
the return code of the last executed command to my PS1 (i.e. the prompt
displayed on my terminal).&lt;br&gt;
I wasn't able to add it to the prompt easily - in fact, I had to use a
bash feature called the &lt;em&gt;prompt command&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When the &lt;code&gt;PROMPT_COMMMAND&lt;/code&gt; variable is defined, then bash will execute
its content (which I declare as a function) to generate the prompt.
Inside the function, I obtain the return code of the last command (&lt;code&gt;$?&lt;/code&gt;)
and then add it to the PS1 variable. This results in the following code
snippet inside my &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;``` {lang="bash"}
export PROMPT_COMMAND=__gen_ps1&lt;/p&gt;
&lt;p&gt;function __gen_ps1() {
  local EXITCODE="$?";
  # Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
  if type -P dircolors &amp;gt;/dev/null ; then
    if [[ -f ~/.dir_colors ]] ; then
      eval $(dircolors -b ~/.dir_colors)
    elif [[ -f /etc/DIR_COLORS ]] ; then
      eval $(dircolors -b /etc/DIR_COLORS)
    fi
  fi&lt;/p&gt;
&lt;p&gt;if [[ ${EUID} == 0 ]] ; then
    PS1="RC=${EXITCODE} [\033[01;31m]\h[\033[01;34m] \W \$[\033[00m] "
  else
    PS1="RC=${EXITCODE} [\033[01;32m]\u@\h[\033[01;34m] \w \$[\033[00m] "
  fi
}
```&lt;/p&gt;
&lt;p&gt;With it, my prompt now nicely shows the return code of the last executed
command. Neat.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit:&lt;/em&gt; Sean Patrick Santos showed me my utter failure in that this can
be accomplished with the &lt;code&gt;PS1&lt;/code&gt; variable immediately, without using the
overhead of the &lt;code&gt;PROMPT_COMMAND&lt;/code&gt;. Just make sure to properly escape the
&lt;code&gt;$&lt;/code&gt; sign which I of course forgot in my late-night experiments :-(.&lt;/p&gt;</content><category term="Gentoo"></category><category term="bash"></category><category term="ps1"></category><category term="rc"></category><category term="shell"></category></entry></feed>