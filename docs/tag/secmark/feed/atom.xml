<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Simplicity is a form of art... - secmark</title><link href="https://blog.siphos.be/" rel="alternate"></link><link href="https://blog.siphos.be/tag/secmark/feed/atom.xml" rel="self"></link><id>https://blog.siphos.be/</id><updated>2013-08-21T19:43:00+02:00</updated><entry><title>Network routing based on SELinux?</title><link href="https://blog.siphos.be/2013/08/network-routing-based-on-selinux/" rel="alternate"></link><published>2013-08-21T19:43:00+02:00</published><updated>2013-08-21T19:43:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-08-21:/2013/08/network-routing-based-on-selinux/</id><summary type="html">&lt;p&gt;Today we had a question on #selinux if it was possible to route traffic
of a specific process using SELinux. The answer to this is "no",
although it has to be explained a bit in more detail.&lt;/p&gt;
&lt;p&gt;SELinux does not route traffic. SELinux is a local mandatory access
control system …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today we had a question on #selinux if it was possible to route traffic
of a specific process using SELinux. The answer to this is "no",
although it has to be explained a bit in more detail.&lt;/p&gt;
&lt;p&gt;SELinux does not route traffic. SELinux is a local mandatory access
control system; its purpose is to allow or deny certain actions, not
route traffic. However, Linux' NetFilter does support security markings
(SECMARK). I've &lt;a href="http://blog.siphos.be/2013/05/secmark-and-selinux/"&gt;blogged about
it&lt;/a&gt; in the past, and
there are good tutorials elsewhere on the Internet, such as Dan Walsh'
&lt;a href="http://www.linux.com/learn/tutorials/421152-using-selinux-and-iptables-together"&gt;Using SELinux and iptables
together&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Linux support for security marking does allow for routing decisions -
but it does not "use" SELinux in this regard. To mark traffic with a
certain label, the administrator has to put in the rules himself using
&lt;strong&gt;iptables&lt;/strong&gt; or &lt;strong&gt;ip6tables&lt;/strong&gt; commands. And if you have to do that, then
you are already working with the routing commands so why not just route
immediately? Of course, the advantage of labeling the traffic is that
you can then use SELinux to allow or deny processes to send or receive
those packets - but SELinux is not involved with routing.&lt;/p&gt;
&lt;p&gt;Another possibility is to use labeled networking, such as Labeled IPSec
or NetLabel/CIPSO support.&lt;/p&gt;
&lt;p&gt;With labeled networking, all hosts that participate in the network need
to support the labeled networking technology. If that is the case, then
SELinux policy can be used to deny traffic from one host or another -
but again, not to route traffic. You can use SELinux to deny one process
to send out data to one set of hosts and allow it to send data to
another, but that is not routing. The advantage of Labeled IPSec is that
contexts are retained across the network - decisions that SELinux has to
take on one system can be made based on the context of the process on
the other system.&lt;/p&gt;
&lt;p&gt;So no, SELinux cannot be used to route traffic, but it plays very nicely
with various networking controls to make proper decisions on its access
control enforcement.&lt;/p&gt;</content><category term="ipsec"></category><category term="netlabel"></category><category term="networking"></category><category term="secmark"></category><category term="selinux"></category></entry><entry><title>SECMARK and SELinux</title><link href="https://blog.siphos.be/2013/05/secmark-and-selinux/" rel="alternate"></link><published>2013-05-13T03:50:00+02:00</published><updated>2013-05-13T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-05-13:/2013/05/secmark-and-selinux/</id><summary type="html">&lt;p&gt;When using SECMARK, the administrator configures the &lt;strong&gt;iptables&lt;/strong&gt; or
&lt;strong&gt;netfilter&lt;/strong&gt; rules to add a label to the packet data structure (on the
host itself) that can be governed through SELinux policies. Unlike peer
labeling, here the labels assigned to the network traffic is completely
locally defined. Consider the following command …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When using SECMARK, the administrator configures the &lt;strong&gt;iptables&lt;/strong&gt; or
&lt;strong&gt;netfilter&lt;/strong&gt; rules to add a label to the packet data structure (on the
host itself) that can be governed through SELinux policies. Unlike peer
labeling, here the labels assigned to the network traffic is completely
locally defined. Consider the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# iptables -t mangle -A INPUT -p tcp --src 192.168.1.2 --dport 443
  -j SECMARK --selctx system_u:object_r:myauth_packet_t
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this command, packets that originate from the &lt;em&gt;192.168.1.2&lt;/em&gt; host
and arrive on port 443 (typically used for HTTPS traffic) are marked as
&lt;code&gt;myauth_packet_t&lt;/code&gt;. SELinux policy writers can then allow domains to
receive this type of packets (or send) through the &lt;em&gt;packet&lt;/em&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Allow sockets with mydomain_t context to receive packets labeled myauth_packet_t
allow mydomain_t myauth_packet_t:packet recv;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The SELinux policy modules enable this through the
&lt;em&gt;corenet_sendrecv_&amp;lt;type&amp;gt;_{client,server}_packets&lt;/em&gt; interfaces:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;corenet_sendrecv_http_client_packets(mybrowser_t)
# allow mybrowser_t http_client_packet_t:packet { send recv };
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As a common rule, packets are marked as client packets or server
packets, depending on the role of the &lt;em&gt;domain&lt;/em&gt;. In the above example,
the domain is a browser, so acts as a web client. So, it needs to send
and receive &lt;code&gt;http_client_packet_t&lt;/code&gt;. A web server on the other hand would
need to send and receive &lt;code&gt;http_server_packet_t&lt;/code&gt;. Note that the packets
that are sent over the wire do not have any labels assigned to them -
this is all local to the system. So even when the source and destination
use SELinux with SECMARK, on the source server the packets might be
labeled as &lt;code&gt;http_client_packet_t&lt;/code&gt; whereas on the target they are seen as
&lt;code&gt;http_server_packet_t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As far as I know, when you want to use SECMARK, you will need to set the
contexts with &lt;strong&gt;iptables&lt;/strong&gt; yourself (there is no default labeling), so
knowing about the above convention is important.&lt;/p&gt;
&lt;p&gt;Again, Paul Moore has &lt;a href="http://paulmoore.livejournal.com/4281.html"&gt;more
information&lt;/a&gt; about this.&lt;/p&gt;</content><category term="policy"></category><category term="secmark"></category><category term="selinux"></category></entry></feed>