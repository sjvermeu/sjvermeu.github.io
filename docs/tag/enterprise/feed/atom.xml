<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Simplicity is a form of art... - enterprise</title><link href="https://blog.siphos.be/" rel="alternate"></link><link href="https://blog.siphos.be/tag/enterprise/feed/atom.xml" rel="self"></link><id>https://blog.siphos.be/</id><updated>2021-11-20T15:00:00+01:00</updated><entry><title>Creating an enterprise open source policy</title><link href="https://blog.siphos.be/2021/11/creating-an-enterprise-open-source-policy/" rel="alternate"></link><published>2021-11-20T15:00:00+01:00</published><updated>2021-11-20T15:00:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2021-11-20:/2021/11/creating-an-enterprise-open-source-policy/</id><summary type="html">&lt;p&gt;Nowadays it is impossible to ignore, or even prevent open source from being
active within the enterprise world. Even if a company only wants to use
commercially backed solutions, many - if not most - of these are built with, and
are using open source software.&lt;/p&gt;
&lt;p&gt;However, open source is more than just a code sourcing possibility. By having a
good statement within the company on how it wants to deal with open source, what
it wants to support, etc. engineers and developers can have a better
understanding of what they can do to support their business further.&lt;/p&gt;
&lt;p&gt;In many cases, companies will draft up an &lt;em&gt;open source policy&lt;/em&gt;, and in this post
I want to share some practices I've learned on how to draft such a policy.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Nowadays it is impossible to ignore, or even prevent open source from being
active within the enterprise world. Even if a company only wants to use
commercially backed solutions, many - if not most - of these are built with, and
are using open source software.&lt;/p&gt;
&lt;p&gt;However, open source is more than just a code sourcing possibility. By having a
good statement within the company on how it wants to deal with open source, what
it wants to support, etc. engineers and developers can have a better
understanding of what they can do to support their business further.&lt;/p&gt;
&lt;p&gt;In many cases, companies will draft up an &lt;em&gt;open source policy&lt;/em&gt;, and in this post
I want to share some practices I've learned on how to draft such a policy.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Assess the current situation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When drafting a policy, make sure you know what the current situation already
is. Especially when the policy might be very restrictive, you might be facing a
huge backlash from the organization if the policy is not reflecting the reality.
If that is the case, and the policy still needs to go through, proper
communication and grooming will be needed (and of course, the "upper management
hammer" can help out as well).&lt;/p&gt;
&lt;p&gt;Often, higher management is not aware of the current situation either. They
might think that open source is hardly in use. Presenting them with facts and
figures not only makes it more understandable, it will also support the need for
a decent open source policy.&lt;/p&gt;
&lt;p&gt;When you have a good view on the current usage, you can use that to track where
you want to go to. For instance, if your company wants to adopt open source more
actively, and pursue open source contributions, you might want to report on the
currently detected contributions, and use that for follow-up later.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Get HR and compliance involved&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before you embark on the journey of developing a decent open source policy, make
sure you have management support on this, as well as people from HR and your
compliance department (unless your policy will be extremely restrictive, but
let's hope that is not the case).&lt;/p&gt;
&lt;p&gt;You will need (legal &amp;amp;) compliance involved in order to draft and assess the
impact of internal developers and engineers working on open source projects, as
well as the same people working on open source projects in their free time. Both
are different use cases but have to be assessed regardless.&lt;/p&gt;
&lt;p&gt;HR is generally involved at a later stage, so they know how the company wants to
deal with open source development. This could be useful for recruitment, but
also for HR to understand what the policy is about in case of issues.&lt;/p&gt;
&lt;p&gt;An important consideration to assess is how the company, and the contractual
obligations that the employees have, deals with intellectual property. In some
companies, the contract allows for the employees to retain the intellectual
property rights for their creations outside of company projects. However, that
is not always the case, and in certain sectors intellectual property might be
assumed to be owned by the company whenever the creation is something in which
the company is active. And that might be considered very broadly (such as
anything IT related for employees of an IT company).&lt;/p&gt;
&lt;p&gt;The open source policy that you develop should know what the contractual
stipulations say, and clarify for engineers and developers how the company
considers the intellectual property ownership. This is important, as it defines
who can decide to contribute something to open source.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Understand and simplify license requirements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Many of the decisions that the open source policy has to clarify will be related
to the open source licenses in use. Moreover, it might even be relevant to
define what open source is to begin with.&lt;/p&gt;
&lt;p&gt;A good source to use is the &lt;a href="https://opensource.org/osd"&gt;Open Source Definition&lt;/a&gt;
as published and maintained by the &lt;a href="https://opensource.org/"&gt;Open Source Initiative
(OSI)&lt;/a&gt;. Another definition is the one by the &lt;a href="https://www.fsf.org/"&gt;Free
Software Foundation&lt;/a&gt; titled "&lt;a href="https://www.fsf.org/about/what-is-free-software"&gt;What is free software and
why is it so important for society&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;The license is the agreement that the owner of the software puts out that
declares how users can use that software. Most, if not all software that a
company uses, will have a license - open source or not. But most commercial
software titles have specific licenses that you need to go through for each
specific product, as the licenses are not reused. In the open source world,
licenses are reused so that end users do not need to go through product-specific
terms.&lt;/p&gt;
&lt;p&gt;The OSI organization has a list of &lt;a href="https://opensource.org/licenses"&gt;approved
licenses&lt;/a&gt;. However, even amongst these
licenses, you will find different types of licenses out there. While they are
commonly grouped into &lt;a href="https://en.wikipedia.org/wiki/Copyleft"&gt;copyleft&lt;/a&gt; and
&lt;a href="https://fossa.com/blog/all-about-permissive-licenses/"&gt;permissive&lt;/a&gt; open source
licenses, there are two main categories within the copyleft licenses that you
need to understand:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;strong copyleft licenses that require making all source code available upon
  distribution, or sometimes even disclosure of the application base&lt;/li&gt;
&lt;li&gt;"scoped" copyleft licenses that require making only the source code available of the
  modules or libraries that use the open source license (especially if you
  modified them) without impacting the entire application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the term "strong copyleft" is something that I think is somewhat generally
accepted (such as in the Snyk article "&lt;a href="https://snyk.io/learn/open-source-licenses/"&gt;Open Source Licenses: Types and
Comparison&lt;/a&gt;" or in &lt;a href="https://en.wikipedia.org/wiki/Copyleft"&gt;Wikipedia's
article&lt;/a&gt;), I do not like to use its
opposite "weak" term, as the licenses themselves do not reduce the open source
identity from the code. Instead, they make sure the scope of the license is
towards a particular base (such as a library) and not the complete application
that uses the license.&lt;/p&gt;
&lt;p&gt;Hence, open source policies might want to focus on those three license types for
each of the use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;permissive licenses, like Apache License 2.0 or MIT&lt;/li&gt;
&lt;li&gt;scoped copyleft licenses, like LGPL or EPL-2.0&lt;/li&gt;
&lt;li&gt;strong copyleft licenses, like GPL or AGPL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Differentiate on the different open source use cases&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are several use cases that the policy will need to tackle. These are, in
no particular order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using off-the-shelf, ready-to-use open source products&lt;/li&gt;
&lt;li&gt;Using off-the-shelf libraries and modules for development&lt;/li&gt;
&lt;li&gt;Using open source code&lt;/li&gt;
&lt;li&gt;Contributing to open source projects for company purposes&lt;/li&gt;
&lt;li&gt;Contributing to open source projects for personal/private purposes&lt;/li&gt;
&lt;li&gt;Launching and maintaining open source projects from the company&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of these use cases might have their specific focuses. Combine that with the
license categories listed earlier, and you can start assessing how to deal with
these situations.&lt;/p&gt;
&lt;p&gt;For instance, you might want to have a policy that generally boils down to the
following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When using off-the-shelf, ready-to-use open source products, all types of
  products are allowed, assuming the organization remains able to support the
  technologies adopted. Furthermore, the products have to be known by the
  inventory and asset tooling used by the company.&lt;/li&gt;
&lt;li&gt;When using libraries or modules in development projects, only open source
  products with permissive or scoped copyleft licenses can be used. Furthermore,
  the libraries or modules have to be well managed (kept up-to-date) and known
  by the inventory and asset tooling used by the company.&lt;/li&gt;
&lt;li&gt;When using open source code, only code that is published with a permissive
  license can be used. At all times, a reference towards the original author
  has to be retained.&lt;/li&gt;
&lt;li&gt;When contributing to open source projects for company purposes, approval has
  to be given by the hierarchical manager of the team. Contributions have to be
  tagged appropriately as originating from the company (e.g. using the company
  e-mail address as author). Furthermore, employees are not allowed to
  contribute code or intellectual property that is deemed a competitive
  advantage for the company.&lt;/li&gt;
&lt;li&gt;When contributing to open source projects for personal/private purposes,
  employees are prohibited to use code from the company or to do contributions
  using their company's e-mail address. However, the company does not claim
  ownership on the contributions an employee does outside the company's projects
  and hours.&lt;/li&gt;
&lt;li&gt;When creating new projects or publishing internal projects as open source,
  sufficient support for the project has to be granted from the company, and the
  publications are preferentially done within the same development services
  (like version control) under management of the company. This ensures
  consistency and control over the company's assets and liability. Projects have
  to use a permissive license (and perhaps even a single, particular license).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or, if the company actively pursues an open source first strategy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Off-the-shelf, ready-to-use open source products are preferred over
  propriatary products. Internal support teams must be able to deal with
  general maintenance and updates. The use of commercially backed products is
  not mandatory, but might help when there is a need for acquiring short-term
  support (such as through independent consultants).&lt;/li&gt;
&lt;li&gt;Development projects must use projects that use permissive or scoped copyleft
  licenses for the libraries and dependencies of that project. Only when the
  development project itself uses a strong copyleft license are dependencies
  with (the same) strong copyleft license allowed. Approval to use a strong
  copyleft license is left to the management board.&lt;/li&gt;
&lt;li&gt;Engineers and developers retain full intellectual property rights to their
  contributions. However, a Contributor License Agreement (CLA) is used to grant
  the company the rights to use and distribute the contributions under the
  license mentioned, as well as initiate or participate in legal actions related
  to the contributed code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Clarify what is allowed to be contributed and what not&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the above example I already indicated a "do not contribute code that is
deemed a competitive advantage" statement. While it would be common sense,
companies will need to clarify this (if they follow this principle) in their
policies so they are not liable for problems later on.&lt;/p&gt;
&lt;p&gt;A competitive advantage primarily focuses on a company's crown jewels, but can
be extended with code or other intellectual property (like architectural
information, documentation, etc.) that refers to indirect advantageous
solutions. If a company is a strong data-driven company that gains massive
insights from data, it might refuse to share its artificial intelligence related
code.&lt;/p&gt;
&lt;p&gt;There are other principles that might decide if code is contributed or not. For
instance, the company might only want to contribute code that has received all
the checks and controls to ensure it is secure, it is effective and efficient,
and is understandable and well-written. After all, when such contributions are
made in name of the company, the quality of that code reflects upon the company
as well.&lt;/p&gt;
&lt;p&gt;I greatly suggest to include examples in the open source policy to clarify or
support certain statements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assess the maturity of an open source product&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When supporting the use of open source products, the policy will also have to
decide which open source products can be used and which ones can't. Now, it is
it possible to create an exhaustive list (as that would defeat the purpose of an
open source policy). Instead, I recommend to clarify how stakeholders can assess
if an open source product can be used or not.&lt;/p&gt;
&lt;p&gt;Personally, I consider this from a "maturity" point of view. Open source
products that are mature are less likely to become a liability within a larger
company, whereas products that only have a single maintained (like my own
&lt;a href="https://github.com/sjvermeu/cvechecker"&gt;cvechecker&lt;/a&gt; project) are not to be used
without understanding the consequences.&lt;/p&gt;
&lt;p&gt;So, what is a mature open source project? There are online resources that could
help you out (like the Qualipso-originated &lt;a href="https://en.wikipedia.org/wiki/OpenSource_Maturity_Model"&gt;Open Source Maturity Model
(OSMM)&lt;/a&gt;), but
personally I tend to look at the following principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The project has an active development, with more than 5 active contributors in
  the last three months.&lt;/li&gt;
&lt;li&gt;The project is visibly used by several other projects or products.&lt;/li&gt;
&lt;li&gt;The project has well-maintained documentation, both for developers and for
  users. This can very well be a decent wiki site.&lt;/li&gt;
&lt;li&gt;The project has an active support community, with not only an issue system,
  but also interactive services like forums, IRC, Slack, Discord, etc.&lt;/li&gt;
&lt;li&gt;The project supports more than one major version in parallel, and has a clear
  lifecycle for its support (such as "major version is supported up to at least
  1 year after the next major version is released").&lt;/li&gt;
&lt;li&gt;The project publishes its artefacts in a controlled and secure manner.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;A policy is just the beginning, not the end&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As always, there will be situations where a company wants to allow a one-off
case to deviate from the policy. Hence, make clear how deviations can be
targeted.&lt;/p&gt;
&lt;p&gt;For instance, you might want to position an architecture review board to support
deviations from the license usage. When you do, make sure that this governance
body knows how to deal with such deviations - understanding what licenses are,
what the impact might be towards the organization, etc.&lt;/p&gt;
&lt;p&gt;Furthermore, once the policy is ready to be made available, make sure you have
support for that policy in the organization, as well as supporting tools and
processes.&lt;/p&gt;
&lt;p&gt;You might want to include an internal community to support open source/free
software endeavors. This community can help other stakeholders with the
assessment of a product's maturity, or with the license identification.&lt;/p&gt;
&lt;p&gt;You might want to make sure you can track license usage in projects and
deployments. For software development projects, there are plenty of commercial
and free services that scan and present license usage (and other details) for a
project. Inventory and asset management utilities often also include
identification of detected software. Validate that you can report on open source
usage if the demand comes up, and that you can support development and
engineering teams in ensuring open source usage is in line with the company's
expectations.&lt;/p&gt;
&lt;p&gt;The company might want to dedicate resources in additional leakage detection and
prevention measures for the open source contributions. While the company might
already have code scanning techniques in place in their on-premise version
control system, it might be interesting to extend this service to the public
services (like &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; and
&lt;a href="https://about.gitlab.com/"&gt;GitLab&lt;/a&gt;). And with that, I do not want to imply
using the same tools and integrations, but more on a functional level.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Finishing off&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A few companies, and most governmental organizations, publish their open source
policies online. The &lt;a href="https://todogroup.org/"&gt;TODO Group&lt;/a&gt; has graceously drafted
a &lt;a href="https://github.com/todogroup/policies"&gt;list of examples and templates&lt;/a&gt; to
use. They might be a good resource to use when drafting up your own.&lt;/p&gt;
&lt;p&gt;Having a clear and understandable open source policy simplifies discussions, and
with the appropriate support within the organization it might jumpstart
initiatives even further. Assuming the policy is sufficiently supportive of open
source, having it published might eliminate the fear of engineers and developers
to suggest certain open source projects.&lt;/p&gt;
&lt;p&gt;Feedback? Comments? Don't hesitate to &lt;a href="mailto:sven.vermeulen@siphos.be"&gt;drop me an
email&lt;/a&gt;, or join the &lt;a href="https://twitter.com/infrainsight/status/1462043477835976705"&gt;discussion on
Twitter&lt;/a&gt;.&lt;/p&gt;</content><category term="Architecture"></category><category term="opensource"></category><category term="enterprise"></category><category term="legal"></category><category term="compliance"></category></entry><entry><title>Evaluating the zero trust hype</title><link href="https://blog.siphos.be/2021/10/evaluating-the-zero-trust-hype/" rel="alternate"></link><published>2021-10-05T00:00:00+02:00</published><updated>2021-10-05T00:00:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2021-10-05:/2021/10/evaluating-the-zero-trust-hype/</id><summary type="html">&lt;p&gt;Security vendors are touting the benefits of "zero trust" as the new way to
approach security and security-conscious architecturing. But while there are
principles within the zero trust mindset that came up in the last dozen years,
most of the content in zero trust discussions is tied to age-old security
propositions.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Security vendors are touting the benefits of "zero trust" as the new way to
approach security and security-conscious architecturing. But while there are
principles within the zero trust mindset that came up in the last dozen years,
most of the content in zero trust discussions is tied to age-old security
propositions.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;What is zero trust&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the zero trust hype, two sources are driving (or aggregating) most of the
content that exists for zero trust: &lt;a href="https://www.nist.gov/publications/zero-trust-architecture"&gt;NIST's Zero Trust Architecture
publication&lt;/a&gt; (report
800-207) and &lt;a href="https://cloud.google.com/beyondcorp/"&gt;Google's BeyondCorp Zero Trust Enterprise
Security&lt;/a&gt; resources.&lt;/p&gt;
&lt;p&gt;The NIST publication is a "dry" consolidation of what zero trust entails, and
focuses on the architecture and design principles for a zero trust environment.
It defines a zero trust architecture as an architecture that "assumes there is
no implicit trust granted to assets or users accounts based solely on their
physical or network location". &lt;/p&gt;
&lt;p&gt;The principles that it applies are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All data sources and computing services are considered resources&lt;/li&gt;
&lt;li&gt;All communication is secured regardless of network location&lt;/li&gt;
&lt;li&gt;Access to individual enterprise resources is granted on a per-session basis&lt;/li&gt;
&lt;li&gt;Access to resources is determined by dynamic policy [...] and may include
  other behavioral and environmental attributes&lt;/li&gt;
&lt;li&gt;The enterprise monitors and measures the integrity and security posture of all
  owned and associated assets&lt;/li&gt;
&lt;li&gt;All resource authentication and authorization are dynamic and strictly
  enforced before access is allowed&lt;/li&gt;
&lt;li&gt;The enterprise collects as much information as possible about the current
  state of assets, network infrastructure, and communications, and uses it to
  improve its security posture&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Within the publication, a common view is used to explain zero trust and the
components that take an active role within the architecture. This view is
happily shared by vendors to show where in the zero trust architecture their
component(s) are positioned.&lt;/p&gt;
&lt;p&gt;&lt;img alt="NIST core view on zero trust" src="https://blog.siphos.be/images/202110/zerotrust-core.png"&gt;&lt;/p&gt;
&lt;p&gt;The publication further evaluates a few possible architectural approaches (or
patterns if you will) for zero trust, with specific focus on the network side.
It ends with a chapter on migrating to a zero trust architecture.&lt;/p&gt;
&lt;p&gt;The Google resources through its BeyondCorp publication are more loosely written
and have a stronger focus on the cultural and principle aspects of zero trust.
One could see these publications more as an introduction to the value that zero
trust provides to a company and its users, with the focus on exposing services
everywhere, providing dynamic access controls through proxy services, and
eliminating classical patterns like using Virtual Private Networks (VPN) to bind
everything together.&lt;/p&gt;
&lt;p&gt;The main motivation beyond the zero trust principles in Google's publication is
to eliminate the perimeter-style protection where all controls are on the
perimeter, after which users have nearly free rein across the internally
exposed infrastructure.&lt;/p&gt;
&lt;p&gt;The principles it applies are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access to services must not be determined by the network from which you
  connect&lt;/li&gt;
&lt;li&gt;Access to services is granted based on contextual factors from the user and
  their device&lt;/li&gt;
&lt;li&gt;Access to services must be authenticated, authorized, and encrypted&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While these two main resources embody the bulk of what zero trust is, it does
not determine it completely. Many vendors and consultancy firms have
their view of zero trust, which largely coincides with the above, but often
has specific attention points or even foundations that are not part of the
previously mentioned resources.&lt;/p&gt;
&lt;p&gt;The term "zero trust" implies a "trust nothing and nobody" approach to
architecture and design, which you can fill in and apply everywhere. Of course,
you eventually will need to apply some level of trust somewhere, and how this is
done can depend on so many factors that it is unlikely that we will ever settle
down in the zero trust hype on what is and isn't proper.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Focus areas in zero trust&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While evaluating zero trust, I read through many other resources out there.
Besides the paywalled analyst resources from Gartner and Forrester, it also
included resources from vendors to learn how they see zero trust evolve.&lt;/p&gt;
&lt;p&gt;In most of these resources, there are commonalities that everybody seems to
agree on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Approach authentication and authorization at all layers in the stack: device,
  operating system, network, communication path (next-hop), communication
  session, application, etc.&lt;/li&gt;
&lt;li&gt;Enforce high maturity in asset management and inventory management. Asset
  management is more than just devices (it also entails applications, cloud
  services, etc.) and you should not only focus on those you own, but also those
  that are associated with your architecture (such as Bring Your Own Device
  (BYOD) assets)&lt;/li&gt;
&lt;li&gt;Ensure data classification and data management are applied and continuously
  evaluated and updated.&lt;/li&gt;
&lt;li&gt;Contain workloads within sufficiently small logical bounds. This could be
  through micro-segmentation (but that is not the sole method out there).&lt;/li&gt;
&lt;li&gt;Expose services globally (as in, globally reachable), but that does not
  imply that all services are accessible by each and every one.&lt;/li&gt;
&lt;li&gt;Use dynamic access policies and policy enforcement. Dynamic includes
  context-based accesses (access decisions are taken by more than just the
  authentication side of things) as well as authorizations that can change as
  new insights are passed on (such as threat intelligence).&lt;/li&gt;
&lt;li&gt;Perform continuous monitoring, including behavioral assessments.&lt;/li&gt;
&lt;li&gt;Encrypt everything (or more soundly put, cryptographically protect resources
  at all layers of the stack).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href="https://www.cisa.gov"&gt;Cybersecurity and Infrastructure Security Agency&lt;/a&gt; has
recently also released the first draft of its &lt;a href="https://www.cisa.gov/publication/zero-trust-maturity-model"&gt;Zero Trust Maturity
Model&lt;/a&gt; that
companies can use to evaluate their posture against the zero trust principles.
It is strongly based upon the NIST explanation of zero trust, with attention to
five pillars (identity, device, network/environment, application workload, and
data) and three foundations (visibility and analytics, automation and
orchestration, and governance). Again, we observe some interpretation of what
zero trust could entail, in this particular case how the US government would
like to approach this towards its agencies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why zero trust isn't exactly new&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Attentive readers will already understand that most of the principles or focus
areas in zero trust are not new. Let's take a few of the core components and
principles and see how novel these are.&lt;/p&gt;
&lt;p&gt;One of the core components in the zero trust architecture is a policy
enforcement methodology, one that detaches enforcement from declaration.
Separating the mechanism from a policy isn't new. &lt;a href="https://ieeexplore.ieee.org/document/502679"&gt;Decentralized trust
management&lt;/a&gt;, published in 1996,
attempted to implement the necessary abstractions for it. The &lt;a href="https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=xacml"&gt;Extensible Access
Control Markup
Language&lt;/a&gt;,
published by OASIS in 2003, is an open standard for integrating the different policy
components.&lt;/p&gt;
&lt;p&gt;The ability to perform authentication at all levels of a stack is also not new.
We can execute device authentication using the &lt;a href="https://en.wikipedia.org/wiki/Trusted_Platform_Module"&gt;Trusted Platform
Module&lt;/a&gt; for instance,
whose first publication was in 2009. The use of certificates for authenticating
websites is common since &lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security"&gt;SSL v3 came
about&lt;/a&gt; in 1996.
Authenticating end users through passwords is as old as IT itself, and
multi-factor authentication has had plenty of research since 2005. It is very
popular nowadays since the introduction of the &lt;a href="https://datatracker.ietf.org/doc/html/rfc6238"&gt;Time-based One-time Password
(T-OTP)&lt;/a&gt; as published in 2011.&lt;/p&gt;
&lt;p&gt;Even the use of user profiling for security analytics isn't novel. In 2004, the
paper on &lt;a href="https://ieeexplore.ieee.org/abstract/document/1386699"&gt;User profiling for computer
security&lt;/a&gt; was the start
of what became a very active market in cybersecurity nowadays: User Entity and
Behavior Analytics (UEBA).&lt;/p&gt;
&lt;p&gt;The dismissal of the perimeter-only security architecture seems to be the most
specific 'new' principle, although the foundations for security have long been
to not just consider security from a network point of view: starting with the
layered architecture and requirement tracking by Peter G. Neumann's &lt;a href="http://www.csl.sri.com/users/neumann/survivability.pdf"&gt;Practical
Architectures for Survivable Systems and Networks&lt;/a&gt;
published in 2000, we have seen the market take up more and more traction on
securing the different layers and assessing security not just based on the
perimeter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Personal observations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Zero trust is energizing the cybersecurity ecosystem, allowing both active
research and commercial evolutions/improvements. With the further
digitization of our environment, the significant increase in exposed services (think
IoT), and users that are always online, companies should indeed ensure that their
services (both external-facing and internal ones) are secure. The
increase in attention through the "zero trust" hype is positive, but should not
be considered completely new. Instead, it is an aggregation of already existing
best practices and designs.&lt;/p&gt;
&lt;p&gt;The lack of a common architecture (despite NISTs efforts) is to be expected, as
each company, organization or government has a different architecture and
vision. This, of course, means that decision-makers will need to understand that
"zero trust" is not a pattern to apply blindly. Vendors will attempt to
influence businesses, but without a good understanding of the current
environment and understanding the direction a company wants to go, these will
just be tools. And as the saying goes, "A fool with a tool is still a fool".&lt;/p&gt;
&lt;p&gt;Many companies will already have started on their journey to "zero trust"
without having it named as such. Layered security, security in depth, and other
statements already contribute to the zero trust approach. If you want to
approach zero trust, it is wise to consider where you are at already, and what
main principles you want to address next. You can call it "zero trust" or your
"zero trust strategy" to get attention, but beware of external influences that
might want to inject complexity because you called it "zero trust". The benefit
is not in attaining a zero trust compliant architecture, but in ensuring the
company has a good security posture, including the flexibility to adjust as the
environment evolves.&lt;/p&gt;
&lt;p&gt;Feedback? Comments? Don't hesitate to &lt;a href="mailto:sven.vermeulen@siphos.be"&gt;drop me an
email&lt;/a&gt;, or join the &lt;a href="https://twitter.com/infrainsight/status/1445380710706073613"&gt;discussion on
Twitter&lt;/a&gt;.&lt;/p&gt;</content><category term="Architecture"></category><category term="zero-trust"></category><category term="security"></category><category term="enterprise"></category><category term="network-security"></category></entry><entry><title>SELinux is great for enterprises (but many don't know it yet)</title><link href="https://blog.siphos.be/2015/01/selinux-is-great-for-enterprises-but-many-dont-know-it-yet/" rel="alternate"></link><published>2015-01-03T13:36:00+01:00</published><updated>2015-01-03T13:36:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2015-01-03:/2015/01/selinux-is-great-for-enterprises-but-many-dont-know-it-yet/</id><summary type="html">&lt;p&gt;Large companies that handle their own IT often have internal support
teams for many of the technologies that they use. Most of the time, this
is for reusable components like database technologies, web application
servers, operating systems, middleware components (like file transfers,
messaging infrastructure, ...) and more. All components that are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Large companies that handle their own IT often have internal support
teams for many of the technologies that they use. Most of the time, this
is for reusable components like database technologies, web application
servers, operating systems, middleware components (like file transfers,
messaging infrastructure, ...) and more. All components that are used
and deployed multiple times, and thus warrant the expenses of a
dedicated engineering team.&lt;/p&gt;
&lt;p&gt;Such teams often have (or need to write) secure configuration deployment
guides, so that these components are installed in the organization with
as little misconfigurations as possible. A wrongly configured component
is often worse than a vulnerable component, because vulnerabilities are
often fixed with the software upgrades (you do patch your software,
right?) whereas misconfigurations survive these updates and remain
exploitable for longer periods. Also, misuse of components is harder to
detect than exploiting vulnerabilities because they are often seen as
regular user behavior.&lt;/p&gt;
&lt;p&gt;But next to the redeployable components, most business services are
provided by a single application. Most companies don't have the budget
and resources to put dedicated engineering teams on each and every
application that is deployed in the organization. Even worse, many
companies hire external consultants to help in the deployment of the
component, and then the consultants hand over the maintenance of that
software to internal teams. Some consultants don't fully bother with
secure configuration deployment guides, or even feel the need to disable
security constraints put forth by the organization (policies and
standards) because "it is needed". A deployment is often seen as
successful when the software functionally works, which not necessarily
means that it is misconfiguration-free.&lt;/p&gt;
&lt;p&gt;As a recent example that I came across, consider an application that
needs &lt;a href="http://nodejs.org/"&gt;Node.js&lt;/a&gt;. A consultancy firm is hired to set
up the infrastructure, and given full administrative rights on the
operating system to make sure that this particular component is deployed
fast (because the company wants to have the infrastructure in production
before the end of the week). Security is initially seen as less of a
concern, and the consultancy firm informs the customer (without any
guarantees though) that it will be set up "according to common best
practices". The company itself has no engineering team for Node.js nor
wants to invest in the appropriate resources (such as training) for
security engineers to review Node.js configurations. Yet the application
that is deployed on the Node.js application server is internet-facing,
so has a higher risk associated with it than a purely internal
deployment.&lt;/p&gt;
&lt;p&gt;So, how to ensure that these applications cannot be exploited or, if an
exploit is done, how to ensure that the risks involved with the exploit
are contained? Well, this is where I believe SELinux has a great
potential. And although I'm talking about SELinux here, the same goes
for other similar technologies like &lt;a href="http://en.wikipedia.org/wiki/TOMOYO_Linux"&gt;TOMOYO
Linux&lt;/a&gt;, &lt;a href="http://en.wikibooks.org/wiki/Grsecurity/The_RBAC_System"&gt;grSecurity's RBAC
system&lt;/a&gt;,
&lt;a href="http://www.rsbac.org/"&gt;RSBAC&lt;/a&gt; and more.&lt;/p&gt;
&lt;p&gt;SELinux can provide a container, decoupled from the application itself
(but of course built for that particular application) which restricts
the behavior of that application on the system to those activities that
are expected. The application itself is not SELinux-aware (or does not
need to be - some applications are, but those that I am focusing on here
usually don't), but the SELinux access controls ensure that exploits on
the application cannot reach beyond those activities/capabilities that
are granted to it.&lt;/p&gt;
&lt;p&gt;Consider the Node.js deployment from before. The Node.js application
server might need to connect to a &lt;a href="http://www.mongodb.org/"&gt;MongoDB&lt;/a&gt;
cluster, so we can configure SELinux to allow just that, but all other
connections that originate from the Node.js deployment should be
forbidden. Worms (if any) cannot use this deployment then to spread out.
Same with access to files - the Node.js application probably only needs
access to the application files and not to other system files. Instead
of trying to run the application in a chroot (which requires engineering
effort from those people implementing Node.js, which could be a
consultancy firm that does not know or want to deploy within a chroot)
SELinux is configured to disallow any file access beyond the application
files.&lt;/p&gt;
&lt;p&gt;With SELinux, the application can be deployed relatively safely while
ensuring that exploits (or abuse of misconfigurations) cannot spread.
All that the company itself has to do is to provide resources for a
SELinux engineering team (which can be just a responsibility of the
Linux engineering teams, but can be specialized as well). Such a team
does not need to be big, as policy development effort is usually only
needed during changes (for instance when the application is updated to
also send e-mails, in which case the SELinux policy can be adjusted to
allow that as well), and given enough experience, the SELinux
engineering team can build flexible policies that the administration
teams (those that do the maintenance of the servers) can tune the policy
as needed (for instance through SELinux booleans) without the need to
have the SELinux team work on the policies again.&lt;/p&gt;
&lt;p&gt;Using SELinux also has a number of additional advantages which other,
sometimes commercial tools (like Symantecs SPE/SCSP - really Symantec,
you ask customers to disable SELinux?) severly lack.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SELinux is part of a default Linux installation in many cases.
    RedHat Enterprise Linux ships with SELinux by default, and actively
    supports SELinux when customers have any problems with it. This also
    improves the likelihood for SELinux to be accepted, as other, third
    party solutions might not be supported. Ever tried getting support
    for a system on which both McAfee AV for Linux and Symantec SCSP are
    running (if you got it to work together at all)? At least McAfee
    gives pointers to how to update &lt;a href="https://kc.mcafee.com/corporate/index?page=content&amp;amp;id=KB67360"&gt;SELinux
    settings&lt;/a&gt;
    when they would interfere with McAfee processes.&lt;/li&gt;
&lt;li&gt;SELinux is widely known and many resources exist for users,
    administrators and engineers to learn more about it. The resources
    are freely available, and often kept up2date by a very
    motivated community. Unlike commercial products, whose support pages
    are hidden behind paywalls, customers are usually prevented from
    interacting with each other and tips and tricks for using the
    product are often not found on the Internet, SELinux information can
    be found almost everywhere. And if you like books, I have a couple
    for you to read: &lt;a href="https://www.packtpub.com/networking-and-servers/selinux-system-administration"&gt;SELinux System
    Administration&lt;/a&gt;
    and &lt;a href="https://www.packtpub.com/networking-and-servers/selinux-cookbook"&gt;SELinux
    Cookbook&lt;/a&gt;,
    written by yours truly.&lt;/li&gt;
&lt;li&gt;Using SELinux is widely supported by third party configuration
    management tools, especially in the free software world.
    &lt;a href="http://puppetlabs.com/"&gt;Puppet&lt;/a&gt;, &lt;a href="https://www.chef.io/chef/"&gt;Chef&lt;/a&gt;,
    &lt;a href="http://www.ansible.com/home"&gt;Ansible&lt;/a&gt;,
    &lt;a href="http://www.saltstack.com/"&gt;SaltStack&lt;/a&gt; and others all support
    SELinux and/or have modules that integrate SELinux support in the
    management system.&lt;/li&gt;
&lt;li&gt;Using SELinux incurs no additional licensing costs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, SELinux is definitely not a holy grail. It has its limitations, so
security should still be seen as a global approach where SELinux is just
playing one specific role in. For instance, SELinux does not prevent
application behavior that is allowed by the policy. If a user abuses a
configuration and can have an application expose information that the
user usually does not have access to, but the application itself does
(for instance because other users on that application might) SELinux
cannot do anything about it (well, not as long as the application is not
made SELinux-aware). Also, vulnerabilities that exploit application
internals are not controlled by SELinux access controls. It is the
application behavior ("external view") that SELinux controls. To
mitigate in-application vulnerabilities, other approaches need to be
considered (such as memory protections for free software solutions,
which can protect against some kinds of exploits - see
&lt;a href="http://grsecurity.net/"&gt;grsecurity&lt;/a&gt; as one of the solutions that could
be used).&lt;/p&gt;
&lt;p&gt;Still, I believe that SELinux can definitely provide additional
protections for such "one-time deployments" where a company cannot
invest in resources to provide engineering services on those
deployments. The SELinux security controls do not require engineering on
the application side, making investments in SELinux engineering very
much reusable.&lt;/p&gt;</content><category term="SELinux"></category><category term="companies"></category><category term="configuration"></category><category term="engineering"></category><category term="enterprise"></category><category term="selinux"></category></entry></feed>