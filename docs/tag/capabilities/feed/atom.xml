<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Simplicity is a form of art... - capabilities</title><link href="https://blog.siphos.be/" rel="alternate"></link><link href="https://blog.siphos.be/tag/capabilities/feed/atom.xml" rel="self"></link><id>https://blog.siphos.be/</id><updated>2013-05-06T03:50:00+02:00</updated><entry><title>Overview of Linux capabilities, part 3</title><link href="https://blog.siphos.be/2013/05/overview-of-linux-capabilities-part-3/" rel="alternate"></link><published>2013-05-06T03:50:00+02:00</published><updated>2013-05-06T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-05-06:/2013/05/overview-of-linux-capabilities-part-3/</id><summary type="html">&lt;p&gt;In &lt;a href="http://blog.siphos.be/2013/05/capabilities-a-short-intro/"&gt;previous&lt;/a&gt;
&lt;a href="http://blog.siphos.be/2013/05/restricting-and-granting-capabilities/"&gt;posts&lt;/a&gt;
&lt;a href="http://blog.siphos.be/2013/05/overview-of-linux-capabilities-part-1/"&gt;I&lt;/a&gt;
&lt;a href="http://blog.siphos.be/2013/05/overview-of-linux-capabilities-part-2/"&gt;talked&lt;/a&gt;
about capabilities and gave an introduction to how this powerful
security feature within Linux can be used (and also exploited). I also
covered a few capabilities, so let's wrap this up with the remainder of
them.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;CAP_AUDIT_CONTROL&lt;/dt&gt;
&lt;dd&gt;Enable and disable kernel auditing; change â€¦&lt;/dd&gt;&lt;/dl&gt;</summary><content type="html">&lt;p&gt;In &lt;a href="http://blog.siphos.be/2013/05/capabilities-a-short-intro/"&gt;previous&lt;/a&gt;
&lt;a href="http://blog.siphos.be/2013/05/restricting-and-granting-capabilities/"&gt;posts&lt;/a&gt;
&lt;a href="http://blog.siphos.be/2013/05/overview-of-linux-capabilities-part-1/"&gt;I&lt;/a&gt;
&lt;a href="http://blog.siphos.be/2013/05/overview-of-linux-capabilities-part-2/"&gt;talked&lt;/a&gt;
about capabilities and gave an introduction to how this powerful
security feature within Linux can be used (and also exploited). I also
covered a few capabilities, so let's wrap this up with the remainder of
them.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;CAP_AUDIT_CONTROL&lt;/dt&gt;
&lt;dd&gt;Enable and disable kernel auditing; change auditing filter rules;
retrieve auditing status and filtering rules&lt;/dd&gt;
&lt;dt&gt;CAP_AUDIT_WRITE&lt;/dt&gt;
&lt;dd&gt;Write records to kernel auditing log&lt;/dd&gt;
&lt;dt&gt;CAP_BLOCK_SUSPEND&lt;/dt&gt;
&lt;dd&gt;Employ features that can block system suspend&lt;/dd&gt;
&lt;dt&gt;CAP_MAC_ADMIN&lt;/dt&gt;
&lt;dd&gt;Override Mandatory Access Control (implemented for the SMACK LSM)&lt;/dd&gt;
&lt;dt&gt;CAP_MAC_OVERRIDE&lt;/dt&gt;
&lt;dd&gt;Allow MAC configuration or state changes (implemented for the
SMACK LSM)&lt;/dd&gt;
&lt;dt&gt;CAP_NET_ADMIN&lt;/dt&gt;
&lt;dd&gt;Perform various network-related operations:
&lt;/p&gt;
-   interface configuration
-   administration of IP firewall, masquerading and accounting
-   modify routing tables
-   bind to any address for transparent proxying
-   set type-of-service (TOS)
-   clear driver statistics
-   set promiscuous mode
-   enabling multicasting
-   use &lt;em&gt;setsockopt()&lt;/em&gt; for privileged socket operations&lt;/dd&gt;
&lt;dt&gt;CAP_NET_BIND_SERVICE&lt;/dt&gt;
&lt;dd&gt;Bind a socket to Internet domain privileged ports (less than 1024)&lt;/dd&gt;
&lt;dt&gt;CAP_NET_RAW&lt;/dt&gt;
&lt;dd&gt;Use RAW and PACKET sockets, and bind to any address for transparent
proxying&lt;/dd&gt;
&lt;dt&gt;CAP_SETPCAP&lt;/dt&gt;
&lt;dd&gt;Allow the process to add any capability from the calling thread's
bounding set to its inheritable set, and drop capabilities from the
bounding set (using &lt;em&gt;prctl()&lt;/em&gt;) and make changes to the
&lt;em&gt;securebits&lt;/em&gt; flags.&lt;/dd&gt;
&lt;dt&gt;CAP_SYS_ADMIN&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Very powerful capability, includes:
&lt;/p&gt;
-   Running quota control, mount, swap management, set hostname, ...
-   Perform &lt;em&gt;VM86_REQUEST_IRQ vm86&lt;/em&gt; command
-   Perform &lt;em&gt;IPC_SET&lt;/em&gt; and &lt;em&gt;IPC_RMID&lt;/em&gt; operations on arbitrary
    System V IPC objects
-   Perform operations on &lt;code&gt;trusted.*&lt;/code&gt; and &lt;code&gt;security.*&lt;/code&gt; extended
    attributes
-   Use &lt;em&gt;lookup_dcookie&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
and many, many more. &lt;strong&gt;man capabilities&lt;/strong&gt; gives a good overview
of them.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;CAP_SYS_BOOT&lt;/dt&gt;
&lt;dd&gt;Use &lt;em&gt;reboot()&lt;/em&gt; and &lt;em&gt;kexec_load()&lt;/em&gt;&lt;/dd&gt;
&lt;dt&gt;CAP_SYS_CHROOT&lt;/dt&gt;
&lt;dd&gt;Use &lt;em&gt;chroot()&lt;/em&gt;&lt;/dd&gt;
&lt;dt&gt;CAP_SYS_MODULE&lt;/dt&gt;
&lt;dd&gt;Load and unload kernel modules&lt;/dd&gt;
&lt;dt&gt;CAP_SYS_RESOURCE&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Another capability with many consequences, including:
&lt;/p&gt;
-   Use reserved space on ext2 file systems
-   Make &lt;em&gt;ioctl()&lt;/em&gt; calls controlling ext3 journaling
-   Override disk quota limits
-   Increase resource limits
-   Override &lt;code&gt;RLIMIT_NPROC&lt;/code&gt; resource limits&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
and many more.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;CAP_SYS_TIME&lt;/dt&gt;
&lt;dd&gt;Set system clock and real-time hardware clock&lt;/dd&gt;
&lt;dt&gt;CAP_SYS_TTY_CONFIG&lt;/dt&gt;
&lt;dd&gt;Use &lt;em&gt;vhangup()&lt;/em&gt; and employ various privileged &lt;em&gt;ioctl()&lt;/em&gt; operations
on virtual terminals&lt;/dd&gt;
&lt;dt&gt;CAP_SYSLOG&lt;/dt&gt;
&lt;dd&gt;Perform privileged &lt;em&gt;syslog()&lt;/em&gt; operations and view kernel addresses
exposed with &lt;code&gt;/proc&lt;/code&gt; and other interfaces (if &lt;code&gt;kptr_restrict&lt;/code&gt;
is set)&lt;/dd&gt;
&lt;dt&gt;CAP_WAKE_ALARM&lt;/dt&gt;
&lt;dd&gt;Trigger something that will wake up the system&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Now when you look through the manual page of the capabilities, you'll
notice it talks about &lt;em&gt;securebits&lt;/em&gt; as well. This is an additional set of
flags that govern how capabilities are used, inherited etc. System
administrators don't set these flags - they are governed by the
applications themselves (when creating threads, forking, etc.) These
flags are set on a per-thread level, and govern the following behavior:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;SECBIT_KEEP_CAPS&lt;/dt&gt;
&lt;dd&gt;Allow a thread with UID 0 to retain its capabilities when it
switches its UIDs to a nonzero (non-root) value. By default, this
flag is &lt;em&gt;not&lt;/em&gt; set, and even if it is set, it is cleared on an
&lt;em&gt;execve&lt;/em&gt; call, reducing the likelihood that capabilities
are "leaked".&lt;/dd&gt;
&lt;dt&gt;SECBIT_NO_SETUID_FIXUP&lt;/dt&gt;
&lt;dd&gt;When set, the kernel will not adjust the capability sets when the
thread's effective and file system UIDs are switched between
zero (root) and non-zero values.&lt;/dd&gt;
&lt;dt&gt;SECBIT_NOROOT&lt;/dt&gt;
&lt;dd&gt;If set, the kernel does not grant capabilities when a setuid-root
program is executed, or when a process with an effective or real UID
of 0 (root) calls &lt;em&gt;execve&lt;/em&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Manipulating these bits requires the &lt;code&gt;CAP_SETPCAP&lt;/code&gt; capability. Except
for the &lt;code&gt;SECBIT_KEEP_CAPS&lt;/code&gt; security bit, the others are preserved on an
&lt;em&gt;execve()&lt;/em&gt; call, and all bits are inherited by child processes (such as
when &lt;em&gt;fork()&lt;/em&gt; is used).&lt;/p&gt;
&lt;p&gt;As a user or admin, you can also see capability-related information
through the &lt;code&gt;/proc&lt;/code&gt; file system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; # grep ^Cap /proc/$$/status
CapInh: 0000000000000000
CapPrm: 0000001fffffffff
CapEff: 0000001fffffffff
CapBnd: 0000001fffffffff

$ grep ^Cap /proc/$$/status
CapInh: 0000000000000000
CapPrm: 0000000000000000
CapEff: 0000000000000000
CapBnd: 0000001fffffffff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The capabilities listed therein are bitmasks for the various
capabilities. The mask &lt;code&gt;1FFFFFFFFF&lt;/code&gt; holds 37 positions, which match the
37 capabilities known (again, see &lt;code&gt;uapi/linux/capabilities.h&lt;/code&gt; in the
kernel sources to see the values of each of the capabilities). Again,
the &lt;strong&gt;pscap&lt;/strong&gt; can be used to get information about the enabled
capabilities of running processes in a more human readable format. But
another tool provided by the &lt;code&gt;sys-libs/libcap&lt;/code&gt; is interested as well to
look at: &lt;strong&gt;capsh&lt;/strong&gt;. The tool offers many capability-related features,
including decoding the &lt;code&gt;status&lt;/code&gt; fields:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ capsh --decode=0000001fffffffff
0x0000001fffffffff=cap_chown,cap_dac_override,cap_dac_read_search,
cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,
cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,
cap_net_admin,cap_net_raw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,
cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,
cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,
cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,
cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,
cap_syslog,35,36
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next to fancy decoding, &lt;strong&gt;capsh&lt;/strong&gt; can also launch a shell with reduced
capabilities. This makes it a good utility for jailing chroots even
more.&lt;/p&gt;</content><category term="Security"></category><category term="capabilities"></category><category term="capsh"></category><category term="libcap"></category><category term="linux"></category></entry><entry><title>Overview of Linux capabilities, part 2</title><link href="https://blog.siphos.be/2013/05/overview-of-linux-capabilities-part-2/" rel="alternate"></link><published>2013-05-05T03:50:00+02:00</published><updated>2013-05-05T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-05-05:/2013/05/overview-of-linux-capabilities-part-2/</id><summary type="html">&lt;p&gt;As I've (in a very high level) &lt;a href="http://blog.siphos.be/2013/05/capabilities-a-short-intro/"&gt;described
capabilities&lt;/a&gt;
and talked a bit on how to &lt;a href="http://blog.siphos.be/2013/05/restricting-and-granting-capabilities/"&gt;work with
them&lt;/a&gt;,
I started with a small overview of
&lt;a href="http://blog.siphos.be/2013/05/overview-of-linux-capabilities-part-1/"&gt;file-related&lt;/a&gt;
capabilities. So next up are process-related capabilities (note, this
isn't a conform terminology, more some categorization that I do myself).&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;CAP_IPC_LOCK â€¦&lt;/dt&gt;&lt;/dl&gt;</summary><content type="html">&lt;p&gt;As I've (in a very high level) &lt;a href="http://blog.siphos.be/2013/05/capabilities-a-short-intro/"&gt;described
capabilities&lt;/a&gt;
and talked a bit on how to &lt;a href="http://blog.siphos.be/2013/05/restricting-and-granting-capabilities/"&gt;work with
them&lt;/a&gt;,
I started with a small overview of
&lt;a href="http://blog.siphos.be/2013/05/overview-of-linux-capabilities-part-1/"&gt;file-related&lt;/a&gt;
capabilities. So next up are process-related capabilities (note, this
isn't a conform terminology, more some categorization that I do myself).&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;CAP_IPC_LOCK&lt;/dt&gt;
&lt;dd&gt;Allow the process to lock memory&lt;/dd&gt;
&lt;dt&gt;CAP_IPC_OWNER&lt;/dt&gt;
&lt;dd&gt;Bypass the permission checks for operations on System V IPC objects
(similar to the &lt;code&gt;CAP_DAC_OVERRIDE&lt;/code&gt; for files)&lt;/dd&gt;
&lt;dt&gt;CAP_KILL&lt;/dt&gt;
&lt;dd&gt;Bypass permission checks for sending signals&lt;/dd&gt;
&lt;dt&gt;CAP_SETUID&lt;/dt&gt;
&lt;dd&gt;Allow the process to make arbitrary manipulations of process UIDs
and create forged UID when passing socket credentials via UNIX
domain sockets&lt;/dd&gt;
&lt;dt&gt;CAP_SETGID&lt;/dt&gt;
&lt;dd&gt;Same, but then for GIDs&lt;/dd&gt;
&lt;dt&gt;CAP_SYS_NICE&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This capability governs several permissions/abilities, namely to
allow the process to
&lt;/p&gt;
-   change the &lt;em&gt;nice&lt;/em&gt; value of itself and other processes
-   set real-time scheduling priorities for itself, and set
    scheduling policies and priorities for arbitrary processes
-   set the CPU affinity for arbitrary processes
-   apply &lt;em&gt;migrate_pages&lt;/em&gt; to arbitrary processes and allow
    processes to be migrated to arbitrary nodes
-   apply &lt;em&gt;move_pages&lt;/em&gt; to arbitrary processes
-   use the &lt;code&gt;MPOL_MF_MOVE_ALL&lt;/code&gt; flag with &lt;em&gt;mbind()&lt;/em&gt; and
    &lt;em&gt;move_pages()&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
The abilities related to page moving, migration and nodes is of
importance for NUMA systems, not something most workstations have
or need.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;CAP_SYS_PACCT&lt;/dt&gt;
&lt;dd&gt;Use &lt;em&gt;acct()&lt;/em&gt;, to enable or disable system resource accounting for
the process&lt;/dd&gt;
&lt;dt&gt;CAP_SYS_PTRACE&lt;/dt&gt;
&lt;dd&gt;Allow the process to trace arbitrary processes using &lt;em&gt;ptrace()&lt;/em&gt;,
apply &lt;em&gt;get_robust_list()&lt;/em&gt; against arbitrary processes and inspect
processes using &lt;em&gt;kcmp()&lt;/em&gt;.&lt;/dd&gt;
&lt;dt&gt;CAP_SYS_RAWIO&lt;/dt&gt;
&lt;dd&gt;Allow the process to perform I/O port operations, access
&lt;code&gt;/proc/kcore&lt;/code&gt; and employ the &lt;code&gt;FIBMAP&lt;/code&gt; &lt;em&gt;ioctl()&lt;/em&gt; operation.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Capabilities such as &lt;code&gt;CAP_KILL&lt;/code&gt; and &lt;code&gt;CAP_SETUID&lt;/code&gt; are very important to
govern correctly, but this post would be rather dull (given that the
definitions of the above capabilities can be found from the manual page)
if I wouldn't talk a bit more about its feasibility. Take a look at the
following C application code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#include &amp;lt;errno.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/capability.h&amp;gt;
#include &amp;lt;sys/prctl.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main(int argc, char ** argv) {
  printf(&amp;quot;cap_setuid and cap_setgid: %d\n&amp;quot;, prctl(PR_CAPBSET_READ, CAP_SETUID|CAP_SETGID, 0, 0, 0));
  printf(&amp;quot; %s\n&amp;quot;, cap_to_text(cap_get_file(argv[0]), NULL));
  printf(&amp;quot; %s\n&amp;quot;, cap_to_text(cap_get_proc(), NULL));
  if (setresuid(0, 0, 0));
    printf(&amp;quot;setresuid(): %s\n&amp;quot;, strerror(errno));
  execve(&amp;quot;/bin/sh&amp;quot;, NULL, NULL);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At first sight, it looks like an application to get root privileges
(&lt;em&gt;setresuid()&lt;/em&gt;) and then spawn a shell. If that application would be
given &lt;code&gt;CAP_SETUID&lt;/code&gt; and &lt;code&gt;CAP_SETGID&lt;/code&gt; effectively, it would allow anyone
who executed it to automatically get a root shell, wouldn't it?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ gcc -o test -lcap test.c
# setcap cap_setuid,cap_setgid+ep test
$ ./test
cap_setuid and cap_setgid: 1
 = cap_setgid,cap_setuid+ep
 =
setresuid() failed: Operation not permitted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So what happened? After all, the two capabilities are set with the &lt;em&gt;+ep&lt;/em&gt;
flags given. Then why aren't these capabilities enabled? Well, this
binary was stored on a file system that is mounted with the &lt;em&gt;nosuid&lt;/em&gt;
option. As a result, this capability is &lt;em&gt;not&lt;/em&gt; enabled and the
application didn't work. If I move the file to another file system that
doesn't have the &lt;em&gt;nosuid&lt;/em&gt; option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ /usr/local/bin/test
cap_setuid and cap_setgid: 1
 = cap_setgid,cap_setuid+ep
 = cap_setgid,cap_setuid+ep
setresuid() failed: Operation not permitted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So the capabilities now do get enabled, so why does this still fail?
This now is due to SELinux:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;type=AVC msg=audit(1367393377.342:4778): avc:  denied  { setuid } for  pid=21418 comm=&amp;quot;test&amp;quot; capability=7  scontext=staff_u:staff_r:staff_t tcontext=staff_u:staff_r:staff_t tclass=capability
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And if you enable grSecurity's TPE, we can't even start the binary to
begin with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ./test
-bash: ./test: Permission denied
$ /lib/ld-linux-x86-64.so.2 /home/test/test
/home/test/test: error while loading shared libraries: /home/test/test: failed to map segment from shared object: Permission denied

# dmesg
...
[ 5579.567842] grsec: From 192.168.100.1: denied untrusted exec (due to not being in trusted group and file in non-root-owned directory) of /home/test/test by /home/test/test[bash:4221] uid/euid:1002/1002 gid/egid:100/100, parent /bin/bash[bash:4195] uid/euid:1002/1002 gid/egid:100/100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When all these "security obstacles" are not enabled, then the call
succeeds:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ /usr/local/bin/test
cap_setuid and cap_setgid: 1
 = cap_setgid,cap_setuid+ep
 = cap_setgid,cap_setuid+ep
setresuid() failed: Success
root@hpl tmp #
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This again shows how important it is to regularly review
capability-enabled files on the file system, as this is a major security
problem that cannot be detected by only looking for setuid binaries, but
also that securing a system is not limited to one or a few settings: one
always has to take the entire setup into consideration, hardening the
system so it becomes more difficult for malicious users to abuse it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# filecap -a
file                 capabilities
/usr/local/bin/test     setgid, setuid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Security"></category><category term="capabilities"></category><category term="grsecurity"></category><category term="linux"></category><category term="nosuid"></category><category term="selinux"></category><category term="tpe"></category></entry><entry><title>Overview of Linux capabilities, part 1</title><link href="https://blog.siphos.be/2013/05/overview-of-linux-capabilities-part-1/" rel="alternate"></link><published>2013-05-04T03:50:00+02:00</published><updated>2013-05-04T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-05-04:/2013/05/overview-of-linux-capabilities-part-1/</id><summary type="html">&lt;p&gt;In the
&lt;a href="http://blog.siphos.be/2013/05/capabilities-a-short-intro/"&gt;previous&lt;/a&gt;
&lt;a href="http://blog.siphos.be/2013/05/restricting-and-granting-capabilities/"&gt;posts&lt;/a&gt;,
I talked about capabilities and how they can be used to allow processes
to run in a privileged fashion without granting them full root access to
the system. An example given was how capabilities can be leveraged to
run &lt;strong&gt;ping&lt;/strong&gt; without granting it setuid root rights â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the
&lt;a href="http://blog.siphos.be/2013/05/capabilities-a-short-intro/"&gt;previous&lt;/a&gt;
&lt;a href="http://blog.siphos.be/2013/05/restricting-and-granting-capabilities/"&gt;posts&lt;/a&gt;,
I talked about capabilities and how they can be used to allow processes
to run in a privileged fashion without granting them full root access to
the system. An example given was how capabilities can be leveraged to
run &lt;strong&gt;ping&lt;/strong&gt; without granting it setuid root rights. But what are the
various capabilities that Linux is, well, capable of?&lt;/p&gt;
&lt;p&gt;There are many, and as time goes by, more capabilities are added to the
set. The last capability added to the main Linux kernel tree was the
&lt;code&gt;CAP_BLOCK_SUSPEND&lt;/code&gt; in the 3.5 series. An overview of all capabilities
can be seen with &lt;strong&gt;man capabilities&lt;/strong&gt; or by looking at the Linux kernel
source code, &lt;code&gt;include/uapi/linux/capability.h&lt;/code&gt;. But because you are all
lazy, and because it is a good exercise for myself, I'll go through many
of them in this and the next few posts.&lt;/p&gt;
&lt;p&gt;For now, let's look at file related capabilities. As a reminder, if you
want to know which SELinux domains are "granted" a particular
capability, you can look this up using &lt;strong&gt;sesearch&lt;/strong&gt;. The capability is
either in the &lt;em&gt;capability&lt;/em&gt; or &lt;em&gt;capability2&lt;/em&gt; class, and is named after
the capability itself, without the &lt;code&gt;CAP_&lt;/code&gt; prefix:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sesearch -c capability -p chown -A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;dl&gt;
&lt;dt&gt;CAP_CHOWN&lt;/dt&gt;
&lt;dd&gt;Allow making changes to the file UIDs and GIDs.&lt;/dd&gt;
&lt;dt&gt;CAP_DAC_OVERRIDE&lt;/dt&gt;
&lt;dd&gt;Bypass file read, write and execute permission checks. I came across
a &lt;a href="http://www.reddit.com/r/linux/comments/1cnn15/for_chmod_why_is_root_allowed_to_execute_programs/"&gt;reddit
post&lt;/a&gt;
that was about this capability not that long ago.&lt;/dd&gt;
&lt;dt&gt;CAP_DAC_READ_SEARCH&lt;/dt&gt;
&lt;dd&gt;Bypass file read permission and directory read/search
permission checks.&lt;/dd&gt;
&lt;dt&gt;CAP_FOWNER&lt;/dt&gt;
&lt;dd&gt;This capability governs 5 capabilities in one:
&lt;/p&gt;
-   Bypass permission checks on operations that normally require the
    file system UID of the process to match the UID of the file
    (unless already granted through &lt;code&gt;CAP_DAC_READ_SEARCH&lt;/code&gt; and/or
    &lt;code&gt;CAP_DAC_OVERRIDE&lt;/code&gt;)
-   Allow to set extended file attributes
-   Allow to set access control lists
-   Ignore directory sticky bit on file deletion
-   Allow specifying &lt;code&gt;O_NOATIME&lt;/code&gt; for files in &lt;em&gt;open()&lt;/em&gt; and &lt;em&gt;fnctl()&lt;/em&gt;
    calls&lt;/dd&gt;
&lt;dt&gt;CAP_FSETID&lt;/dt&gt;
&lt;dd&gt;Do not clear the setuid/setgid permission bits when a file is
modified&lt;/dd&gt;
&lt;dt&gt;CAP_LEASE&lt;/dt&gt;
&lt;dd&gt;Allow establishing leases on files&lt;/dd&gt;
&lt;dt&gt;CAP_LINUX_IMMUTABLE&lt;/dt&gt;
&lt;dd&gt;Allow setting &lt;em&gt;FS_APPEND_FL&lt;/em&gt; and &lt;em&gt;FP_IMMUTABLE_FL&lt;/em&gt; inode flags&lt;/dd&gt;
&lt;dt&gt;CAP_MKNOD&lt;/dt&gt;
&lt;dd&gt;Allow creating special files with &lt;strong&gt;mknod&lt;/strong&gt;&lt;/dd&gt;
&lt;dt&gt;CAP_SETFCAP&lt;/dt&gt;
&lt;dd&gt;Allow setting file capabilities (what I did with the &lt;strong&gt;anotherping&lt;/strong&gt;
binary in the previous post)&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;When working with SELinux (especially when writing applications), you'll
find that the &lt;code&gt;CAP_DAC_READ_SEARCH&lt;/code&gt; and &lt;code&gt;CAP_DAC_OVERRIDE&lt;/code&gt; capability
come up often. This is the case when applications are written to run as
root yet want to scan through, read or even execute non-root owned
files. Without SELinux, because these run as root, this is all granted.
However, when you start confining those applications, it becomes
apparent that they require this capability. Another example is when you
run user applications, as root, like when trying to play a movie or
music file with &lt;strong&gt;mplayer&lt;/strong&gt; when this file is owned by a regular user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;type=AVC msg=audit(1367145131.860:18785): avc:  denied  { dac_read_search } for
pid=8153 comm=&amp;quot;mplayer&amp;quot; capability=2  scontext=staff_u:sysadm_r:mplayer_t
tcontext=staff_u:sysadm_r:mplayer_t tclass=capability

type=AVC msg=audit(1367145131.860:18785): avc:  denied  { dac_override } for
pid=8153 comm=&amp;quot;mplayer&amp;quot; capability=1  scontext=staff_u:sysadm_r:mplayer_t
tcontext=staff_u:sysadm_r:mplayer_t tclass=capability
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice the time stamp: both checks are triggered at the same time. What
happens is that the Linux security hooks first check for
&lt;code&gt;DAC_READ_SEARCH&lt;/code&gt; (the "lesser" grants of the two) and then for
&lt;code&gt;DAC_OVERRIDE&lt;/code&gt; (which contains &lt;code&gt;DAC_READ_SEARCH&lt;/code&gt; and more). In both
cases, the check failed in the above example.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;CAP_LEASE&lt;/code&gt; capability is one that I had not heard about before
(actually, I had not heard of getting "file leases" on Linux either). A
file lease allows for the lease holder (which requires this capability)
to be notified when another process tries to open or truncate the file.
When that happens, the call itself is blocked and the lease holder is
notified (usually using SIGIO) about the access. It is not really to
lock a file (since, if the lease holder doesn't properly release it, it
is forcefully "broken" and the other process can continue its work) but
rather to properly close the file descriptor or flushing caches, etc.&lt;/p&gt;
&lt;p&gt;BTW, on my system, only 5 SELinux domains hold the &lt;em&gt;lease&lt;/em&gt; capability.&lt;/p&gt;
&lt;p&gt;There are 37 capabilities known by the Linux kernel at this time. The
above list has 9 file related ones. So perhaps next I can talk about
process capabilities.&lt;/p&gt;</content><category term="Security"></category><category term="capabilities"></category><category term="linux"></category></entry><entry><title>Restricting and granting capabilities</title><link href="https://blog.siphos.be/2013/05/restricting-and-granting-capabilities/" rel="alternate"></link><published>2013-05-03T03:50:00+02:00</published><updated>2013-05-03T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-05-03:/2013/05/restricting-and-granting-capabilities/</id><summary type="html">&lt;p&gt;As
&lt;a href="http://blog.siphos.be/2013/05/capabilities-a-short-intro"&gt;capabilities&lt;/a&gt;
are a way for running processes with some privileges, without having the
need to grant them root privileges, it is important to understand that
they exist if you are a system administrator, but also as an auditor or
other security-related function. Having processes run as a non-root user â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;As
&lt;a href="http://blog.siphos.be/2013/05/capabilities-a-short-intro"&gt;capabilities&lt;/a&gt;
are a way for running processes with some privileges, without having the
need to grant them root privileges, it is important to understand that
they exist if you are a system administrator, but also as an auditor or
other security-related function. Having processes run as a non-root user
is no longer sufficient to assume that they do not hold any rights to
mess up the system or read files they shouldn't be able to read.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://grsecurity.net/"&gt;grsecurity&lt;/a&gt; kernel patch set, which is
applied to the Gentoo hardened kernel sources, contains for instance
&lt;code&gt;CONFIG_GRKERNSEC_CHROOT_CAPS&lt;/code&gt; which, as per its documentation,
"restrcts the capabilities on all root processes within a chroot jail to
stop module insertion, raw i/o, system and net admin tasks, rebooting
the system, modifying immutable files, modifying IPC owned by another,
and changing the system time." But other implementations might even use
capabilities to restrict the users. Consider
&lt;a href="http://lxc.sourceforge.net/"&gt;LXC&lt;/a&gt; (Linux Containers). When a container
is started, &lt;code&gt;CAP_SYS_BOOT&lt;/code&gt; (the ability to shutdown/reboot the
system/container) is removed so that users cannot abuse this privilege.&lt;/p&gt;
&lt;p&gt;You can also grant capabilities to users selectively, using &lt;code&gt;pam_cap.so&lt;/code&gt;
(the Capabilities Pluggable Authentication Module). For instance, to
allow some users to ping, instead of granting the &lt;code&gt;cap_net_raw&lt;/code&gt;
immediately (&lt;em&gt;+ep&lt;/em&gt;), we can assign the capability to some users through
PAM, and have the &lt;strong&gt;ping&lt;/strong&gt; binary inherit and use this capability
instead (&lt;em&gt;+p&lt;/em&gt;). That doesn't mean that the capability is in effect, but
rather that it is in a sort-of permitted set. Applications that are
granted a certain permission this way can either use this capability if
the user is allowed to have it, or won't otherwise.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# setcap cap_net_raw+p anotherping

# vim /etc/pam.d/system-login
... add in something like
auth     required     pam_cap.so

# vim /etc/security/capability.conf
... add in something like
cap_net_raw           user1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The logic used with capabilities can be described as follows (it is not
as difficult as it looks):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        pI&amp;#39; = pI
  (***) pP&amp;#39; = fP | (fI &amp;amp; pI)
        pE&amp;#39; = pP&amp;#39; &amp;amp; fE          [NB. fE is 0 or ~0]

  I=Inheritable, P=Permitted, E=Effective // p=process, f=file
  &amp;#39; indicates post-exec().
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, for instance, the second line reads "The permitted set of
capabilities of the newly forked process is set to the permitted set of
capabilities of its executable file, together with the result of the AND
operation between the inherited capabilities of the file and the
inherited capabilities of the parent process."&lt;/p&gt;
&lt;p&gt;As an admin, you might want to keep an eye out for binaries that have
particular capabilities set. With &lt;strong&gt;filecap&lt;/strong&gt; you can list which
capabilities are in the effective set of files found on the file system
(for instance, &lt;em&gt;+ep&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# filecap 
file                 capabilities
/bin/anotherping     net_raw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Similarly, with &lt;strong&gt;pscap&lt;/strong&gt; you can see the capabilities set on running
processes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# pscap -a
ppid  pid   name        command           capabilities
6148  6152  root        bash              full
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It might be wise to take this up in the daily audit reports.&lt;/p&gt;</content><category term="Security"></category><category term="capabilities"></category><category term="linux"></category></entry><entry><title>Capabilities, a short intro</title><link href="https://blog.siphos.be/2013/05/capabilities-a-short-intro/" rel="alternate"></link><published>2013-05-02T03:50:00+02:00</published><updated>2013-05-02T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-05-02:/2013/05/capabilities-a-short-intro/</id><summary type="html">&lt;p&gt;Capabilities. You probably have heard of them already, but when you
start developing SELinux policies, you'll notice that you come in closer
contact with them than before. This is because SELinux, when
applications want to do something "root-like", checks the capability of
that application. Without SELinux, this either requires the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Capabilities. You probably have heard of them already, but when you
start developing SELinux policies, you'll notice that you come in closer
contact with them than before. This is because SELinux, when
applications want to do something "root-like", checks the capability of
that application. Without SELinux, this either requires the binary to
have the proper capability set, or the application to run in root modus.
With SELinux, the capability also needs to be granted to the SELinux
context (the domain in which the application runs).&lt;/p&gt;
&lt;p&gt;But forget about SELinux for now, and let's focus on capabilities.
Capabilities in Linux are flags that tell the kernel what the
application is allowed to do, but unlike file access, capabilities for
an application are system-wide: there is no "target" to which it
applies. Think about an "ability" of an application. See for yourself
through &lt;strong&gt;man capabilities&lt;/strong&gt;. If you have no additional security
mechanism in place, the Linux root user has all capabilities assigned to
it. And you can remove capabilities from the root user if you want to,
but generally, capabilities are used to grant applications that tiny bit
more privileges, without needing to grant them root rights.&lt;/p&gt;
&lt;p&gt;Consider the &lt;strong&gt;ping&lt;/strong&gt; utility. It is marked setuid root on some
distributions, because the utility requires the (cap)ability to send raw
packets. This capability is known as &lt;code&gt;CAP_NET_RAW&lt;/code&gt;. However, thanks to
capabilities, you can now mark the &lt;strong&gt;ping&lt;/strong&gt; application with this
capability and drop the setuid from the file. As a result, the
application does not run with full root privileges anymore, but with the
restricted privileges of the user plus one capability, namely the
&lt;code&gt;CAP_NET_RAW&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let's take this &lt;strong&gt;ping&lt;/strong&gt; example to the next level: copy the binary
(possibly relabel it as &lt;code&gt;ping_exec_t&lt;/code&gt; if you run with SELinux), make
sure it does not hold the setuid and try it out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# cp ping anotherping
# chcon -t ping_exec_t anotherping
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now as a regular user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ping -c 1 127.0.0.1
PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.057 ms

$ anotherping -c 1 127.0.0.1
ping: icmp open socket: Operation not permitted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's assign the binary with the &lt;code&gt;CAP_NET_RAW&lt;/code&gt; capability flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# setcap cap_net_raw+ep anotherping
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And tadaa:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ anotherping -c 1 127.0.0.1
PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.054 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What &lt;strong&gt;setcap&lt;/strong&gt; did was place an extended attribute to the file, which
is a binary representation of the capabilities assigned to the
application. The additional information (&lt;code&gt;+ep&lt;/code&gt;) means that the
capability is &lt;em&gt;p&lt;/em&gt;ermitted and &lt;em&gt;e&lt;/em&gt;ffective.&lt;/p&gt;
&lt;p&gt;So long for the primer, I'll talk about the various capabilities in a
later post.&lt;/p&gt;</content><category term="Security"></category><category term="capabilities"></category><category term="linux"></category><category term="ping"></category><category term="selinux"></category></entry></feed>