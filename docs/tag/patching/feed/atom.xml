<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Simplicity is a form of art... - patching</title><link href="https://blog.siphos.be/" rel="alternate"></link><link href="https://blog.siphos.be/tag/patching/feed/atom.xml" rel="self"></link><id>https://blog.siphos.be/</id><updated>2015-09-02T20:33:00+02:00</updated><subtitle></subtitle><entry><title>Maintaining packages and backporting</title><link href="https://blog.siphos.be/2015/09/maintaining-packages-and-backporting/" rel="alternate"></link><published>2015-09-02T20:33:00+02:00</published><updated>2015-09-02T20:33:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2015-09-02:/2015/09/maintaining-packages-and-backporting/</id><summary type="html">&lt;p&gt;A few days ago I committed a small update to &lt;code&gt;policycoreutils&lt;/code&gt;, a SELinux related
package that provides most of the management utilities for SELinux systems. The
fix was to get two patches (which are committed upstream) into the existing
release so that our users can benefit from the fixed issues without having to
wait for a new release.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A few days ago I committed a small update to &lt;code&gt;policycoreutils&lt;/code&gt;, a SELinux related
package that provides most of the management utilities for SELinux systems. The
fix was to get two patches (which are committed upstream) into the existing
release so that our users can benefit from the fixed issues without having to
wait for a new release.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Getting the patches&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To capture the patches, I used &lt;code&gt;git&lt;/code&gt; together with the commit id:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;~$ git format-patch -n -1 73b7ff41&lt;/span&gt;
&lt;span class="go"&gt;0001-Only-invoke-RPM-on-RPM-enabled-Linux-distributions.patch&lt;/span&gt;
&lt;span class="go"&gt;~$ git format-patch -n -1 4fbc6623&lt;/span&gt;
&lt;span class="go"&gt;0001-Set-self.sename-to-sename-after-calling-semanage_seu.patch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The two generated patch files contain all information about the commit. Thanks
to the &lt;code&gt;epatch&lt;/code&gt; support in the &lt;code&gt;eutils.eclass&lt;/code&gt;, these patch files are
immediately usable within Gentoo's ebuilds.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Updating the ebuilds&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The SELinux userspace ebuilds in Gentoo all have &lt;a href="http://blog.siphos.be/2015/06/live-selinux-userspace-ebuilds/"&gt;live ebuilds&lt;/a&gt;
available which are immediately usable for releases. The idea with those live
ebuilds is that we can simply copy them and commit in order to make a new release.&lt;/p&gt;
&lt;p&gt;So, in case of the patch backporting, the necessary patch files are first moved
into the &lt;code&gt;files/&lt;/code&gt; subdirectory of the package. Then, the live ebuild is updated
to use the new patches:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gu"&gt;@@ -88,6 +85,8 @@ src_prepare() {&lt;/span&gt;
                epatch &amp;quot;${FILESDIR}/0070-remove-symlink-attempt-fails-with-gentoo-sandbox-approach.patch&amp;quot;
                epatch &amp;quot;${FILESDIR}/0110-build-mcstrans-bug-472912.patch&amp;quot;
                epatch &amp;quot;${FILESDIR}/0120-build-failure-for-mcscolor-for-CONTEXT__CONTAINS.patch&amp;quot;
&lt;span class="gi"&gt;+               epatch &amp;quot;${FILESDIR}/0130-Only-invoke-RPM-on-RPM-enabled-Linux-distributions-bug-534682.patch&amp;quot;&lt;/span&gt;
&lt;span class="gi"&gt;+               epatch &amp;quot;${FILESDIR}/0140-Set-self.sename-to-sename-after-calling-semanage-bug-557370.patch&amp;quot;&lt;/span&gt;
        fi

        # rlpkg is more useful than fixfiles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The patches themselves do not apply for the live ebuilds themselves (they are
ignored there) as we want the live ebuilds to be as close to the upstream
project as possible. But because the ebuilds are immediately usable for
releases, we add the necessary information there first.&lt;/p&gt;
&lt;p&gt;Next, the new release is created:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;~$ cp policycoreutils-9999.ebuild policycoreutils-2.4-r2.ebuild&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Testing the changes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The new release is then tested. I have a couple of scripts that I use
for automated testing. So first I update these scripts to also try out
the functionality that was failing before. On existing systems, these
tests should fail:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Running task semanage (Various semanage related operations).
  ...
    Executing step &amp;quot;perm_port_on   : Marking portage_t as a permissive domain                              &amp;quot; -&amp;gt; ok
    Executing step &amp;quot;perm_port_off  : Removing permissive mark from portage_t                               &amp;quot; -&amp;gt; ok
    Executing step &amp;quot;selogin_modify : Modifying a SELinux login definition                                  &amp;quot; -&amp;gt; failed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, on a test system where the new package has been installed, the same
testset is executed (together with all other tests) to validate if the problem
is fixed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pushing out the new release&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Finally, with the fixes in and validated, the new release is pushed out (into
~arch first of course) and the bugs are marked as &lt;code&gt;RESOLVED:TEST-REQUEST&lt;/code&gt;. Users
can confirm that it works (which would move it to &lt;code&gt;VERIFIED:TEST-REQUEST&lt;/code&gt;) or
we stabilize it after the regular testing period is over (which moves it to
&lt;code&gt;RESOLVED:FIXED&lt;/code&gt; or &lt;code&gt;VERIFIED:FIXED&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I do still have to get used to Gentoo using git as its repository now. The
&lt;a href="https://wiki.gentoo.org/wiki/Gentoo_git_workflow"&gt;workflow&lt;/a&gt; to use is
documented though. Luckily, because I often get that the &lt;code&gt;git push&lt;/code&gt; fails
(due to changes to the tree since my last pull). So I need to run &lt;code&gt;git
pull --rebase=preserve&lt;/code&gt; followed by &lt;code&gt;repoman full&lt;/code&gt; and then the push again
sufficiently quick after each other).&lt;/p&gt;
&lt;p&gt;This simple flow is easy to get used to. Thanks to the existing foundation
for package maintenance (such as &lt;code&gt;epatch&lt;/code&gt; for patching, live ebuilds that
can be immediately used for releases and the ability to just cherry pick
patches towards our repository) we can serve updates with just a few minutes
of work.&lt;/p&gt;</content><category term="Gentoo"></category><category term="gentoo"></category><category term="ebuild"></category><category term="patching"></category></entry><entry><title>How far reaching vulnerabilities can go</title><link href="https://blog.siphos.be/2013/04/how-far-reaching-vulnerabilities-can-go/" rel="alternate"></link><published>2013-04-09T19:39:00+02:00</published><updated>2013-04-09T19:39:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-04-09:/2013/04/how-far-reaching-vulnerabilities-can-go/</id><summary type="html">&lt;p&gt;If you follow the news a bit, you know that PostgreSQL has had a
significant security vulnerability. The PostgreSQL team announced it up
front and communicated how they would deal with the vulnerability (which
basically comes down to saying that it is severe, that the public
repositories will be temporarily â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you follow the news a bit, you know that PostgreSQL has had a
significant security vulnerability. The PostgreSQL team announced it up
front and communicated how they would deal with the vulnerability (which
basically comes down to saying that it is severe, that the public
repositories will be temporarily frozen as developers add in the
necessary fixes and start building the necessary software for a new
release, and at the release moment give more details about the
vulnerability.&lt;/p&gt;
&lt;p&gt;The exploitability of the vulnerability was quickly identified, and we
know that compromises wouldn't take long. A &lt;a href="http://schemaverse.tumblr.com/post/47312545952/the-schemaverse-was-hacked"&gt;blog
post&lt;/a&gt;
from the schemaverse tells us that exploits won't take long (less than
24 hours) and due to the significance of the vulnerability, it cannot be
stressed enough that patching should really be part of the minimal
security requirements of any security-conscious organization. But
patching alone isn't the only thing to consider.&lt;/p&gt;
&lt;p&gt;The notice that PostgreSQL mentions also that restricting access to the
database through &lt;code&gt;pg_hba.conf&lt;/code&gt; isn't sufficient, as the vulnerable code
is executed before the &lt;code&gt;pg_hba.conf&lt;/code&gt; file is read. So one of the
mitigations for the vulnerability would be a firewall (hostbased or
network) that restricts access to the database so only trusted addresses
are allowed. I'm personally an advocate in favor of hostbased firewalls.&lt;/p&gt;
&lt;p&gt;But the thing that hits me the most, is the amount of applications that
use "embedded" postgresql database services in their product. If you
take part of a larger organization with a large portfolio of software
titles running in the data center, you'll undoubtedly have seen lists
(through network scans or otherwise) of systems that are running
PostgreSQL as part of the product installation (and not as a "managed"
database service). The HP GUIDManager or the NNMI components or the
Systems Insight Manager use embedded PostgreSQL services. The cloudera
manager can be easily set up with an "embedded" PostgreSQL (which
doesn't mean it isn't a full-fledged PostgreSQL, but rather that the
setup and management of the service is handled by the product instead of
by "your own" DBA team). Same with Servoy.&lt;/p&gt;
&lt;p&gt;I don't disagree with all products providing embedded database
platforms, and especially not with choosing for PostgreSQL which I
consider a very mature, stable and feature-rich (and not to be
forgotten, very active community) database platform. But I do hope that
these products take up their responsibility and release updated versions
or patches for their installations to their customers &lt;em&gt;very&lt;/em&gt; soon.&lt;/p&gt;
&lt;p&gt;Perhaps I should ask our security operational team to take a scan to
actively follow-up on these...&lt;/p&gt;</content><category term="Security"></category><category term="firewall"></category><category term="patching"></category><category term="postgresql"></category><category term="security"></category></entry></feed>