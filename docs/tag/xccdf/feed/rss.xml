<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Simplicity is a form of art... - xccdf</title><link>https://blog.siphos.be/</link><description></description><lastBuildDate>Sat, 03 Mar 2018 13:20:00 +0100</lastBuildDate><item><title>Automating compliance checks</title><link>https://blog.siphos.be/2018/03/automating-compliance-checks/</link><description>&lt;p&gt;With the configuration baseline for a technical service being described fully (see the &lt;a href="https://blog.siphos.be/2018/01/documenting-configuration-changes/"&gt;first&lt;/a&gt;, &lt;a href="https://blog.siphos.be/2018/01/structuring-a-configuration-baseline/"&gt;second&lt;/a&gt; and &lt;a href="https://blog.siphos.be/2018/01/documenting-a-rule/"&gt;third&lt;/a&gt; post in this series), it is time to consider the validation of the settings in an automated manner. The preferred method for this is to use &lt;em&gt;Open Vulnerability and Assessment Language (OVAL)&lt;/em&gt;, which is nowadays managed by the &lt;a href="https://oval.cisecurity.org/"&gt;Center for Internet Security&lt;/a&gt;, abbreviated as CISecurity. Previously, OVAL was maintained and managed by Mitre under NIST supervision, and Google searches will often still point to the old sites. However, documentation is now maintained on CISecurity's &lt;a href="https://github.com/OVALProject/Language/tree/5.11.2/docs"&gt;github repositories&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But I digress...&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 03 Mar 2018 13:20:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2018-03-03:/2018/03/automating-compliance-checks/</guid><category>Security</category><category>xccdf</category><category>oval</category><category>scap</category><category>baseline</category></item><item><title>Documenting a rule</title><link>https://blog.siphos.be/2018/01/documenting-a-rule/</link><description>&lt;p&gt;In the &lt;a href="https://blog.siphos.be/2018/01/documenting-configuration-changes/"&gt;first post&lt;/a&gt; I talked about why configuration documentation is important. In the &lt;a href="https://blog.siphos.be/2018/01/structuring-a-configuration-baseline/"&gt;second post&lt;/a&gt; I looked into a good structure for configuration documentation of a technological service, and ended with an XCCDF template in which this documentation can be structured.&lt;/p&gt;
&lt;p&gt;The next step is to document the rules themselves, i.e. the actual content of a configuration baseline.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 24 Jan 2018 20:40:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2018-01-24:/2018/01/documenting-a-rule/</guid><category>Security</category><category>xccdf</category><category>scap</category><category>baseline</category></item><item><title>Structuring a configuration baseline</title><link>https://blog.siphos.be/2018/01/structuring-a-configuration-baseline/</link><description>&lt;p&gt;A good configuration baseline has a readable structure that allows all stakeholders to quickly see if the baseline is complete, as well as find a particular setting regardless of the technology. In this blog post, I'll cover a possible structure of the baseline which attempts to be sufficiently complete and technology agnostic.&lt;/p&gt;
&lt;p&gt;If you haven't read the blog post on &lt;a href="https://blog.siphos.be/2018/01/documenting-configuration-changes/"&gt;documenting configuration changes&lt;/a&gt;, it might be a good idea to do so as it declares the scope of configuration baselines and why I think XCCDF is a good match for this.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 17 Jan 2018 09:10:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2018-01-17:/2018/01/structuring-a-configuration-baseline/</guid><category>Security</category><category>xccdf</category><category>scap</category><category>baseline</category></item><item><title>Documenting configuration changes</title><link>https://blog.siphos.be/2018/01/documenting-configuration-changes/</link><description>&lt;p&gt;IT teams are continuously under pressure to set up and maintain infrastructure services quickly, efficiently and securely. As an infrastructure architect, my main concerns are related to the manageability of these services and the secure setup. And within those realms, a properly documented configuration setup is in my opinion very crucial.&lt;/p&gt;
&lt;p&gt;In this blog post series, I'm going to look into using the &lt;em&gt;Extensible Configuration Checklist Description Format (XCCDF)&lt;/em&gt; as the way to document these. This first post is an introduction to XCCDF functionally, and what I position it for.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 07 Jan 2018 21:20:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2018-01-07:/2018/01/documenting-configuration-changes/</guid><category>Security</category><category>xccdf</category><category>scap</category><category>baseline</category></item><item><title>Giving weights to compliance rules</title><link>https://blog.siphos.be/2013/12/giving-weights-to-compliance-rules/</link><description>&lt;p&gt;Now that we wrote up a few OVAL statements and used those instead of SCE
driven checks (where possible), let's finish up and go back to the XCCDF
document and see how we can put weights in place.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;CVE (Common Vulnerability Exposure)&lt;/strong&gt; standard allows for
vulnerabilities to be given …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 26 Dec 2013 04:13:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-12-26:/2013/12/giving-weights-to-compliance-rules/</guid><category>Security</category><category>ccss</category><category>cvss</category><category>scap</category><category>xccdf</category></item><item><title>Doing a content check with OVAL</title><link>https://blog.siphos.be/2013/12/doing-a-content-check-with-oval/</link><description>&lt;p&gt;Let's create an OVAL check to see if &lt;code&gt;/etc/inittab&lt;/code&gt;'s single user
definitions only refer to &lt;code&gt;/sbin/sulogin&lt;/code&gt; or &lt;code&gt;/sbin/rc single&lt;/code&gt;. First,
the skeleton:&lt;/p&gt;
&lt;p&gt;(XML content lost during blog conversion)&lt;/p&gt;
&lt;p&gt;The first thing we notice is that there are several namespaces defined
within OVAL. These namespaces refer to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 24 Dec 2013 04:25:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-12-24:/2013/12/doing-a-content-check-with-oval/</guid><category>Security</category><category>openscap</category><category>oval</category><category>scap</category><category>xccdf</category></item><item><title>What is OVAL?</title><link>https://blog.siphos.be/2013/12/what-is-oval/</link><description>&lt;p&gt;Time to discuss &lt;strong&gt;OVAL (Open Vulnerability Assessment Language)&lt;/strong&gt;. In
all the &lt;a href="http://blog.siphos.be/2013/12/running-a-bit-with-the-xccdf-document/"&gt;previous
posts&lt;/a&gt;
I focused the checking of rules (does the system comply with the given
rule) on scripts, through the Script Check Engine supported by openscap.
The advantage of SCE is that most people can quickly provide automated
checks …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 22 Dec 2013 04:40:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-12-22:/2013/12/what-is-oval/</guid><category>Security</category><category>openscap</category><category>oval</category><category>scap</category><category>sce</category><category>xccdf</category></item><item><title>Remediation through SCAP</title><link>https://blog.siphos.be/2013/12/remediation-through-scap/</link><description>&lt;p&gt;I promised in my &lt;a href="http://blog.siphos.be/2013/12/running-a-bit-with-the-xccdf-document/"&gt;previous
post&lt;/a&gt;
to give some information about remediation.&lt;/p&gt;
&lt;p&gt;Remediation is the process where you fix a system to become compliant
again after finding out there is a violation on the system. The easiest
form of remediation of course is to just notify the administrator and
give …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 20 Dec 2013 04:47:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-12-20:/2013/12/remediation-through-scap/</guid><category>Security</category><category>openscap</category><category>remediation</category><category>scap</category><category>xccdf</category></item><item><title>Running a bit with the XCCDF document</title><link>https://blog.siphos.be/2013/12/running-a-bit-with-the-xccdf-document/</link><description>&lt;p&gt;In my &lt;a href="http://blog.siphos.be/2013/12/xccdf-documenting-a-bit-more-than-just-descriptions/"&gt;previous
post&lt;/a&gt;
I introduced automated checking of rules through &lt;em&gt;SCE (Script Check
Engine)&lt;/em&gt;. Let's focus a bit more now on running with an XCCDF document:
how to automatically check the system, read the results and find more
information of those results.&lt;/p&gt;
&lt;p&gt;To provide a usable example, you can …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 18 Dec 2013 04:23:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-12-18:/2013/12/running-a-bit-with-the-xccdf-document/</guid><category>Security</category><category>openscap</category><category>scap</category><category>sce</category><category>xccdf</category></item><item><title>XCCDF - Documenting a bit more than just descriptions</title><link>https://blog.siphos.be/2013/12/xccdf-documenting-a-bit-more-than-just-descriptions/</link><description>&lt;p&gt;In my &lt;a href="http://blog.siphos.be/2013/12/an-xccdf-skeleton-for-postgresql/"&gt;previous
post&lt;/a&gt; I
made a skeleton XCCDF document. By now, we can create a well documented
"baseline" (best practice) for our subject (say PostgreSQL). But for now
I only talked about &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt; whereas XCCDF allows many other tags
as well.&lt;/p&gt;
&lt;p&gt;You can add &lt;em&gt;metadata&lt;/em&gt; information for a particular …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 16 Dec 2013 04:58:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-12-16:/2013/12/xccdf-documenting-a-bit-more-than-just-descriptions/</guid><category>Security</category><category>openscap</category><category>scap</category><category>sce</category><category>xccdf</category></item><item><title>An XCCDF skeleton for PostgreSQL</title><link>https://blog.siphos.be/2013/12/an-xccdf-skeleton-for-postgresql/</link><description>&lt;p&gt;In a &lt;a href="http://blog.siphos.be/2013/12/documenting-security-best-practices-xccdf-introduction/"&gt;previous
post&lt;/a&gt;
I wrote about the documentation structure I have in mind for a
PostgreSQL security best practice. Considering what XCCDF can give us,
the idea is to have the following structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Hardening PostgreSQL
+- Basic setup
+- Instance level configuration
|  +- Pre-startup configuration
|  `- PostgreSQL internal configuration
+- Database recommendations
`- User definitions …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 14 Dec 2013 04:00:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-12-14:/2013/12/an-xccdf-skeleton-for-postgresql/</guid><category>Security</category><category>postgresql</category><category>scap</category><category>xccdf</category></item><item><title>Documenting security best practices - XCCDF introduction</title><link>https://blog.siphos.be/2013/12/documenting-security-best-practices-xccdf-introduction/</link><description>&lt;p&gt;When I have some free time, I try to work on a &lt;a href="http://dev.gentoo.org/~swift/docs/security_benchmarks/gentoo.html"&gt;Gentoo Security
Benchmark&lt;/a&gt;
which not only documents security best practices (loosely based on the
&lt;a href="http://www.gentoo.org/doc/en/security/security-handbook.xml"&gt;Gentoo Security
Handbook&lt;/a&gt;
which hasn't seen much updates in the last few years) but also uses the
SCAP protocols. This set of protocols allows …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 12 Dec 2013 16:04:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-12-12:/2013/12/documenting-security-best-practices-xccdf-introduction/</guid><category>Security</category><category>postgresql</category><category>scap</category><category>xccdf</category></item><item><title>Putting OVAL at work</title><link>https://blog.siphos.be/2013/08/putting-oval-at-work/</link><description>&lt;p&gt;When we look at the &lt;a href="http://scap.nist.gov/"&gt;SCAP security standards&lt;/a&gt;,
you might get the feeling of "How does this work". The underlying
interfaces, like OVAL and XCCDF, might seem a bit daunting to implement.&lt;/p&gt;
&lt;p&gt;This is correct, but you need to remember that the standards are
protocols, agreements that can be made …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 01 Aug 2013 15:01:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-08-01:/2013/08/putting-oval-at-work/</guid><category>Security</category><category>baseline</category><category>benchmark</category><category>oval</category><category>security</category><category>xccdf</category></item></channel></rss>