<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Simplicity is a form of art... - libffi</title><link href="https://blog.siphos.be/" rel="alternate"></link><link href="https://blog.siphos.be/tag/libffi/feed/atom.xml" rel="self"></link><id>https://blog.siphos.be/</id><updated>2013-11-03T10:27:00+01:00</updated><entry><title>The mix of libffi with other changes</title><link href="https://blog.siphos.be/2013/11/the-mix-of-libffi-with-other-changes/" rel="alternate"></link><published>2013-11-03T10:27:00+01:00</published><updated>2013-11-03T10:27:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-11-03:/2013/11/the-mix-of-libffi-with-other-changes/</id><summary type="html">&lt;p&gt;I &lt;a href="http://blog.siphos.be/2013/04/securely-handling-libffi/"&gt;once again&lt;/a&gt;
came across libffi. Not only does the libffi approach fight with SELinux
alone, it also triggers the TPE (Trusted Path Execution) protections in
grSecurity. And when I tried to reinstall Portage, Portage seemed to
create some sort of runtime environment in a temporary directory as
well, and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I &lt;a href="http://blog.siphos.be/2013/04/securely-handling-libffi/"&gt;once again&lt;/a&gt;
came across libffi. Not only does the libffi approach fight with SELinux
alone, it also triggers the TPE (Trusted Path Execution) protections in
grSecurity. And when I tried to reinstall Portage, Portage seemed to
create some sort of runtime environment in a temporary directory as
well, and SELinux wasn't up to allowing that either.&lt;/p&gt;
&lt;p&gt;Let's first talk about a quick workaround for the libffi-with-TPE issue.
Because libffi wants to create executable files in a world-writable
directory and then execute that file (try finding the potential security
issue here) TPE is prohibiting the execution. The easiest workaround is
to add the &lt;code&gt;portage&lt;/code&gt; Linux user, as well as the Linux accounts that you
use to run emerge with (even just things like &lt;strong&gt;emerge --info&lt;/strong&gt;) in the
&lt;code&gt;wheel&lt;/code&gt; group. This group is exempt from TPE protections (unless you
configured a different group in your kernel for this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# zgrep CONFIG_GRKERNSEC_TPE_TRUSTED_GID /proc/config.gz
CONFIG_GRKERNSEC_TPE_TRUSTED_GID=10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next we also need to allow the &lt;code&gt;portage_t&lt;/code&gt; domain to execute files
labeled with &lt;code&gt;portage_tmpfs_t&lt;/code&gt;. You can do this by creating your own
SELinux policy module with the following content (or use selocal):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;can_exec(portage_t, portage_tmpfs_t)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This works around the libffi issue for now. A better solution still has
to be implemented (as discussed in the previous post).&lt;/p&gt;
&lt;p&gt;With regards to the portage installation failing, you'll notice this
quickly when you get an error like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# emerge -1 portage
Calculating dependencies  ... done!
Traceback (most recent call last):
  File &amp;quot;/usr/bin/emerge&amp;quot;, line 50, in &amp;lt;module&amp;gt;
    retval = emerge_main()
  File &amp;quot;/usr/lib64/portage/pym/_emerge/main.py&amp;quot;, line 1031, in emerge_main
    return run_action(emerge_config)
  File &amp;quot;/usr/lib64/portage/pym/_emerge/actions.py&amp;quot;, line 4062, in run_action
    emerge_config.args, spinner)
  File &amp;quot;/usr/lib64/portage/pym/_emerge/actions.py&amp;quot;, line 453, in action_build
    retval = mergetask.merge()
  File &amp;quot;/usr/lib64/portage/pym/_emerge/Scheduler.py&amp;quot;, line 946, in merge
    rval = self._handle_self_update()
  File &amp;quot;/usr/lib64/portage/pym/_emerge/Scheduler.py&amp;quot;, line 316, in _handle_self_update
    _prepare_self_update(self.settings)
  File &amp;quot;/usr/lib64/portage/pym/portage/package/ebuild/doebuild.py&amp;quot;, line 2326, in _prepare_self_update
    shutil.copytree(orig_bin_path, portage._bin_path, symlinks=True)
  File &amp;quot;/usr/lib64/portage/pym/portage/__init__.py&amp;quot;, line 259, in __call__
    rval = self._func(*wrapped_args, **wrapped_kwargs)
  File &amp;quot;/usr/lib64/python3.3/shutil.py&amp;quot;, line 343, in copytree
    raise Error(errors)
shutil.Error: [(b&amp;#39;/usr/lib64/portage/bin/ebuild-helpers/prepalldocs&amp;#39;, 
b&amp;#39;/var/tmp/portage/._portage_reinstall_.osj370/bin/ebuild-helpers/prepalldocs&amp;#39;, 
&amp;quot;[Errno 13] Permission denied: &amp;#39;/var/tmp/portage/._portage_reinstall_.osj370/bin/ebuild-helpers/prepalldocs&amp;#39;&amp;quot;), 
(b&amp;#39;/usr/lib64/portage/bin/ebuild-helpers/prepinfo&amp;#39;, 
b&amp;#39;/var/tmp/portage/._portage_reinstall_.osj370/bin/ebuild-helpers/prepinfo&amp;#39;, 
&amp;quot;[Errno 13] Permission denied: &amp;#39;/var/tmp/portage/._portage_reinstall_.osj370/bin/ebuild-helpers/prepinfo&amp;#39;&amp;quot;), 
(b&amp;#39;/usr/lib64/portage/bin/ebuild-helpers/newlib.so&amp;#39;, 
b&amp;#39;/var/tmp/portage/._portage_reinstall_.osj370/bin/ebuild-helpers/newlib.so&amp;#39;, 
&amp;quot;[Errno 13] Permission denied: &amp;#39;/var/tmp/portage/._portage_reinstall_.osj370/bin/ebuild-helpers/newlib.so&amp;#39;&amp;quot;), 
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the errors go on and on and on.&lt;/p&gt;
&lt;p&gt;I've been able to get it working again by allowing the following SELinux
permissions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;allow portage_t portage_tmp_t:dir relabel_dir_perms;
allow portage_t portage_tmp_t:lnk_file relabel_lnk_file_perms;
allow portage_t bin_t:dir relabel_dir_perms;
allow portage_t bin_t:file relabel_file_perms;
allow portage_t bin_t:lnk_file relabel_lnk_file_perms;
allow portage_t portage_exec_t:file relabel_file_perms;
allow portage_t portage_fetch_exec_t:file relabel_file_perms;
allow portage_t lib_t:dir relabel_dir_perms;
allow portage_t lib_t:file relabel_file_perms;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can somewhat shorten this by combining types (but this doesn't work
with selocal for now):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;allow portage_t { portage_tmp_t bin_t lib_t}:dir relabel_dir_perms;
allow portage_t { portage_tmp_t bin_t }:lnk_file relabel_lnk_file_perms;
allow portage_t { bin_t portage_exec_t portage_fetch_exec_t lib_t}:file relabel_file_perms;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At the end of the emerge process (when the new portage is installed) you
might want to reset the labels of all files provided by the portage
package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~# rlpkg portage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These changes have not been passed into the policy yet as I first need
to find out why exactly they are needed, and as you can see from &lt;a href="http://dev.gentoo.org/devaway/"&gt;the
gentoo devaway&lt;/a&gt; page, time is not on my
side to do this. I'll try to free up some time in the next few days to
handle this as well as the &lt;a href="http://userspace.selinuxproject.org/trac/wiki/Releases"&gt;SELinux userspace
release&lt;/a&gt; but no
promises here.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit:&lt;/em&gt; I found why - it is the &lt;code&gt;_prepare_self_update&lt;/code&gt; in the
&lt;code&gt;doebuild.py&lt;/code&gt; script. It creates temporary copies of the Portage
binaries and Portage python libraries, which is why we need to support
relabel operations on the files. Support for this is now in the policy
repository.&lt;/p&gt;
&lt;/p&gt;</content><category term="Security"></category><category term="Gentoo"></category><category term="hardened"></category><category term="libffi"></category><category term="portage"></category><category term="selinux"></category></entry><entry><title>Securely handling libffi</title><link href="https://blog.siphos.be/2013/04/securely-handling-libffi/" rel="alternate"></link><published>2013-04-28T03:50:00+02:00</published><updated>2013-04-28T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-04-28:/2013/04/securely-handling-libffi/</id><summary type="html">&lt;p&gt;I've recently came across &lt;a href="http://sourceware.org/libffi/"&gt;libffi&lt;/a&gt; again.
No, not because it was mentioned during the &lt;a href="http://www.gentoo.org/proj/en/hardened"&gt;Gentoo
Hardened&lt;/a&gt; online meeting, but
because my &lt;code&gt;/var/tmp&lt;/code&gt; wasn't mounted correctly, and &lt;strong&gt;emerge&lt;/strong&gt; (actually
python) uses libffi. Most users won't notice this, because libffi works
behind the scenes. But when it fails, it fails bad …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've recently came across &lt;a href="http://sourceware.org/libffi/"&gt;libffi&lt;/a&gt; again.
No, not because it was mentioned during the &lt;a href="http://www.gentoo.org/proj/en/hardened"&gt;Gentoo
Hardened&lt;/a&gt; online meeting, but
because my &lt;code&gt;/var/tmp&lt;/code&gt; wasn't mounted correctly, and &lt;strong&gt;emerge&lt;/strong&gt; (actually
python) uses libffi. Most users won't notice this, because libffi works
behind the scenes. But when it fails, it fails bad. And SELinux actually
helped me quickly identify what the problem is.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ emerge --info
segmentation fault
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The abbreviation "libffi" comes from &lt;em&gt;Foreign Function Interface&lt;/em&gt;, and
is a library that allows developers to dynamically call code from
another application or library. But the method how it approaches this
concerns me a bit. Let's look at some &lt;strong&gt;strace&lt;/strong&gt; output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;8560  open(&amp;quot;/var/tmp/ffiZ8gKPd&amp;quot;, O_RDWR|O_CREAT|O_EXCL, 0600) = 11
8560  unlink(&amp;quot;/var/tmp/ffiZ8gKPd&amp;quot;)      = 0
8560  ftruncate(11, 4096)               = 0
8560  mmap(NULL, 4096, PROT_READ|PROT_EXEC, MAP_SHARED, 11, 0) = -1 EACCES (Permission denied)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Generally, what libffi does, is to create a file somewhere where it can
write files (it checks the various mounts on a system to get a list of
possible target file systems), adds the necessary data (that it wants to
execute) to it, unlinks the file from the file system (but keep the file
descriptor open, so that the file cannot (easily) be modified on the
system anymore) and then maps it to memory for executable access. &lt;em&gt;If&lt;/em&gt;
executing is allowed by the system (for instance because the mount point
does not have &lt;code&gt;noexec&lt;/code&gt;), then SELinux will trap it because the domain
(in our case now, &lt;code&gt;portage_t&lt;/code&gt;) is trying to execute an (unlinked) file
for which it holds no execute rights on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;type=AVC msg=audit(1366656205.201:2221): avc:  denied  { execute } for  
pid=8560 comm=&amp;quot;emerge&amp;quot; path=2F7661722F66666962713154465A202864656C6574656429 
dev=&amp;quot;dm-3&amp;quot; ino=6912 scontext=staff_u:sysadm_r:portage_t tcontext=staff_u:object_r:var_t
tclass=file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you notice something like this (an execute on an unnamed file),
then this is because the file descriptor points to a file already
unlinked from the system. Finding out what it was about might be hard
(but with &lt;strong&gt;strace&lt;/strong&gt; it is easy as ... well, whatever is easy for you).&lt;/p&gt;
&lt;p&gt;Now what happened was that, because &lt;code&gt;/var/tmp&lt;/code&gt; wasn't mounted, files
created inside it got the standard type (&lt;code&gt;var_t&lt;/code&gt;) which the Portage
domain isn't allowed to execute. It is allowed to execute a lot of
types, but not that one ;-) When &lt;code&gt;/var/tmp&lt;/code&gt; is properly mounted, the
file gets the &lt;code&gt;portage_tmp_t&lt;/code&gt; type where it does hold execute rights
for.&lt;/p&gt;
&lt;p&gt;Now generally, I don't like having world-writeable locations without
&lt;code&gt;noexec&lt;/code&gt;. For &lt;code&gt;/tmp&lt;/code&gt;, &lt;code&gt;noexec&lt;/code&gt; is enabled, but for &lt;code&gt;/var/tmp&lt;/code&gt; I have
(well, had ;-) to allow execution from the file system, mainly because
some (many?) Gentoo package builds require it. So how about this dual
requirement, of allowing Portage to write (and execute) its own files,
and allow libffi to do its magic? Certainly, from a security point of
view, I might want to restrict this further...&lt;/p&gt;
&lt;p&gt;Well, we need to make sure that the location where Portage works with
(the location pointed to by &lt;code&gt;$PORTAGE_TMPDIR&lt;/code&gt;) is specifically made
available for Portage: have the directory only writable by the Portage
user. I keep it labeled as &lt;code&gt;tmp_t&lt;/code&gt; so that the existing policies apply,
but it might work with &lt;code&gt;portage_tmp_t&lt;/code&gt; immediately set as well. Perhaps
I'll try that one later. With that set, we can have this mount-point set
with exec rights (so that libffi can place its file there) in a somewhat
more secure manner than allowing exec on world-writeable locations.&lt;/p&gt;
&lt;p&gt;So now my &lt;code&gt;/tmp&lt;/code&gt; and &lt;code&gt;/var/tmp&lt;/code&gt; (and &lt;code&gt;/run&lt;/code&gt; and &lt;code&gt;/dev/shm&lt;/code&gt; and
&lt;code&gt;/lib64/rc/init.d&lt;/code&gt;) are tmpfs-mounts with the &lt;code&gt;noexec&lt;/code&gt; (as well as
&lt;code&gt;nodev&lt;/code&gt; and &lt;code&gt;nosuid&lt;/code&gt;) bits set, with the location pointed towards by
&lt;code&gt;$PORTAGE_TMPDIR&lt;/code&gt; being only really usable by the Portage user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ls -ldZ /var/portage
drwxr-x---. 4 portage root system_u:object_r:tmp_t 4096 Apr 22 21:45 /var/portage/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And libffi? Well, allowing applications to create their own executables
and executing it is something that should be carefully governed. I'm not
aware of any existing or past vulnerabilities, but I can imagine that
opening the &lt;code&gt;ffi*&lt;/code&gt; file(s) the moment they come up (to make sure you
have a file descriptor) allows you to overwrite the content after libffi
has created it but before the application actually executes it. By
limiting the locations where applications can write files to (important
step one) and the types they can execute (important step two) we can
already manage this a bit more. Using regular DAC, this is quite
difficult to achieve, but with SELinux, we can actually control this a
bit more.&lt;/p&gt;
&lt;p&gt;Let's first see how many domains are allowed to create, write and
execute files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sesearch -c file -p write,create,execute -A | grep write | grep create   
 | grep execute | awk &amp;#39;{print $1}&amp;#39; | sort | uniq | wc -l
32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Okay, 32 target domains. Not that bad, and certainly doable to verify
manually (hell, even in a scripted manner). You can now check which of
those domains have rights to execute generic binaries (&lt;code&gt;bin_t&lt;/code&gt;),
possibly needed for command execution vulnerabilities or privilege
escalation. Or that have specific capabilities. And if you want to know
which of those domains use libffi, you can use &lt;strong&gt;revdep-rebuild&lt;/strong&gt; to
find out which files are linked to the libffi libraries.&lt;/p&gt;
&lt;p&gt;It goes to show that trying to keep your box secure is a never-ending
story (please, companies, allow your system administrators to do their
job by giving them the ability to continuously increase security rather
than have them ask for budget to investigate potential security
mitigation directives based on the paradigm of business case and return
on investment using pareto-analytics blaaaahhhh....), and that SELinux
can certainly be an important method to help achieve it.&lt;/p&gt;</content><category term="Security"></category><category term="libffi"></category><category term="selinux"></category><category term="strace"></category></entry></feed>