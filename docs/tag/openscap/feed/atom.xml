<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Simplicity is a form of art... - openscap</title><link href="https://blog.siphos.be/" rel="alternate"></link><link href="https://blog.siphos.be/tag/openscap/feed/atom.xml" rel="self"></link><id>https://blog.siphos.be/</id><updated>2013-12-24T04:25:00+01:00</updated><entry><title>Doing a content check with OVAL</title><link href="https://blog.siphos.be/2013/12/doing-a-content-check-with-oval/" rel="alternate"></link><published>2013-12-24T04:25:00+01:00</published><updated>2013-12-24T04:25:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-12-24:/2013/12/doing-a-content-check-with-oval/</id><summary type="html">&lt;p&gt;Let's create an OVAL check to see if &lt;code&gt;/etc/inittab&lt;/code&gt;'s single user
definitions only refer to &lt;code&gt;/sbin/sulogin&lt;/code&gt; or &lt;code&gt;/sbin/rc single&lt;/code&gt;. First,
the skeleton:&lt;/p&gt;
&lt;p&gt;(XML content lost during blog conversion)&lt;/p&gt;
&lt;p&gt;The first thing we notice is that there are several namespaces defined
within OVAL. These namespaces refer to â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let's create an OVAL check to see if &lt;code&gt;/etc/inittab&lt;/code&gt;'s single user
definitions only refer to &lt;code&gt;/sbin/sulogin&lt;/code&gt; or &lt;code&gt;/sbin/rc single&lt;/code&gt;. First,
the skeleton:&lt;/p&gt;
&lt;p&gt;(XML content lost during blog conversion)&lt;/p&gt;
&lt;p&gt;The first thing we notice is that there are several namespaces defined
within OVAL. These namespaces refer to the platforms on which the tests
can be executed. OVAL has independent definitions, unix-global
definitions or linux-specific definitions. You can find the overview of
&lt;a href="http://oval.mitre.org/language/version5.10.1/"&gt;all supported schemas and definitions
online&lt;/a&gt; - definitely
something to bookmark if you plan on developing your own OVAL checks.&lt;/p&gt;
&lt;p&gt;So let's create the definition:&lt;/p&gt;
&lt;p&gt;(XML content lost during blog conversion)&lt;/p&gt;
&lt;p&gt;There is lots of information to be found in this simple snippet.&lt;/p&gt;
&lt;p&gt;First of all, notice the &lt;code&gt;class="compliance"&lt;/code&gt; part. OVAL definitions can
be given a class that informs the OVAL interpreter what kind of test it
is.&lt;/p&gt;
&lt;p&gt;Supported classes are:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;compliance&lt;/dt&gt;
&lt;dd&gt;Does the system adhere to a predefined wanted state&lt;/dd&gt;
&lt;dt&gt;inventory&lt;/dt&gt;
&lt;dd&gt;Is the given software or hardware available/installed on the system&lt;/dd&gt;
&lt;dt&gt;patch&lt;/dt&gt;
&lt;dd&gt;Is the selected patch installed on the system&lt;/dd&gt;
&lt;dt&gt;vulnerability&lt;/dt&gt;
&lt;dd&gt;Is the system vulnerable towards this particular exposure (CVE)&lt;/dd&gt;
&lt;dt&gt;miscellaneous&lt;/dt&gt;
&lt;dd&gt;Everything that doesn't fit the above&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Next, we see metadata that tells the OVAL interpreter that the
definition applies to Unix family systems, and more specifically a
Gentoo Linux system. However, this is not a CPE entry
(&lt;em&gt;cpe:/o:gentoo:linux&lt;/em&gt;). The idea is that the OVAL Interpreter should
interpret the information as it wants without focusing on CPE details -
I think (I might be mistaken though) because the SCAP standard does not
want to introduce loops - a CPE that refers to an OVAL to validate,
which in turn refers to the same CPE.&lt;/p&gt;
&lt;p&gt;Also, a reference is included in the OVAL. Remember that we also had
references in the XCCDF document? Well, the same is true for OVAL
statements - you can add in references that help administrators get more
information about a definition. In this case, it refers to a &lt;strong&gt;CCE
(Common Configuration Enumeration)&lt;/strong&gt; entry. You can find all official
CCE entries &lt;a href="https://nvd.nist.gov/cce/index.cfm"&gt;online as well&lt;/a&gt;. This
particular one, CCE-4241-6, sais:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;CCE-4241-6  Platform: rhel5     Date: (C)2011-10-07   (M)2013-11-28

The requirement for a password to boot into single-user mode should be configured correctly.

Parameter: enabled/disabled

Technical Mechanism: via /etc/inittab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By requiring &lt;strong&gt;sulogin&lt;/strong&gt; or &lt;strong&gt;rc single&lt;/strong&gt; in &lt;code&gt;inittab&lt;/code&gt;, Gentoo Linux
will ask for the root password before granting a shell, thereby
complying with the requirement to have a password before providing a
shell in single-user mode.&lt;/p&gt;
&lt;p&gt;Finally, the definition refers to a single test, which we will now look
into:&lt;/p&gt;
&lt;p&gt;(XML content lost during blog conversion)&lt;/p&gt;
&lt;p&gt;This particular test is part of the &lt;em&gt;independent&lt;/em&gt; definitions. Checking
the content of a file is something all platforms support. Within this
independent definition set, a &lt;a href="http://oval.mitre.org/language/version5.10.1/ovaldefinition/documentation/independent-definitions-schema.html"&gt;large set of
tests&lt;/a&gt;
are supported, including file hash checking (does the checksum of a file
still match), environment variable test (verifying the existence and
content of an environment variable), LDAP tests and also text file
content tests.&lt;/p&gt;
&lt;p&gt;In the test, there are two important attributes to closely look into:
&lt;code&gt;check&lt;/code&gt; and &lt;code&gt;check_existence&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;check_existence&lt;/code&gt; attribute tells the OVAL interpreter how to deal
with the object definition. In our case, the object will refer to the
lines in the &lt;code&gt;/etc/inittab&lt;/code&gt; file that match a certain pattern. With
&lt;code&gt;check_existence="at_least_one_exists"&lt;/code&gt; the OVAL interpreter knows it
has to have at least one line that matches the pattern before it can
continue. If no line matches, then the test fails.&lt;/p&gt;
&lt;p&gt;Other values for &lt;code&gt;check_existence&lt;/code&gt; are "all_exist" (every object
described must exist), any_exist (doesn't matter if zero, one or more
exists), none_exist (no object described must exist) and
"only_one_exists" (one, and only one match for the described objects
must exist).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;check&lt;/code&gt; attributes tells the OVAL interpreter how to match the
object (if there is one) with the state. In our example, &lt;code&gt;check="all"&lt;/code&gt;
tells the OVAL interpreter that all lines that match the object
definition must also match the state definition.&lt;/p&gt;
&lt;p&gt;Other values for &lt;code&gt;check&lt;/code&gt; are "at least one", "none satisfy" and "only
one". These should be self-explanatory. Notice that there are no
underscores involved here (unlike with the &lt;code&gt;check_existence&lt;/code&gt; attribute).&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://oval.mitre.org/language/version5.10.1/ovaldefinition/documentation/oval-common-schema.html"&gt;common
schema&lt;/a&gt;
for more general OVAL attribute information.&lt;/p&gt;
&lt;p&gt;The test refers to the following object:&lt;/p&gt;
&lt;p&gt;(XML content lost during blog conversion)&lt;/p&gt;
&lt;p&gt;The object represents lines in the &lt;code&gt;/etc/inittab&lt;/code&gt; file that match the
expression &lt;code&gt;^[\S]+:S:[\S]+:.*&lt;/code&gt;. The OVAL definition uses &lt;a href="http://oval.mitre.org/language/about/perlre.html"&gt;perl-style
regular expressions&lt;/a&gt;,
so this means that the lines must start with a non-whitespace string,
followed by a colon (:), followed by the letter "S", followed by a
colon, followed by non-whitespace string, followed by colon and then a
remainder string.&lt;/p&gt;
&lt;p&gt;Also, the object evaluates if at least one such line is found.&lt;/p&gt;
&lt;p&gt;The state, also referred to by the test, looks like so:&lt;/p&gt;
&lt;p&gt;(XML content lost during blog conversion)&lt;/p&gt;
&lt;p&gt;Here again we see a regular expression; this time, the expression sais
that the line must start with "su" and that the fourth field equals
&lt;code&gt;/sbin/rc single&lt;/code&gt; or &lt;code&gt;/sbin/sulogin&lt;/code&gt;. In our example, if there is at
least one "single user" line that does not match this expression, then
the OVAL statement will return a failure and the system is
non-compliant.&lt;/p&gt;
&lt;p&gt;Now you could be wondering if this is the best approach. We can create
an object that refers to all single-user lines in &lt;code&gt;/etc/inittab&lt;/code&gt; that do
not comply with the expression just in the object definition. The
expression would be more complex by itself, but wouldn't need a state
anymore. True, but the advantage here is that the object itself matches
all single user lines, and can be reused later in other tests. Also, if
we later evaluate the OVAL statements, we will get an overview of all
lines that match the object (and then evaluate these lines against the
state) - similar to the script output we got with SCE tests.&lt;/p&gt;
&lt;p&gt;We can create other OVALs for all other tests. To refer to these OVAL
tests in an XCCDF document, take a look at the following example:&lt;/p&gt;
&lt;p&gt;(XML content lost during blog conversion)&lt;/p&gt;
&lt;p&gt;Instead of referring to the SCE engine (with
&lt;code&gt;system="http://open-scap.org/page/SCE"&lt;/code&gt;) we refer to the OVAL with
&lt;code&gt;system="http://oval.mitre.org/XMLSchema/oval-definitions-5"&lt;/code&gt;, point the
XCCDF interpreter where the OVAL statements are stored in
&lt;code&gt;href="gentoo-oval.xml"&lt;/code&gt; and what definition we want to test
(&lt;code&gt;oval:org.gentoo.dev.swift:def:22&lt;/code&gt;). The XCCDF interpreter will then
pass this information on to the OVAL interpreter (in case of openscap,
this is the same tool, but it doesn't have to be) so it can evaluate the
right OVAL statement on the system.&lt;/p&gt;
&lt;p&gt;In the next post, I'll use the &lt;a href="http://dev.gentoo.org/~swift/docs/security_benchmarks/guide-gentoo-xccdf.html"&gt;Gentoo Security
Benchmark&lt;/a&gt;
as a guide to explain how to further structure and document things in
XCCDF/OVAL.&lt;/p&gt;
&lt;p&gt;This post is part of a series on SCAP content:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/documenting-security-best-practices-xccdf-introduction/"&gt;Documenting security best practices - XCCDF
    introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/an-xccdf-skeleton-for-postgresql/"&gt;An XCCDF skeleton for
    PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/xccdf-documenting-a-bit-more-than-just-descriptions/"&gt;Documenting a bit more than just
    descriptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/running-a-bit-with-the-xccdf-document/"&gt;Running a bit with the XCCDF
    document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/remediation-through-scap/"&gt;Remediation through
    SCAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/what-is-oval/"&gt;What is OVAL?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Security"></category><category term="openscap"></category><category term="oval"></category><category term="scap"></category><category term="xccdf"></category></entry><entry><title>What is OVAL?</title><link href="https://blog.siphos.be/2013/12/what-is-oval/" rel="alternate"></link><published>2013-12-22T04:40:00+01:00</published><updated>2013-12-22T04:40:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-12-22:/2013/12/what-is-oval/</id><summary type="html">&lt;p&gt;Time to discuss &lt;strong&gt;OVAL (Open Vulnerability Assessment Language)&lt;/strong&gt;. In
all the &lt;a href="http://blog.siphos.be/2013/12/running-a-bit-with-the-xccdf-document/"&gt;previous
posts&lt;/a&gt;
I focused the checking of rules (does the system comply with the given
rule) on scripts, through the Script Check Engine supported by openscap.
The advantage of SCE is that most people can quickly provide automated
checks â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Time to discuss &lt;strong&gt;OVAL (Open Vulnerability Assessment Language)&lt;/strong&gt;. In
all the &lt;a href="http://blog.siphos.be/2013/12/running-a-bit-with-the-xccdf-document/"&gt;previous
posts&lt;/a&gt;
I focused the checking of rules (does the system comply with the given
rule) on scripts, through the Script Check Engine supported by openscap.
The advantage of SCE is that most people can quickly provide automated
checks to run in script format. But SCE has a few downsides.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You cannot guarantee that the scripts will do no harm on the system.
    A badly written script might manipulate system settings, get a huge
    amount of resources, leave stale result files on the system, flood
    file systems and more. If you get scripts from other parties, you'll
    need to review them thoroughly before running them against all
    your systems. Especially when you run the compliance validation tool
    (openscap in our example) as root.&lt;/li&gt;
&lt;li&gt;SCE support is only available for openscap (and perhaps one or
    two others) as it is not an international standard. If you use any
    of the &lt;a href="https://nvd.nist.gov/scapproducts.cfm"&gt;SCAP validated tools&lt;/a&gt;
    then you will not be able to benefit from the SCE scripts. And that
    would make the XCCDF document back to a purely documenting
    best practice.&lt;/li&gt;
&lt;li&gt;Every rule requires separate scripts, even though many of the rules
    will be very similar and thus reuse a lot of the scripts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OVAL on the other hand provides those advantages. An OVAL file is an XML
file that contains the tests to run, in an (I must say) somewhat complex
manner. Really, OVAL is not simple, but it does contain advantages that
SCE doesn't.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is a standard, part of the SCAP standards. OVAL files are
    reusable across multiple tools, allowing you to focus once on the
    rules rather than having to rewrite the rules for every time you
    change the tool.&lt;/li&gt;
&lt;li&gt;OVAL can be platform-agnostic. Of course, not all tests are
    platform-agnostic (validating registry keys is a Windows-only check)
    but many are.&lt;/li&gt;
&lt;li&gt;All rules can be mentioned in a single file (or spread across
    multiple files if that makes management easier), but more
    importantly rules will also reuse definitions from other rules. If
    you have three rules that pertain to a file (say &lt;code&gt;/etc/rc.conf&lt;/code&gt;)
    then the definition of that file is shared across all rules.&lt;/li&gt;
&lt;li&gt;The OVAL standard is designed to be non-intrusive. All declarations
    you do in an OVAL file are pure read-only statements. This gives
    more confidence to have OVAL statements from third parties ran
    across your organization. Of course, reviewing them never hurts, but
    you already know that they will not modify any setting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Like SCE, OVAL checks are individual checks that are executed and
returned. They too return a success or failure (or error) and can
deliver more detailed information as part of their result (like the SCE
results output we looked at before) so allow administrators to
investigate further why a rule failed (without needing to log on to the
system and look for themselves).&lt;/p&gt;
&lt;p&gt;A basic structure of OVAL is a &lt;em&gt;definition&lt;/em&gt; that describes what the rule
is for. The definition refers to one or more &lt;em&gt;tests&lt;/em&gt; that are evaluated
on a system. These tests refer to an &lt;em&gt;object&lt;/em&gt; that needs to be checked,
and optionally a &lt;em&gt;state&lt;/em&gt; to which the object should (or shouldn't)
match.&lt;/p&gt;
&lt;p&gt;Consider the test we made with SCE to see if a platform is a Gentoo
Linux system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#!/bin/sh

# If /etc/gentoo-release exists then the system is a Gentoo Linux system.
test -f /etc/gentoo-release &amp;amp;&amp;amp; exit ${XCCDF_RESULT_PASS};
exit ${XCCDF_RESULT_FAIL};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In OVAL, this would be structured as follows (pseudo-OVAL):&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;definition&lt;/dt&gt;
&lt;dd&gt;The system is a Gentoo Linux system&lt;/dd&gt;
&lt;dt&gt;test&lt;/dt&gt;
&lt;dd&gt;The object that represents /etc/gentoo-release must exist&lt;/dd&gt;
&lt;dt&gt;object&lt;/dt&gt;
&lt;dd&gt;The /etc/gentoo-release file&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The resulting OVAL file is quite complex for a simple rule. I see the
OVAL complexity as part of a normalization (similar to database
normalization) process to allow higher reuse. If we later want to check
the content of the &lt;code&gt;gentoo-release&lt;/code&gt; file, we will reuse the definition
(object with id &lt;em&gt;oval:org.gentoo.dev.swift:obj:1&lt;/em&gt;) rather than making a
second object for it, and use that definition to create new tests.&lt;/p&gt;
&lt;p&gt;The structure of OVAL is the same everywhere. First define the
definitions, then the tests, then the objects and then, optionally, the
states. A very important aspect is to have the identifiers (&lt;code&gt;id="..."&lt;/code&gt;)
correct. The structure of OVAL identifiers is standardized as well:&lt;/p&gt;
&lt;p&gt;(XML content lost during blog conversion)&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;namespace&lt;/dt&gt;
&lt;dd&gt;Like the namespace used in XCCDF documents, this is the reverse
notation of a domainname. In the example above, this
is org.gentoo.dev.swift.&lt;/dd&gt;
&lt;dt&gt;type&lt;/dt&gt;
&lt;dd&gt;The type of the entry in OVAL. This can be def (definition), tst
(test), obj (object), ste (state) or var (variable).&lt;/dd&gt;
&lt;dt&gt;id&lt;/dt&gt;
&lt;dd&gt;The identifier of this particular entry. This identifier has to be a
positive integer.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;By standardizing the identifiers, you can create repositories within
your organization, and have other teams reuse your OVAL components when
needed. As the identifier remains the same (even when you update the
OVAL object itself to be more precise) those tests keep validating
correctly. For instance, say that Gentoo Linux would be changed in the
future not to provide a &lt;code&gt;gentoo-release&lt;/code&gt; file anymore, but
&lt;code&gt;gentoo-linux-release&lt;/code&gt; file instead (not that it is planning that, it is
just hypothetical), then you can update the test (with description
"Gentoo Linux is installed") to check if either of the two files exist:&lt;/p&gt;
&lt;p&gt;(XML content lost due to blog conversion)&lt;/p&gt;
&lt;p&gt;If we save all Gentoo releated OVAL statements in a file called
&lt;code&gt;gentoo-oval.xml&lt;/code&gt; then we can update the &lt;code&gt;gentoo-cpe.xml&lt;/code&gt; file (which we
discussed in the past) to the following:&lt;/p&gt;
&lt;p&gt;(XML content lost during blog conversion)&lt;/p&gt;
&lt;p&gt;With this change, openscap (or any other XCCDF interpreter) will use the
OVAL definition to see if a platform is Gentoo Linux or not, and does
not need to execute the &lt;code&gt;gentoo-platform.sh&lt;/code&gt; script anymore, which is
now fully deprecated and superceded by the OVAL statement.&lt;/p&gt;
&lt;p&gt;In the next posts, I'll write up one of the other tests we had (which
checks the content of a file - one of the most used tests I think) in
OVAL, and have the XCCDF document updated to only use OVAL statements.&lt;/p&gt;
&lt;p&gt;This post is part of a series on SCAP content:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/documenting-security-best-practices-xccdf-introduction/"&gt;Documenting security best practices - XCCDF
    introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/an-xccdf-skeleton-for-postgresql/"&gt;An XCCDF skeleton for
    PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/xccdf-documenting-a-bit-more-than-just-descriptions/"&gt;Documenting a bit more than just
    descriptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/running-a-bit-with-the-xccdf-document/"&gt;Running a bit with the XCCDF
    document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/remediation-through-scap/"&gt;Remediation through
    SCAP&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Security"></category><category term="openscap"></category><category term="oval"></category><category term="scap"></category><category term="sce"></category><category term="xccdf"></category></entry><entry><title>Remediation through SCAP</title><link href="https://blog.siphos.be/2013/12/remediation-through-scap/" rel="alternate"></link><published>2013-12-20T04:47:00+01:00</published><updated>2013-12-20T04:47:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-12-20:/2013/12/remediation-through-scap/</id><summary type="html">&lt;p&gt;I promised in my &lt;a href="http://blog.siphos.be/2013/12/running-a-bit-with-the-xccdf-document/"&gt;previous
post&lt;/a&gt;
to give some information about remediation.&lt;/p&gt;
&lt;p&gt;Remediation is the process where you fix a system to become compliant
again after finding out there is a violation on the system. The easiest
form of remediation of course is to just notify the administrator and
give â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I promised in my &lt;a href="http://blog.siphos.be/2013/12/running-a-bit-with-the-xccdf-document/"&gt;previous
post&lt;/a&gt;
to give some information about remediation.&lt;/p&gt;
&lt;p&gt;Remediation is the process where you fix a system to become compliant
again after finding out there is a violation on the system. The easiest
form of remediation of course is to just notify the administrator and
give him the instructions to fix the problem - and in the majority of
cases, this is exactly what you will do, considering that automatically
fixing things might create more breakage if you are not careful.&lt;/p&gt;
&lt;p&gt;But suppose that you know, for a few rules, what the remediation really
should be, and you want to automate it. Well, in that case, you can
document the remediation (the commands or scripts) in the XCCDF
document. As you might have noticed in the previous example, this is
handled through a &lt;code&gt;&amp;lt;fix&amp;gt;&lt;/code&gt; entity.&lt;/p&gt;
&lt;p&gt;In the fix, we mention how the fix should be executed
(&lt;em&gt;urn:xccdf:fix:system:commands&lt;/em&gt; is to tell the XCCDF interpreter that
the remediation are commands executed on the command line (or verbatim
within a script). The platform attribute allows us to differentiate
based on the platform (or even version of the platform). The other
attributes, such as &lt;em&gt;complexity&lt;/em&gt;, &lt;em&gt;disruption&lt;/em&gt; and &lt;em&gt;reboot&lt;/em&gt; is metadata
that helps in deciding which auto-remediation you want to execute.&lt;/p&gt;
&lt;p&gt;With openscap, the remediation can be triggered online during the
evaluation, by adding &lt;code&gt;--remediate&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ oscap xccdf eval --remediate --profile ${PROFILE} --cpe gentoo-cpe.xml --results results-test-xccdf.xml test-xccdf.xml
Title   There should be no /dev/ROOT in /etc/fstab
Rule    xccdf_org.gentoo.dev.swift_rule_installation-fstab-root
Result  pass

Title   There should be no /dev/BOOT in /etc/fstab
Rule    xccdf_org.gentoo.dev.swift_rule_installation-fstab-boot
Result  pass

Title   rc_sys should be defined in /etc/rc.conf
Rule    xccdf_org.gentoo.dev.swift_rule_installation-rc_sys
Result  fail

 --- Starting remediation ---
Title   rc_sys should be defined in /etc/rc.conf
Rule    xccdf_org.gentoo.dev.swift_rule_installation-rc_sys
Result  fixed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And indeed, the file has been changed and now complies with the rules
again.&lt;/p&gt;
&lt;p&gt;We can also generate the remediation scripts offline:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ oscap xccdf eval --profile ${PROFILE} --results results-test-xccdf.xml --cpe gentoo-cpe.xml test-xccdf.xml
~$ oscap xccdf generate fix --output remediate.sh results-test-xccdf.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The resulting &lt;code&gt;remediate.sh&lt;/code&gt; script then contains the steps to remediate
the failures reported in the &lt;code&gt;results-test-xccdf.xml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;In general however, auto-remediation is not that recommended. The amount
of effort you put in creating remediation scripts that are safe to
execute is huge. If you do this for a single system, it is much easier
to just remediate manually. If you need to do it for a large set of
systems, it makes more sense to use a configuration management solution
like &lt;a href="http://www.ansibleworks.com/"&gt;ansible&lt;/a&gt; or
&lt;a href="http://puppetlabs.com/"&gt;puppet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, now that we have experience with documenting our best practices and
running validation, I'll talk about OVAL in the next post.&lt;/p&gt;
&lt;p&gt;This post is part of a series on SCAP content:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/documenting-security-best-practices-xccdf-introduction/"&gt;Documenting security best practices - XCCDF
    introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/an-xccdf-skeleton-for-postgresql/"&gt;An XCCDF skeleton for
    PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/xccdf-documenting-a-bit-more-than-just-descriptions/"&gt;Documenting a bit more than just
    descriptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/running-a-bit-with-the-xccdf-document/"&gt;Running a bit with the XCCDF
    document&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Security"></category><category term="openscap"></category><category term="remediation"></category><category term="scap"></category><category term="xccdf"></category></entry><entry><title>Running a bit with the XCCDF document</title><link href="https://blog.siphos.be/2013/12/running-a-bit-with-the-xccdf-document/" rel="alternate"></link><published>2013-12-18T04:23:00+01:00</published><updated>2013-12-18T04:23:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-12-18:/2013/12/running-a-bit-with-the-xccdf-document/</id><summary type="html">&lt;p&gt;In my &lt;a href="http://blog.siphos.be/2013/12/xccdf-documenting-a-bit-more-than-just-descriptions/"&gt;previous
post&lt;/a&gt;
I introduced automated checking of rules through &lt;em&gt;SCE (Script Check
Engine)&lt;/em&gt;. Let's focus a bit more now on running with an XCCDF document:
how to automatically check the system, read the results and find more
information of those results.&lt;/p&gt;
&lt;p&gt;To provide a usable example, you can â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my &lt;a href="http://blog.siphos.be/2013/12/xccdf-documenting-a-bit-more-than-just-descriptions/"&gt;previous
post&lt;/a&gt;
I introduced automated checking of rules through &lt;em&gt;SCE (Script Check
Engine)&lt;/em&gt;. Let's focus a bit more now on running with an XCCDF document:
how to automatically check the system, read the results and find more
information of those results.&lt;/p&gt;
&lt;p&gt;To provide a usable example, you can download the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dev.gentoo.org/~swift/blog/201312/18/test-xccdf.txt"&gt;test-xccdf.xml&lt;/a&gt;,
    a sample XCCDF document that documents and tests a few settings
    (save it with the &lt;code&gt;.xml&lt;/code&gt; extension, I publish it as txt to make
    downloading and viewing easier).&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dev.gentoo.org/~swift/blog/201312/18/gentoo-cpe.txt"&gt;gentoo-cpe.xml&lt;/a&gt;
    which defines when a system is a Gentoo system (I'll cover this in
    a minute).&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dev.gentoo.org/~swift/blog/201312/18/gentoo-platform.sh"&gt;gentoo-platform.sh&lt;/a&gt;
    which is the script that tests if a system is a Gentoo system.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dev.gentoo.org/~swift/blog/201312/18/gentoo-fstab-noroot.sh"&gt;gentoo-fstab-noroot.sh&lt;/a&gt;
    which tests that &lt;code&gt;/dev/ROOT&lt;/code&gt; is not set in &lt;code&gt;/etc/fstab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dev.gentoo.org/~swift/blog/201312/18/gentoo-fstab-noboot.sh"&gt;gentoo-fstab-noboot.sh&lt;/a&gt;
    which tests that &lt;code&gt;/dev/BOOT&lt;/code&gt; is not set in &lt;code&gt;/etc/fstab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dev.gentoo.org/~swift/blog/201312/18/gentoo-rc.conf-rc_sys.sh"&gt;gentoo-rc.conf-rc_sys.sh&lt;/a&gt;
    which tests that the &lt;code&gt;rc_sys&lt;/code&gt; variable is declared in
    &lt;code&gt;/etc/rc.conf&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Extract it to a directory of your choice, and let's get started.&lt;/p&gt;
&lt;p&gt;With &lt;a href="http://www.open-scap.org"&gt;openscap&lt;/a&gt; (available as
&lt;em&gt;app-forensics/openscap&lt;/em&gt; in Gentoo), we can generate a guide of the
XCCDF document as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ oscap xccdf generate guide test-xccdf.xml &amp;gt; guide-test-xccdf.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The
&lt;a href="http://dev.gentoo.org/~swift/blog/201312/18/guide-test-xccdf.html"&gt;result&lt;/a&gt;
is an HTML guide that reflects the content of the XCCDF document. By
default, it contains all text and rules, but shows no information about
the profiles (if any). We can add in the &lt;code&gt;--profile ...&lt;/code&gt; tag to include
an overview of the checks that are selected if that profile is selected.
That would give a result similar to &lt;a href="http://dev.gentoo.org/~swift/blog/201312/18/guide-test-xccdf-withprofile.html"&gt;this
one&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;--format docbook&lt;/code&gt; arguments, the output can also be DocBook
instead of HTML. The advantage of DocBook is that it can generate a
multitude of other formats, including
&lt;a href="http://dev.gentoo.org/~swift/blog/201312/18/guide-test-xccdf-withprofile.pdf"&gt;PDF&lt;/a&gt;,
although I had to do some manual cleanups in the output to have it
render a PDF here using FOP (there are other methods to create PDFs too)
such as removing the &lt;code&gt;&amp;lt;preface&amp;gt;&lt;/code&gt; part.&lt;/p&gt;
&lt;p&gt;Let's try evaluating the XCCDF document on the system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ oscap xccdf eval test-xccdf.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nothing happened. That is because there are no rules that are by default
selected (all rules in the document have &lt;code&gt;selected="false"&lt;/code&gt;) and we have
not passed on a profile. I don't know if there is a way to automatically
make a particular profile default, so let's try it with the
&lt;em&gt;xccdf_org.gentoo.dev.swift_profile_default&lt;/em&gt; (which I always use as
the default profile name for all my XCCDF documents):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ export PROFILE=&amp;quot;xccdf_org.gentoo.dev.swift_profile_default&amp;quot;
~$ oscap xccdf eval --profile ${PROFILE} test-xccdf.xml

Title   There should be no /dev/ROOT in /etc/fstab
Rule    xccdf_org.gentoo.dev.swift_rule_installation-fstab-root
Result  notapplicable

Title   There should be no /dev/BOOT in /etc/fstab
Rule    xccdf_org.gentoo.dev.swift_rule_installation-fstab-boot
Result  notapplicable

Title   rc_sys should be defined in /etc/rc.conf
Rule    xccdf_org.gentoo.dev.swift_rule_installation-rc_sys
Result  notapplicable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At least we have output now, but still no results. In fact, all rules
have &lt;em&gt;notapplicable&lt;/em&gt; as a result. What gives?&lt;/p&gt;
&lt;p&gt;The reason is that the XCCDF interpreter (&lt;strong&gt;oscap&lt;/strong&gt;) does not know about
the Gentoo Linux platform, whereas the XCCDF document explicitly
mentions that it is applicable to a Gentoo Linux system.&lt;/p&gt;
&lt;p&gt;What we need to do is to provide the XCCDF interpreter with a test that
helps it evaluate if a system is a Gentoo Linux system or not. In other
words, a test that the XCCDF interpreter will run if the
&lt;em&gt;cpe:/o:gentoo:linux&lt;/em&gt; platform is mentioned. We do this with a &lt;em&gt;CPE
dictionary&lt;/em&gt; element which is saved as
&lt;a href="http://dev.gentoo.org/~swift/blog/201312/18/gentoo-cpe.txt"&gt;gentoo-cpe.xml&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the dictionary, the coupling between cpe:/o:gentoo:linux and a scripted
check called gentoo-platform.sh is made. Let's now give this info to oscap:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ oscap xccdf eval --profile ${PROFILE} --cpe gentoo-cpe.xml test-xccdf.xml
Title   There should be no /dev/ROOT in /etc/fstab
Rule    xccdf_org.gentoo.dev.swift_rule_installation-fstab-root
Result  pass

Title   There should be no /dev/BOOT in /etc/fstab
Rule    xccdf_org.gentoo.dev.swift_rule_installation-fstab-boot
Result  pass

Title   rc_sys should be defined in /etc/rc.conf
Rule    xccdf_org.gentoo.dev.swift_rule_installation-rc_sys
Result  pass

OpenSCAP Error: Document is empty [./gentoo-platform.sh:1] [elements.c:207]
No definition with ID: (null) in definition model. [oval_probe.c:338]
No definition with ID: (null) in result model. [oval_agent.c:184]
No definition with ID: (null) in definition model. [oval_probe.c:338]
No definition with ID: (null) in result model. [oval_agent.c:184]
No definition with ID: (null) in definition model. [oval_probe.c:338]
No definition with ID: (null) in result model. [oval_agent.c:184]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Great; we now see that openscap ran the tests and gave feedback. It also
gave a few errors. These can be ignored now - it is openscap that tries
to interpret the shell scripts as OVAL scripts (I'll talk about OVAL in
a later post). After changing my system to be non-compliant, I see that
openscap detects that as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Title   rc_sys should be defined in /etc/rc.conf
Rule    xccdf_org.gentoo.dev.swift_rule_installation-rc_sys
Result  fail
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, by itself the rule might give us enough clues as to what is wrong,
but sometimes you might want to get the output of the scripts as well.
You can enable this through the &lt;code&gt;--check-engine-results&lt;/code&gt; option. This
will leave the generated output of the scripts available as XML files.&lt;/p&gt;
&lt;p&gt;In it, we see the output (through &lt;code&gt;&amp;lt;sceres:stdout&amp;gt;&lt;/code&gt;) of the &lt;strong&gt;grep&lt;/strong&gt;
command we did in the script.&lt;/p&gt;
&lt;p&gt;Finally, by adding in a &lt;code&gt;--report report-test-xccdf.html&lt;/code&gt; to the
argument list, the results of the XCCDF evaluation is also saved as
&lt;a href="http://dev.gentoo.org/~swift/blog/201312/18/report-test-xccdf.html"&gt;HTML&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The oscap command has many more options, which I will not discuss in
more detail now, but are important to know (for instance, you can save
the XCCDF results in XML format for future processing).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~$ oscap xccdf eval -h
 oscap -&amp;gt; xccdf -&amp;gt; eval

Perform evaluation driven by XCCDF file and use OVAL as checking engine

Usage: oscap [options] xccdf eval [options] INPUT_FILE [oval-definitions-files]

INPUT_FILE - XCCDF file or a source data stream file

Options:
   --profile               - The name of Profile to be evaluated.
   --tailoring-file        - Use given XCCDF Tailoring file.
   --tailoring-id  - Use given DS component as XCCDF Tailoring file.
   --cpe                   - Use given CPE dictionary or language (autodetected)
                                   for applicability checks.
   --oval-results                - Save OVAL results as well.
   --sce-results                 - Save SCE results as well. (DEPRECATED! use --check-engine-results)
   --check-engine-results        - Save results from check engines loaded from plugins as well.
   --export-variables            - Export OVAL external variables provided by XCCDF.
   --results               - Write XCCDF Results into file.
   --results-arf           - Write ARF (result data stream) into file.
   --report                - Write HTML report into file.
   --skip-valid                  - Skip validation.
   --fetch-remote-resources      - Download remote content referenced by XCCDF.
   --progress                    - Switch to sparse output suitable for progress reporting.
                                   Format is &amp;quot;$rule_id:$result\n&amp;quot;.
   --datastream-id           - ID of the datastream in the collection to use.
                                   (only applicable for source datastreams)
   --xccdf-id                - ID of component-ref with XCCDF in the datastream that should be evaluated.
                                   (only applicable for source datastreams)
   --benchmark-id            - ID of XCCDF Benchmark in some component in the datastream that should be evaluated.
                                   (only applicable for source datastreams)
                                   (only applicable when datastream-id AND xccdf-id are not specified)
   --remediate                   - Automatically execute XCCDF fix elements for failed rules.
                                   Use of this option is always at your own risk.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In my next post, I'll talk a bit more about remediation.&lt;/p&gt;
&lt;p&gt;This post is part of a series on SCAP content:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/documenting-security-best-practices-xccdf-introduction/"&gt;Documenting security best practices - XCCDF
    introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/an-xccdf-skeleton-for-postgresql/"&gt;An XCCDF skeleton for
    PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/xccdf-documenting-a-bit-more-than-just-descriptions/"&gt;Documenting a bit more than just
    descriptions&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Security"></category><category term="openscap"></category><category term="scap"></category><category term="sce"></category><category term="xccdf"></category></entry><entry><title>XCCDF - Documenting a bit more than just descriptions</title><link href="https://blog.siphos.be/2013/12/xccdf-documenting-a-bit-more-than-just-descriptions/" rel="alternate"></link><published>2013-12-16T04:58:00+01:00</published><updated>2013-12-16T04:58:00+01:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-12-16:/2013/12/xccdf-documenting-a-bit-more-than-just-descriptions/</id><summary type="html">&lt;p&gt;In my &lt;a href="http://blog.siphos.be/2013/12/an-xccdf-skeleton-for-postgresql/"&gt;previous
post&lt;/a&gt; I
made a skeleton XCCDF document. By now, we can create a well documented
"baseline" (best practice) for our subject (say PostgreSQL). But for now
I only talked about &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt; whereas XCCDF allows many other tags
as well.&lt;/p&gt;
&lt;p&gt;You can add &lt;em&gt;metadata&lt;/em&gt; information for a particular â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my &lt;a href="http://blog.siphos.be/2013/12/an-xccdf-skeleton-for-postgresql/"&gt;previous
post&lt;/a&gt; I
made a skeleton XCCDF document. By now, we can create a well documented
"baseline" (best practice) for our subject (say PostgreSQL). But for now
I only talked about &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt; whereas XCCDF allows many other tags
as well.&lt;/p&gt;
&lt;p&gt;You can add &lt;em&gt;metadata&lt;/em&gt; information for a particular &lt;code&gt;Group&lt;/code&gt;. It is
recommended to use the &lt;a href="http://dublincore.org/"&gt;dublin core&lt;/a&gt; notation:&lt;/p&gt;
&lt;p&gt;(XML content lost during blog conversion)`&lt;/p&gt;
&lt;p&gt;If you use metadata information however, it should &lt;strong&gt;not&lt;/strong&gt; be used
&lt;em&gt;instead&lt;/em&gt; of XCCDF elements.&lt;/p&gt;
&lt;p&gt;Another set of elements that can be used are &lt;code&gt;warning&lt;/code&gt; elements:&lt;/p&gt;
&lt;p&gt;(XML content lost during blog conversion)&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;rationale&amp;gt;&lt;/code&gt; element can be used to explain in more detail why a
rule is important.&lt;/p&gt;
&lt;p&gt;(XML content lost during blog conversion)&lt;/p&gt;
&lt;p&gt;Some elements we saw before also apply on the specific &lt;code&gt;&amp;lt;Group&amp;gt;&lt;/code&gt;
elements, such as &lt;code&gt;&amp;lt;status&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt;. The combination of these
elements should allow for a pretty good explanation of the secure setup
we want to achieve.&lt;/p&gt;
&lt;p&gt;But documentation is one thing - how about checking something
automatically? Enter the XCCDF &lt;code&gt;Rule&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;Rules are particular tests, checks if you wish, that you want to have
executed. To start off, let's look at a &lt;code&gt;Rule&lt;/code&gt; element that, as
automated approach, calls a script. To accomplish this, we use the &lt;strong&gt;SCE
(Script Check Engine)&lt;/strong&gt; method. This is &lt;em&gt;not&lt;/em&gt; part of the SCAP standard
by itself (SCAP uses OVAL for automated checks - I'll discuss OVAL
later) but XCCDF allows for other check systems to be used. And SCE is
supported by &lt;a href="http://www.open-scap.org"&gt;openscap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(XML content lost during blog conversion)&lt;/p&gt;
&lt;p&gt;First of all, we have the &lt;code&gt;Rule&lt;/code&gt; element itself, with the specially
crafted &lt;code&gt;id&lt;/code&gt; attribute as seen before. There are three attributes used
in the example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;selected="false"&lt;/code&gt; tells the XCCDF interpreter that the Rule should
    not be automatically selected. In other words, only if a &lt;code&gt;Profile&lt;/code&gt;
    refers to the rule will be rule be triggered (and the
    check executed).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;severity="low"&lt;/code&gt; is a matter of documenting how severe a
    non-compliant rule is.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight="0.0"&lt;/code&gt; gives a weight on the &lt;code&gt;Rule&lt;/code&gt;. In this case, the
    weight is 0, meaning that the rule might be recommended but by
    itself does not introduce a security vulnerability or mismatch. Of
    course, you are free to use whatever value suits you best.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We also notice a &lt;code&gt;fixtext&lt;/code&gt; element. When the rule failed (the system is
not compliant to the rule) then the fixtext should assist administrators
in securing the system again. In other words, &lt;code&gt;fixtext&lt;/code&gt; are the
human-readable instructions on remediating the system.&lt;/p&gt;
&lt;p&gt;Finally, we have the &lt;code&gt;check&lt;/code&gt; element. This element tells the XCCDF
interpreter that an automated validation is defined. The type of
automated validation is provided by the &lt;code&gt;system&lt;/code&gt; attribute, which in
this case refers to the SCE system. The &lt;code&gt;check-content-ref&lt;/code&gt; element
refers to the script to be executed.&lt;/p&gt;
&lt;p&gt;Let's look at the contents of the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#!/bin/sh

# Get CHOST value
echo &amp;quot;Getting CHOST variable content through portageq.&amp;quot;;
my_chost=$(portageq envvar CHOST);
if [ -z &amp;quot;${my_chost}&amp;quot; ];
then
  echo &amp;quot;-- The portageq command failed. Falling back to glibc build info.&amp;quot;;
  my_chost=$(cat /var/db/pkg/sys-libs/glibc-*/CHOST | tail -1);
fi
echo &amp;quot;-- Got CHOST=${my_chost}&amp;quot;;

# Get current GCC version
echo &amp;quot;Getting current GCC version through /etc/env.d/gcc/config-*&amp;quot;;
current_gcc=$(grep CURRENT /etc/env.d/gcc/config-* | sed -e &amp;quot;s:CURRENT=${my_chost}-::g&amp;quot; | sed -e &amp;quot;s:\([0-9\.-r]*\){$,-.*$}:\1:g&amp;quot; );
echo &amp;quot;-- Got version=${current_gcc}&amp;quot;;

# Get type
echo &amp;quot;Getting compiler type (profile/spec) through its CURRENT= value.&amp;quot;;
current_type=$(grep CURRENT /etc/env.d/gcc/config-* | sed -e &amp;quot;s:CURRENT=${my_chost}-${current_gcc}::g&amp;quot; | sed -e &amp;#39;s:^-::g&amp;#39;);
echo &amp;quot;-- Got type=${current_type}&amp;quot;;

echo &amp;quot;Checking USE flags of gcc-${current_gcc} for hardened USE flag.&amp;quot;;
grep -q hardened /var/db/pkg/sys-devel/gcc-${current_gcc}/USE;
current_hardened_use=$?;
if [ ${current_hardened_use} -ne 0 ];
then
  echo &amp;quot;!! GCC ${current_gcc} is not build with USE=hardened!&amp;quot;;
  echo &amp;quot;!! Please enable a hardened profile.&amp;quot;;
  exit ${XCCDF_RESULT_FAIL};
else
  echo &amp;quot;-- GCC ${current_gcc} is build with USE=hardened.&amp;quot;;
  if [ -z &amp;quot;${current_type}&amp;quot; ];
  then
    echo &amp;quot;-- The default type is used which is a hardened type.&amp;quot;;
    exit ${XCCDF_RESULT_PASS};
  else
    echo &amp;quot;!! A non-default type is used: ${current_type}&amp;quot;;
    echo &amp;quot;!! This means not all hardened toolchain measures are enabled.&amp;quot;;
    exit ${XCCDF_RESULT_FAIL};
  fi
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the script can give output when needed, but the most
important part is that it has to return a particular return value. This
return value is provided through environment variables
(&lt;code&gt;XCCDF_RESULT_*&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;All we need to do now is to include this &lt;code&gt;Rule&lt;/code&gt; in the &lt;code&gt;Profile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(XML content lost during blog conversion)&lt;/p&gt;
&lt;p&gt;We can now evaluate the XCCDF file on the system if we refer to the
right profile. By selecting the profile, the XCCDF interpreter will also
automatically check the rules referred to by the profile (and the rules
that do not have &lt;code&gt;selected="false"&lt;/code&gt; set too).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# oscap xccdf eval --profile ... gentoo-xccdf.xml

Title   Test if the hardened toolchain is used
Rule    xccdf_org.gentoo.dev.swift_rule_installation-toolchain-hardened
Result  pass

Title   Test if sulogin is used for single-user boot (/etc/inittab)
Rule    xccdf_org.gentoo.dev.swift_rule_inittab-sulogin
Result  fail
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, if you want to check this on several systems, you would need to
distribute not only the XCCDF file, but also all files referred to by
the XCCDF document. As this is counterproductive, SCAP supports &lt;em&gt;Data
Streams&lt;/em&gt;. A data stream is a single file that includes the content of
all files. With openscap, data streams can be made as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# oscap ds sds-compose postgresql-xccdf.xml postgresql-ds.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So now we have a document explaining the secure setup of a component,
and included automated checks to validate system compliance with the
document using scripts. In the next post, I'll go on with OVAL.&lt;/p&gt;
&lt;p&gt;This post is part of a series on SCAP content:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/documenting-security-best-practices-xccdf-introduction/"&gt;Documenting security best practices - XCCDF
    introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.siphos.be/2013/12/an-xccdf-skeleton-for-postgresql/"&gt;An XCCDF skeleton for
    PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Security"></category><category term="openscap"></category><category term="scap"></category><category term="sce"></category><category term="xccdf"></category></entry></feed>