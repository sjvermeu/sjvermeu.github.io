<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Simplicity is a form of art... - qemu</title><link href="https://blog.siphos.be/" rel="alternate"></link><link href="https://blog.siphos.be/tag/qemu/feed/atom.xml" rel="self"></link><id>https://blog.siphos.be/</id><updated>2016-09-26T19:26:00+02:00</updated><entry><title>Mounting QEMU images</title><link href="https://blog.siphos.be/2016/09/mounting-qemu-images/" rel="alternate"></link><published>2016-09-26T19:26:00+02:00</published><updated>2016-09-26T19:26:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2016-09-26:/2016/09/mounting-qemu-images/</id><summary type="html">&lt;p&gt;While working on the second edition of my first book, &lt;a href="https://www.packtpub.com/networking-and-servers/selinux-system-administration-second-edition"&gt;SELinux System Administration - Second Edition&lt;/a&gt;
I had to test out a few commands on different Linux distributions to make sure
that I don't create instructions that only work on Gentoo Linux. After all, as
awesome as Gentoo might be, the Linux world is a bit bigger. So I downloaded a
few live systems to run in Qemu/KVM.&lt;/p&gt;
&lt;p&gt;Some of these systems however use &lt;a href="https://cloudinit.readthedocs.io/en/latest/"&gt;cloud-init&lt;/a&gt;
which, while interesting to use, is not set up on my system yet. And without 
support for cloud-init, how can I get access to the system?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;While working on the second edition of my first book, &lt;a href="https://www.packtpub.com/networking-and-servers/selinux-system-administration-second-edition"&gt;SELinux System Administration - Second Edition&lt;/a&gt;
I had to test out a few commands on different Linux distributions to make sure
that I don't create instructions that only work on Gentoo Linux. After all, as
awesome as Gentoo might be, the Linux world is a bit bigger. So I downloaded a
few live systems to run in Qemu/KVM.&lt;/p&gt;
&lt;p&gt;Some of these systems however use &lt;a href="https://cloudinit.readthedocs.io/en/latest/"&gt;cloud-init&lt;/a&gt;
which, while interesting to use, is not set up on my system yet. And without 
support for cloud-init, how can I get access to the system?&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Mounting qemu images on the system&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To resolve this, I want to mount the image on my system, and edit the &lt;code&gt;/etc/shadow&lt;/code&gt;
file so that the root account is accessible. Once that is accomplished, I can
log on through the console and start setting up the system further.&lt;/p&gt;
&lt;p&gt;Images that are in the qcow2 format can be mounted through the nbd driver, but that
would require some updates on my local SELinux policy that I am too lazy to do right
now (I'll get to them eventually, but first need to finish the book). Still, if you
are interested in using nbd, see &lt;a href="https://www.kumari.net/index.php/system-adminstration/49-mounting-a-qemu-image"&gt;these instructions&lt;/a&gt;
or a &lt;a href="https://forums.gentoo.org/viewtopic-t-822672.html"&gt;related thread&lt;/a&gt; on the Gentoo
Forums.&lt;/p&gt;
&lt;p&gt;Luckily, storage is cheap (even SSD disks), so I quickly converted the qcow2 images
into raw images:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~$ qemu-img convert root.qcow2 root.raw
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the image now available in raw format, I can use the loop devices to mount
the image(s) on my system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~# losetup /dev/loop0 root.raw
~# kpartx -a /dev/loop0
~# mount /dev/mapper/loop0p1 /mnt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;kpartx&lt;/code&gt; command will detect the partitions and ensure that those are
available: the first partition becomes available at &lt;code&gt;/dev/loop0p1&lt;/code&gt;, the
second &lt;code&gt;/dev/loop0p2&lt;/code&gt; and so forth.&lt;/p&gt;
&lt;p&gt;With the image now mounted, let's update the &lt;code&gt;/etc/shadow&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Placing a new password hash in the shadow file&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A google search quickly revealed that the following command generates
a shadow-compatible hash for a password:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~$ openssl passwd -1 MyMightyPassword
$1$BHbMVz9i$qYHmULtXIY3dqZkyfW/oO.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The challenge wasn't to find the hash though, but to edit it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~# vim /mnt/etc/shadow
vim: Permission denied
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The image that I downloaded used SELinux (of course), which meant that the &lt;code&gt;shadow&lt;/code&gt;
file was labeled with &lt;code&gt;shadow_t&lt;/code&gt; which I am not allowed to access. And I didn't
want to put SELinux in permissive mode just for this (sometimes I /do/ have some
time left, apparently).&lt;/p&gt;
&lt;p&gt;So I remounted the image, but now with the &lt;code&gt;context=&lt;/code&gt; mount option, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~# mount -o context=&amp;quot;system_u:object_r:var_t:s0: /dev/loop0p1 /mnt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now all files are labeled with &lt;code&gt;var_t&lt;/code&gt; which I do have permissions to edit. But
I also need to take care that the files that I edited get the proper label again.
There are a number of ways to accomplish this. I chose to create a &lt;code&gt;.autorelabel&lt;/code&gt;
file in the root of the partition. Red Hat based distributions will pick this up
and force a file system relabeling operation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unmounting the file system&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After making the changes, I can now unmount the file system again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~# umount /mnt
~# kpart -d /dev/loop0
~# losetup -d /dev/loop0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With that done, I had root access to the image and could start testing out
my own set of commands.&lt;/p&gt;
&lt;p&gt;It did trigger my interest in the cloud-init setup though...&lt;/p&gt;</content><category term="qemu"></category></entry><entry><title>Qemu-KVM monitor tips and tricks</title><link href="https://blog.siphos.be/2013/04/qemu-kvm-monitor-tips-and-tricks/" rel="alternate"></link><published>2013-04-30T03:50:00+02:00</published><updated>2013-04-30T03:50:00+02:00</updated><author><name>Sven Vermeulen</name></author><id>tag:blog.siphos.be,2013-04-30:/2013/04/qemu-kvm-monitor-tips-and-tricks/</id><summary type="html">&lt;p&gt;When running KVM guests, the &lt;a href="https://en.wikibooks.org/wiki/QEMU/Monitor"&gt;Qemu/KVM
monitor&lt;/a&gt; is a nice interface
to interact with the VM and do specific maintenance tasks on. If you run
the KVM guests with VNC, then you can get to this monitor through
&lt;code&gt;Ctrl-Alt-2&lt;/code&gt; (and &lt;code&gt;Ctrl-Alt-1&lt;/code&gt; to get back to the VM display). I â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;When running KVM guests, the &lt;a href="https://en.wikibooks.org/wiki/QEMU/Monitor"&gt;Qemu/KVM
monitor&lt;/a&gt; is a nice interface
to interact with the VM and do specific maintenance tasks on. If you run
the KVM guests with VNC, then you can get to this monitor through
&lt;code&gt;Ctrl-Alt-2&lt;/code&gt; (and &lt;code&gt;Ctrl-Alt-1&lt;/code&gt; to get back to the VM display). I
personally run with the monitor on the standard input/output where the
VM is launched as its output is often large and scrolling in the VNC
doesn't seem to work well.&lt;/p&gt;
&lt;p&gt;I decided to give you a few tricks that I use often on the monitor to
handle the VMs.&lt;/p&gt;
&lt;p&gt;When I do not start the VNC server associated with the VM by default, I
can enable it on the monitor using &lt;strong&gt;change vnc&lt;/strong&gt; while getting details
is done using &lt;strong&gt;info vnc&lt;/strong&gt;. To disable VNC again, use &lt;strong&gt;change vnc
none&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(qemu) info vnc
Server: disabled
(qemu) change vnc 127.0.0.1:20
(qemu) change vnc password
Password: ******
(qemu) info vnc
Server:
     address: 127.0.0.1:5920
        auth: vnc
Client: none
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similarly, if you need to enable remote debugging, you can use the
&lt;strong&gt;gdbserver&lt;/strong&gt; option.&lt;/p&gt;
&lt;p&gt;Getting information using &lt;strong&gt;info&lt;/strong&gt; is dead-easy, and supports a wide
area of categories: balloon info, block devices, character devices,
cpus, memory mappings, network information, etcetera etcetera... Just
enter &lt;strong&gt;info&lt;/strong&gt; to get an overview of all supported commands.&lt;/p&gt;
&lt;p&gt;To easily manage block devices, you can see the current state of devices
using &lt;strong&gt;info block&lt;/strong&gt; and then use &lt;strong&gt;change &amp;lt;blockdevice&amp;gt;
&amp;lt;path&amp;gt;&lt;/strong&gt; to update it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(qemu) info block
virtio0: removable=0 io-status=ok file=/srv/virt/gentoo/hardened2selinux/selinux-base.img ro=0 drv=qcow2 encrypted=0 bps=0 bps_rd=0 bps_wr=0 iops=0 iops_rd=0 iops_wr=0
ide1-cd0: removable=1 locked=0 tray-open=0 io-status=ok [not inserted]
floppy0: removable=1 locked=0 tray-open=0 [not inserted]
sd0: removable=1 locked=0 tray-open=0 [not inserted]
(qemu) change ide1-cd0 /srv/virt/media/systemrescuecd-x86-2.2.0.iso
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To powerdown the system, use &lt;strong&gt;system_powerdown&lt;/strong&gt;. If that fails, you
can use &lt;strong&gt;quit&lt;/strong&gt; to immediately shut down (terminate) the VM. To reset
it, use &lt;strong&gt;system_reset&lt;/strong&gt;. You can also hot-add PCI devices and
manipulate CPU states, or even perform &lt;a href="http://www.linux-kvm.org/page/Migration"&gt;live
migrations&lt;/a&gt; between systems.&lt;/p&gt;
&lt;p&gt;When you use qcow2 image formats, you can take a full VM snapshot using
&lt;strong&gt;savevm&lt;/strong&gt; and, when you later want to return to this point again, use
&lt;strong&gt;loadvm&lt;/strong&gt;. This is interesting when you want to do potentially harmful
changes on the system and want to easily revert back if things got
broken.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(qemu) savevm 20130419
(qemu) info snapshots
     ID        TAG                 VM SIZE                DATE       VM CLOCK
     1         20130419               224M 2013-04-19 12:05:16   00:00:17.294
(qemu) loadvm 20130419
&lt;/pre&gt;&lt;/div&gt;</content><category term="kvm"></category><category term="monitor"></category><category term="qemu"></category></entry></feed>