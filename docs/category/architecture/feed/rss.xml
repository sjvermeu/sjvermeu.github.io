<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Simplicity is a form of art... - Architecture</title><link>https://blog.siphos.be/</link><description></description><lastBuildDate>Wed, 15 Sep 2021 19:00:00 +0200</lastBuildDate><item><title>Naming conventions</title><link>https://blog.siphos.be/2021/09/naming-conventions/</link><description>&lt;p&gt;Naming conventions. Picking the right naming convention is easy if you are all
by yourself, but hard when you need to agree upon the conventions in a larger
group. Everybody has an opinion on naming conventions, and once you decide
on it, you do expect everybody to follow through on it.&lt;/p&gt;
&lt;p&gt;Let's consider why naming conventions are (not) important and consider a few
examples to help in creating a good naming convention yourself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Naming conventions imply standardization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you settle on a naming convention, you're effectively putting some
standardization in place which you expect everybody to follow, and which should
also cover 100% of the cases. So, when assessing a possible naming convention,
first identify what standards you need to enforce and are future proof.&lt;/p&gt;
&lt;p&gt;Say you are addressing database object naming conventions. Are you able to
enforce this at all times? You might want to start tables with &lt;code&gt;tbl_&lt;/code&gt; and views
with &lt;code&gt;vw_&lt;/code&gt;, but when you are dealing with ISV software, they generally do not
allow such freedom on 'their' database definitions. Your DBAs thus will learn
to deal with setups that are more flexible anyway.&lt;/p&gt;
&lt;p&gt;Using a naming convention for internal development is of course still a
possible path to pursue. But in that case, you will need to look at the
requirements from the development teams (and related stakeholders).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Standardization does not imply naming conventions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The inverse isn't true: even though you might have certain standards in place,
it doesn't mean that the object names need to reflect the standards. If your
company standardizes on two operating systems (like Red Hat Enterprise Linux
and Microsoft Windows), it doesn't mean that server names have to include an
identifier that maps to Linux or Windows.&lt;/p&gt;
&lt;p&gt;I personally often fall into this trap - I see standards, so I want to see them
fixed in the naming convention because that allows better control over
following the standards. But naming conventions aren't about control, they are
about exposing identifiable information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Structure it for readability&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Trying to add too much information in a naming convention makes it
more complex for users to deal with. You might be able to read and understand
the naming convention immediately upon seeing it, but are all the other
stakeholders equally invested in understanding the naming conventions? &lt;/p&gt;
&lt;p&gt;Say that you have a hostname that looks like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sppchypkc05m01.reg1.internal.company.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I can tell you that this name comes from the following convention, it
might be overdoing things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;s&lt;/strong&gt; to identify it is a server&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;p&lt;/strong&gt; to identify it is a physical server&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;p&lt;/strong&gt; to identify it is hosted in a production environment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;c&lt;/strong&gt; to identify it is a cattle-alike managed server&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hypk&lt;/strong&gt; to identify the ownership (in this case, hypervisor usage, KVM)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;c05&lt;/strong&gt; to identify it is the fifth cluster&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;m01&lt;/strong&gt; to identify it is the first master node&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reg1&lt;/strong&gt; to identify the first region (location)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even if you still want to include this information, using separators might make
this more obvious. For instance, for the given name, I would suggest splitting
this as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sppc-hypk-c05m01.reg1.internal.company.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first two parts are then global naming convention requirements, with the
first set being about the type of system whereas the second is about ownership,
and the third is then a naming convention specific to that owner.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Choose what information to expose easily&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assets that follow a certain naming convention provide information about that
asset that a reader can immediately assume, without having to do additional
lookups. The intention here is that you want to define important information
that many stakeholders will need immediately to support their work (and thus
their efficiency). Insights that are useful for a select set of stakeholders
might not be suitable for a naming convention (or at least not a global one).&lt;/p&gt;
&lt;p&gt;You should consider every stakeholder that comes in contact with the name of
the asset, and how that stakeholder would obtain the information they need. If
you have a central, easily accessible configuration management system, it might
be possible to have many structured insights exposed through that interface,
but is that useful when you are dealing with lists of assets?&lt;/p&gt;
&lt;p&gt;Suppose you do not include the host class for hostnames, with the host class
being what class of system the host is (server, workstation, router, firewall,
appliance, ...). Does your SOC team need this insight every time they are going
through events? Does your helpdesk need that information? What about the
resource managers?&lt;/p&gt;
&lt;p&gt;If all these stakeholders do need that information over and over again, it
might be sensible to include it in the naming convention. If, however, only a
few stakeholders need that information, you might want to expose that easily
through different means. For instance, resource managers might be able to easily
join that information with the asset management system information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Choose what information NOT to expose easily&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sometimes, you want to have some information about objects easily available,
but not for everybody. It might be information that can be abused for nefarious
purposes. In that case, you want this information to be shielded and only
offered to authenticated and authorized users. For instance, if you use separate
accounts for administering systems, you might not want to add information about
what type of admin account it is, as account enumeration might reveal too much
immediately and provide attackers with better insights.&lt;/p&gt;
&lt;p&gt;So, rather than having &lt;code&gt;ken_adadmin&lt;/code&gt; for Ken's Active Directory administration
account, stick to a nonsensible account identification like &lt;code&gt;ua1503&lt;/code&gt; (user
account 1503). Stakeholders that need information about accounts, in this case,
can still notice it is a user account rather than a system or machine account
and will need to query the central repositories for more information (such as
AD to get information about the user - and don't forget to add sensitive users
to, for instance, the &lt;code&gt;Protected Users&lt;/code&gt; group in AD).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use layered naming conventions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With "global naming convention" I am suggesting the ability to add naming
conventions for specific purposes, but leave that open in general. A server
name could, for instance, require an indication of the environment (production or
not) and the fact that it is a server (and not a workstation), but leave a part
of the name open for the administrators. The administrators can then add their
local naming convention to it.&lt;/p&gt;
&lt;p&gt;An active directory group, for instance, might have a standard global naming
convention (usually the start of the group name) and leave the second part
open, whereas specific teams can then use that part to add in their local naming
convention. Groups that are used for NAS access might then use a naming
convention to identify which NAS share and which privileges are assigned,
whereas a group that is used for remote access support can use VPN naming
conventions.&lt;/p&gt;
&lt;p&gt;The University of Wisconsin has their &lt;a href="https://kb.wisc.edu/iam/page.php?id=30600"&gt;Campus Active Directory - Naming
Convention&lt;/a&gt; published online, and
the workstation and server object part is a good example of this: while the
objects in AD have to follow a global naming convention (because Active
Directory is often core to an organization) it leaves some room for local
department policies to assign their own requirements:
&lt;code&gt;&amp;lt;department&amp;gt;&amp;lt;objectfunction&amp;gt;-&amp;lt;suffix&amp;gt;&lt;/code&gt; only has the first two fields
standardized globally, with the &lt;code&gt;&amp;lt;suffix&amp;gt;&lt;/code&gt; field left open (but within certain
length constraints).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Consider the full name for your naming conventions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you do want to add information in a naming convention, do not consider
this purely on a single object type, but at the full name. A hostname by itself
is just a hostname, but when you consider the fully qualified hostname (thus
including domain names) you know that certain information points can be put in
the domain name rather than the hostname. The people over at &lt;a href="https://www.serverdensity.com/"&gt;Server
Density&lt;/a&gt; have a post titled "&lt;a href="https://blog.serverdensity.com/server-naming-conventions-and-best-practices/"&gt;Server Naming
Conventions and Best
Practices&lt;/a&gt;"
where they describe that the data center location (for the server) is a
subdomain.&lt;/p&gt;
&lt;p&gt;Another example is for databases, where you not only have a table, but also the
database in which the table is located. Hence, ownership of that table can
easily be considered on the database level.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learn from mistakes or missing conventions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As you approach naming conventions, you will make mistakes. But before making
mistakes yourself, try looking out for public failures that might have been due
to (bad or missing) naming conventions. Now, most public root cause analysis
reports do not go in-depth on the matter completely, but they do provide some
insights we might want to learn from.&lt;/p&gt;
&lt;p&gt;For instance, the incident that AWS had on February 28th, 2017, has a &lt;a href="https://aws.amazon.com/message/41926/"&gt;Summary of
the Amazon S3 Service Disruption in the Northern Virginia (US-EAST-1)
Region&lt;/a&gt;. While there is no immediate
indication about the naming conventions used (mainly that a wrong command input
impacted more servers than it should), we could ask ourselves if the functional
purpose of the servers was included in the name (or, if not in the name, if it
was added in other labeling information that the playbook should use). The
analysis does reveal that AWS moved on to implement partitions (which they call
cells), and the cell name will likely become part of the naming convention (or
other identifiers).&lt;/p&gt;
&lt;p&gt;Also internally, it is important to go over the major incidents and their
root causes, and see if the naming conventions of the company are appropriate
or not.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Still need examples?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While most commercial companies will not expose their own naming conventions
(as there is no value for them to receive, and it exposes information that
malicious users might abuse), many governmental agencies and educational
institutions do have this information publicly available, given their
organization public nature. Hence, searching for "naming convention" on &lt;code&gt;*.gov&lt;/code&gt;
and &lt;code&gt;*.edu&lt;/code&gt; already reveals many examples.&lt;/p&gt;
&lt;p&gt;Personally, I am still a stickler for naming conventions, but I am slowly
accepting that some information might be better exposed elsewhere.&lt;/p&gt;
&lt;p&gt;Feedback? Comments? Don't hesitate to &lt;a href="mailto:sven.vermeulen@siphos.be"&gt;drop me an
email&lt;/a&gt;, or join the &lt;a href="TODO"&gt;discussion on
Twitter&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 15 Sep 2021 19:00:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2021-09-15:/2021/09/naming-conventions/</guid><category>Architecture</category><category>naming</category></item><item><title>Location view of infrastructure</title><link>https://blog.siphos.be/2021/09/location-view-of-infrastructure/</link><description>&lt;p&gt;In this last post on the infrastructure domain, I cover the fifth and final
viewpoint that is important for an infrastructure domain representation, and
that is the &lt;em&gt;location view&lt;/em&gt;. As mentioned in previous posts, the viewpoints I
think are most representative of the infrastructure domain are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.siphos.be/2021/09/process-view-of-infrastructure/"&gt;process view&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.siphos.be/2021/06/an-it-services-overview/"&gt;service view&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.siphos.be/2021/08/component-view-of-infrastructure/"&gt;component view&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.siphos.be/2017/06/structuring-infrastructural-deployments/"&gt;zoning view&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;location view&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Like with the component view, the location view is a layered approach. While I
initially wanted to call it the network view, "location" might be a broader
term that matches the content better. Still, it's not a perfect name, but the
name is less important than the content, not?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 07 Sep 2021 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2021-09-07:/2021/09/location-view-of-infrastructure/</guid><category>Architecture</category><category>architecture</category><category>location</category><category>network</category><category>virtualization</category><category>protocol</category></item><item><title>Process view of infrastructure</title><link>https://blog.siphos.be/2021/09/process-view-of-infrastructure/</link><description>&lt;p&gt;In my &lt;a href="https://blog.siphos.be/2021/08/component-view-of-infrastructure/"&gt;previous post&lt;/a&gt;,
I started with the five different views that would support a good view of
what infrastructure would be. I believe these views (component, location,
process, service, and zoning) cover the breadth of the domain. The post also
described the component view a bit more and linked to previous posts I made (one
for &lt;a href="https://blog.siphos.be/2021/06/an-it-services-overview/"&gt;services&lt;/a&gt;, another for
&lt;a href="https://blog.siphos.be/2017/06/structuring-infrastructural-deployments/"&gt;zoning&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The one I want to tackle here is the most elaborate one, also the most
enterprise-ish, and one that always is a balance on how much time and
effort to put into it (as an architect), as well as hoping that the processes
are sufficiently standardized in a flexible manner so that you don't need
to cover everything again and again in each project.&lt;/p&gt;
&lt;p&gt;So, let's talk about processes...&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 01 Sep 2021 11:20:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2021-09-01:/2021/09/process-view-of-infrastructure/</guid><category>Architecture</category><category>architecture</category><category>process</category></item><item><title>Component view of infrastructure</title><link>https://blog.siphos.be/2021/08/component-view-of-infrastructure/</link><description>&lt;p&gt;IT architects try to use views and viewpoints to convey the target architecture
to the various stakeholders. Each stakeholder has their own interests in the
architecture and wants to see their requirements fulfilled. A core
role of the architect is to understand these requirements and make sure the
requirements are met, and to balance all the different requirements.&lt;/p&gt;
&lt;p&gt;Architecture languages or meta-models often put significant focus on these
views. Archimate has a large annex on &lt;a href="https://pubs.opengroup.org/architecture/archimate3-doc/apdxc.html#_Toc10045495"&gt;Example
Viewpoints&lt;/a&gt;
just for this purpose. However, unless the organization is widely accustomed to
enterprise architecture views, it is unlikely that the views themselves are the
final product: being able to translate those views into pretty slides and
presentations is still an important task for architects when they need to
present their findings to non-architecture roles.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 27 Aug 2021 21:10:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2021-08-27:/2021/08/component-view-of-infrastructure/</guid><category>Architecture</category><category>architecture</category><category>component</category><category>viewpoint</category></item><item><title>Disaster recovery in the public cloud</title><link>https://blog.siphos.be/2021/07/disaster-recovery-in-the-public-cloud/</link><description>&lt;p&gt;The public cloud is a different beast than an on-premise environment, and that
also reflects itself on how we (should) look at the processes that are
actively steering infrastructure designs and architecture. One of these
is the business continuity, severe incident handling, and the
hopefully-never-to-occur disaster recovery. When building up procedures
for handling disasters (&lt;a href="https://en.wikipedia.org/wiki/Disaster_recovery"&gt;DRP = Disaster Recovery Procedure or Disaster 
Recover Planning&lt;/a&gt;),
it is important to keep in mind what these are about.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 30 Jul 2021 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2021-07-30:/2021/07/disaster-recovery-in-the-public-cloud/</guid><category>Architecture</category><category>architecture</category><category>cloud</category><category>DRP</category></item><item><title>What is the infrastructure domain?</title><link>https://blog.siphos.be/2021/07/what-is-the-infrastructure-domain/</link><description>&lt;p&gt;In my job as domain architect for "infrastructure", I often come across
stakeholders that have no common understanding of what infrastructure means in
an enterprise architecture. Since then, I am trying to figure out a way to
easily explain it - to find a common, generic view on what infrastructure
entails. If successful, I could use this common view to provide context on the
many, many IT projects that are going around.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 19 Jul 2021 15:20:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2021-07-19:/2021/07/what-is-the-infrastructure-domain/</guid><category>Architecture</category><category>architecture</category><category>pattern</category></item><item><title>Organizing service documentation</title><link>https://blog.siphos.be/2021/07/organizing-service-documentation/</link><description>&lt;p&gt;As I mentioned in &lt;a href="https://blog.siphos.be/2021/06/an-it-services-overview/"&gt;An IT services overview&lt;/a&gt;
I try to keep track of the architecture and designs of the IT services and
solutions in a way that I feel helps me keep in touch with all the various
services and solutions out there. Similar to how system administrators try to
find a balance while working on documentation (which is often considered a
chore) and using a structure that is sufficiently simple and standard for the
organization to benefit from, architects should try to keep track of
architecturally relevant information as well.&lt;/p&gt;
&lt;p&gt;So in this post, I'm going to explain a bit more on how I approach documenting
service and solution insights for architectural relevance.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 08 Jul 2021 09:20:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2021-07-08:/2021/07/organizing-service-documentation/</guid><category>Architecture</category><category>architecture</category><category>documentation</category><category>structure</category><category>wiki</category></item><item><title>Not sure if TOSCA will grow further</title><link>https://blog.siphos.be/2021/06/not-sure-if-TOSCA-will-grow-further/</link><description>&lt;p&gt;TOSCA is an OASIS open standard, and is an abbreviation for &lt;em&gt;Topology and
Orchestration Specification for Cloud Applications&lt;/em&gt;. It provides a
domain-specific language to describe how an application should be deployed
in the cloud (the topology), which and how many resources it needs, as well
as tasks to run when certain events occur (the orchestration). When I
initially came across this standard, I was (and still am) interested
in how far this goes. The promise of declaring an application (and even
bundling the necessary application artefacts) within a single asset and
then using this asset to deploy on whatever cloud is very appealing to
an architect. Especially in organizations that have a multi-cloud
strategy.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 30 Jun 2021 14:30:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2021-06-30:/2021/06/not-sure-if-TOSCA-will-grow-further/</guid><category>Architecture</category><category>architecture</category><category>cloud</category><category>TOSCA</category><category>OASIS</category><category>topology</category><category>orchestration</category><category>infrastructure</category><category>IaC</category><category>NFV</category></item><item><title>Integrating or customizing SaaS within your own cloud environment</title><link>https://blog.siphos.be/2021/06/integrating-or-customizing-SaaS-within-your-own-cloud-environment/</link><description>&lt;p&gt;Software as a Service (SaaS) solutions are often a quick way to get new
capabilities into an organization’s portfolio. Smaller SaaS solutions are
simple, web-based solutions which barely integrate with the organization’s
other solutions, besides the identity and access management (which is often
handled by federated authentication).&lt;/p&gt;
&lt;p&gt;More complex or intermediate solutions require more integration focus, and
a whole new market of Integration Platform as a Service (iPaaS) solutions
came up to facilitate cross-cloud integrations. But even without the iPaaS
offerings, integrations are often a mandatory part to leverage the benefits
of the newly activated SaaS solution.&lt;/p&gt;
&lt;p&gt;In this post I want to bring some thoughts on the integrations that might be
needed to support customizing a SaaS solution.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 23 Jun 2021 15:10:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2021-06-23:/2021/06/integrating-or-customizing-SaaS-within-your-own-cloud-environment/</guid><category>Architecture</category><category>architecture</category><category>cloud</category><category>SaaS</category><category>integration</category><category>customization</category></item><item><title>An IT services overview</title><link>https://blog.siphos.be/2021/06/an-it-services-overview/</link><description>&lt;p&gt;My current role within the company I work for is “domain architect”, part
of the enterprise architects teams. The domain I am accountable for is 
“infrastructure”, which can be seen as a very broad one. Now, I’ve been
maintaining an overview of our IT services before I reached that role, 
mainly from an elaborate interest in the subject, as well as to optimize
my efficiency further.&lt;/p&gt;
&lt;p&gt;Becoming a domain architect allows me to use the insights I’ve since
gathered to try and give appropriate advice, but also now requires me to
maintain a domain architecture. This structure is going to be the starting
point of it, although it is not the true all and end all of what I would
consider a domain architecture.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 14 Jun 2021 17:30:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2021-06-14:/2021/06/an-it-services-overview/</guid><category>Architecture</category><category>architecture</category><category>overview</category><category>service</category><category>landscape</category><category>catalog</category><category>capability</category></item><item><title>Virtualization vs abstraction</title><link>https://blog.siphos.be/2021/06/virtualization-vs-abstraction/</link><description>&lt;p&gt;When an organization has an extensively large, and heterogeneous
infrastructure, infrastructure architects will attempt to make itless
complex and chaotic by introducing and maintaining a certain degree of
standardization. While many might consider standardization as a
rationalization (standardizing on a single database technology, single
vendor for hardware, etc.), rationalization is only one of the many ways
in which standards can simplify such a degree of complexity.&lt;/p&gt;
&lt;p&gt;In this post, I'd like to point out two other, very common ways to
standardize the IT environment, without really considering a
rationalization: abstraction and virtualization.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 03 Jun 2021 10:10:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2021-06-03:/2021/06/virtualization-vs-abstraction/</guid><category>Architecture</category><category>architecture</category><category>virtualization</category><category>abstraction</category></item><item><title>Abstracting infrastructure complexity</title><link>https://blog.siphos.be/2020/12/abstracting-infrastructure-complexity/</link><description>&lt;p&gt;IT is complex. Some even consider it to be more magic than reality. And with
the ongoing evolutions and inventions, the complexity is not really going
away. Sure, some IT areas are becoming easier to understand, but that is often
offset with new areas being explored.&lt;/p&gt;
&lt;p&gt;Companies and organizations that have a sizeable IT footprint generally see an
increase in their infrastructure, regardless of how many rationalization
initiatives that are started. Personally, I find it challenging, in a fun
way, to keep up with the onslaught of new technologies and services that are
onboarded in the infrastructure landscape that I'm responsible for.&lt;/p&gt;
&lt;p&gt;But just understanding a technology isn't enough to deal with its position in
the larger environment.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 25 Dec 2020 23:00:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2020-12-25:/2020/12/abstracting-infrastructure-complexity/</guid><category>Architecture</category><category>infrastructure</category><category>archimate</category></item><item><title>Working on infra strategy</title><link>https://blog.siphos.be/2020/10/working-on-infra-strategy/</link><description>&lt;p&gt;After a long hiatus, I'm ready to take up blogging again on my public blog.
With my day job becoming more intensive and my side-job taking the remainder
of the time, I've since quit my work on the Gentoo project. I am in process
of releasing a new edition of the SELinux System Administration book, so I'll
probably discuss that more later.&lt;/p&gt;
&lt;p&gt;Today, I want to write about a task I had to do this year as brand new domain
architect for infrastructure.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 04 Oct 2020 13:20:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2020-10-04:/2020/10/working-on-infra-strategy/</guid><category>Architecture</category></item><item><title>Project prioritization</title><link>https://blog.siphos.be/2017/07/project-prioritization/</link><description>&lt;p&gt;&lt;sub&gt;This is a long read, skip to “Prioritizing the projects and changes” for the
approach details...&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;Organizations and companies generally have an IT workload (dare I say,
backlog?) which needs to be properly assessed, prioritized and taken up.
Sometimes, the IT team(s) get an amount of budget and HR resources to "do their
thing", while others need to continuously ask for approval to launch a new
project or instantiate a change.&lt;/p&gt;
&lt;p&gt;Sizeable organizations even require engineering and development effort on IT
projects which are not readily available: specialized teams exist, but they are
governance-wise assigned to projects. And as everyone thinks their project is
the top-most priority one, many will be disappointed when they hear there are
no resources available for their pet project.&lt;/p&gt;
&lt;p&gt;So... how should organizations prioritize such projects?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 18 Jul 2017 20:40:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2017-07-18:/2017/07/project-prioritization/</guid><category>Architecture</category><category>pmo</category><category>strategy</category><category>SAFe</category><category>prioritization</category><category>project</category></item><item><title>Structuring infrastructural deployments</title><link>https://blog.siphos.be/2017/06/structuring-infrastructural-deployments/</link><description>&lt;p&gt;Many organizations struggle with the all-time increase in IP address
allocation and the accompanying need for segmentation. In the past, governing
the segments within the organization means keeping close control over the
service deployments, firewall rules, etc.&lt;/p&gt;
&lt;p&gt;Lately, the idea of micro-segmentation, supported through software-defined
networking solutions, seems to defy the need for a segmentation governance.
However, I think that that is a very short-sighted sales proposition. Even
with micro-segmentation, or even pure point-to-point / peer2peer communication
flow control, you'll still be needing a high level overview of the services
within your scope.&lt;/p&gt;
&lt;p&gt;In this blog post, I'll give some insights in how we are approaching this in
the company I work for. In short, it starts with requirements gathering,
creating labels to assign to deployments, creating groups based on one or two
labels in a layered approach, and finally fixating the resulting schema and
start mapping guidance documents (policies) toward the presented architecture.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 07 Jun 2017 20:40:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2017-06-07:/2017/06/structuring-infrastructural-deployments/</guid><category>Architecture</category><category>segmentation</category><category>zoning</category><category>deployments</category><category>landscape</category></item><item><title>Switching focus at work</title><link>https://blog.siphos.be/2015/09/switching-focus-at-work/</link><description>&lt;p&gt;Since 2010, I was at work responsible for the infrastructure architecture of 
a couple of technological domains, namely databases and scheduling/workload 
automation. It brought me in contact with many vendors, many technologies
and most importantly, many teams within the organization. The focus domain
was challenging, as I had to deal with the strategy on how the organization,
which is a financial institution, will deal with databases and scheduling in
the long term.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 20 Sep 2015 13:29:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-09-20:/2015/09/switching-focus-at-work/</guid><category>Architecture</category><category>work</category><category>hadoop</category><category>docker</category></item><item><title>Making the case for multi-instance support</title><link>https://blog.siphos.be/2015/08/making-the-case-for-multi-instance-support/</link><description>&lt;p&gt;With the high attention that technologies such as &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;,
&lt;a href="https://coreos.com/blog/rocket/"&gt;Rocket&lt;/a&gt; and the like get (I recommend to look at 
&lt;a href="https://github.com/p8952/bocker"&gt;Bocker&lt;/a&gt; by Peter Wilmott as well ;-), I
still find it important that technologies are well capable of supporting a
multi-instance environment.&lt;/p&gt;
&lt;p&gt;Being able to run multiple instances makes for great consolidation. The system
can be optimized for the technology, access to the system limited to the admins
of said technology while still providing isolation between instances. For some
technologies, running on commodity hardware just doesn't cut it (not all 
software is written for such hardware platforms) and consolidation allows for
reducing (hardware/licensing) costs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 22 Aug 2015 12:45:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-08-22:/2015/08/making-the-case-for-multi-instance-support/</guid><category>Architecture</category></item></channel></rss>