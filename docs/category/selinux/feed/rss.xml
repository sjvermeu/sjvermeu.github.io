<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Simplicity is a form of art... - SELinux</title><link>https://blog.siphos.be/</link><description></description><lastBuildDate>Wed, 06 Jan 2021 20:00:00 +0100</lastBuildDate><item><title>SELinux System Administration 3rd Edition</title><link>https://blog.siphos.be/2021/01/selinux-system-administration-3rd-edition/</link><description>&lt;p&gt;As I mentioned previously, recently my latest installment of "SELinux System
Administration" has been released by Packt Publishing. This is already the
third edition of the book, after the first (2013) and second (2016) editions
have gotten reasonable success given the technical and often hard nature of
full SELinux administration.&lt;/p&gt;
&lt;p&gt;Like with the previous editions, this book remains true to the public of
system administrators, rather than SELinux policy developers. Of course,
SELinux policy development is not ignored in the book.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 06 Jan 2021 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2021-01-06:/2021/01/selinux-system-administration-3rd-edition/</guid><category>selinux</category><category>packt</category><category>book</category></item><item><title>SELinux and extended permissions</title><link>https://blog.siphos.be/2017/11/selinux-and-extended-permissions/</link><description>&lt;p&gt;One of the features present in the &lt;a href="https://github.com/SELinuxProject/selinux/wiki/Releases"&gt;August release&lt;/a&gt; of the SELinux user space is its support for ioctl xperm rules in modular policies. In the past, this was only possible in monolithic ones (and CIL). Through this, allow rules can be extended to not only cover source (domain) and target (resource) identifiers, but also a specific number on which it applies. And ioctl's are the first (and currently only) permission on which this is implemented.&lt;/p&gt;
&lt;p&gt;Note that ioctl-level permission controls isn't a new feature by itself, but the fact that it can be used in modular policies is.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 20 Nov 2017 17:00:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2017-11-20:/2017/11/selinux-and-extended-permissions/</guid><category>selinux</category><category>ioctl</category></item><item><title>SELinux Userspace 2.7</title><link>https://blog.siphos.be/2017/09/selinux-userspace-2.7/</link><description>&lt;p&gt;A few days ago, &lt;a href="http://blog.perfinion.com/"&gt;Jason "perfinion" Zaman&lt;/a&gt; stabilized the 2.7 SELinux userspace on
Gentoo. This release has quite a &lt;a href="https://raw.githubusercontent.com/wiki/SELinuxProject/selinux/files/releases/20170804/RELEASE-20170804.txt"&gt;few new features&lt;/a&gt;, which I'll cover in later
posts, but for distribution packagers the main change is that the userspace
now has many more components to package. The project has split up the
policycoreutils package in separate packages so that deployments can be made
more specific.&lt;/p&gt;
&lt;p&gt;Let's take a look at all the various userspace packages again, learn what their
purpose is, so that you can decide if they're needed or not on a system. Also,
when I cover the contents of a package, be aware that it is based on the deployment
on my system, which might or might not be a complete installation (as with Gentoo,
different USE flags can trigger different package deployments).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 26 Sep 2017 14:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2017-09-26:/2017/09/selinux-userspace-2.7/</guid><category>gentoo</category><category>selinux</category><category>userspace</category></item><item><title>Using nVidia with SELinux</title><link>https://blog.siphos.be/2017/08/using-nvidia-with-selinux/</link><description>&lt;p&gt;Yesterday I've &lt;a href="http://blog.siphos.be/2017/08/switch-to-gentoo-sources/"&gt;switched to the gentoo-sources kernel package&lt;/a&gt; on Gentoo Linux.
And with that, I also attempted (succesfully) to use the propriatary nvidia drivers
so that I can enjoy both a smoother 3D experience while playing minecraft, as well
as use the CUDA support so I don't need to use cloud-based services for small
exercises.&lt;/p&gt;
&lt;p&gt;The move to nvidia was quite simple, as the &lt;a href="https://wiki.gentoo.org/wiki/NVidia/nvidia-drivers"&gt;nvidia-drivers wiki article&lt;/a&gt; on
the Gentoo wiki was quite easy to follow.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 23 Aug 2017 19:04:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2017-08-23:/2017/08/using-nvidia-with-selinux/</guid><category>gentoo</category><category>selinux</category><category>nvidia</category></item><item><title>SELinux System Administration, 2nd Edition</title><link>https://blog.siphos.be/2016/12/selinux-system-administration-2nd-edition/</link><description>&lt;p&gt;While still working on a few other projects, one of the time consumers of the
past half year (haven't you noticed? my blog was quite silent) has come to an
end: the &lt;a href="https://www.packtpub.com/networking-and-servers/selinux-system-administration-second-edition"&gt;SELinux System Administration - Second Edition&lt;/a&gt;
book is now available. With almost double the amount of pages and a serious
update of the content, the book can now be bought either through Packt Publishing
itself, or the various online bookstores such as &lt;a href="https://www.amazon.com/SELinux-System-Administration-Sven-Vermeulen-ebook/dp/B01LWM02WI"&gt;Amazon&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the holidays now approaching, I hope to be able to execute a few tasks
within the Gentoo community (and of the Gentoo Foundation) and get back on track.
Luckily, my absence was not jeopardizing the state of &lt;a href="https://wiki.gentoo.org/wiki/SELinux"&gt;SELinux&lt;/a&gt;
in Gentoo thanks to the efforts of Jason Zaman.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 22 Dec 2016 19:26:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2016-12-22:/2016/12/selinux-system-administration-2nd-edition/</guid><category>selinux</category><category>gentoo</category><category>rhel</category><category>redhat</category><category>packt</category><category>book</category><category>publishing</category></item><item><title>We do not ship SELinux sandbox</title><link>https://blog.siphos.be/2016/09/we-do-not-ship-selinux-sandbox/</link><description>&lt;p&gt;A few days ago a vulnerability was reported in the SELinux sandbox user space
utility. The utility is part of the &lt;code&gt;policycoreutils&lt;/code&gt; package. Luckily, Gentoo's
&lt;code&gt;sys-apps/policycoreutils&lt;/code&gt; package is not vulnerable - and not because we were
clairvoyant about this issue, but because we don't ship this utility.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 27 Sep 2016 20:47:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2016-09-27:/2016/09/we-do-not-ship-selinux-sandbox/</guid><category>selinux</category><category>sandbox</category><category>gentoo</category><category>vulnerability</category><category>seunshare</category></item><item><title>Getting su to work in init scripts</title><link>https://blog.siphos.be/2015/09/getting-su-to-work-in-init-scripts/</link><description>&lt;p&gt;While developing an init script which has to switch user, I got a couple of
errors from SELinux and the system itself:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;~# rc-service hadoop-namenode format&lt;/span&gt;
&lt;span class="go"&gt;Authenticating root.&lt;/span&gt;
&lt;span class="go"&gt; * Formatting HDFS ...&lt;/span&gt;
&lt;span class="go"&gt;su: Authentication service cannot retrieve authentication info&lt;/span&gt;
&lt;span class="go"&gt;(Ignored)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 14 Sep 2015 16:37:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-09-14:/2015/09/getting-su-to-work-in-init-scripts/</guid><category>selinux</category><category>initrc</category></item><item><title>Doing away with interfaces</title><link>https://blog.siphos.be/2015/08/doing-away-with-interfaces/</link><description>&lt;p&gt;CIL is SELinux' Common Intermediate Language, which brings on a whole new set of
possibilities with policy development. I hardly know CIL but am (slowly)
learning. Of course, the best way to learn is to try and do lots of things with
it, but real-life work and time-to-market for now forces me to stick with the
M4-based refpolicy one.&lt;/p&gt;
&lt;p&gt;Still, I do try out some things here and there, and one of the things I wanted
to look into was how CIL policies would deal with interfaces.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 29 Aug 2015 11:30:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-08-29:/2015/08/doing-away-with-interfaces/</guid><category>selinux</category><category>cil</category></item><item><title>Why we do confine Firefox</title><link>https://blog.siphos.be/2015/08/why-we-do-confine-firefox/</link><description>&lt;p&gt;If you're a bit following the SELinux development community you will know
&lt;a href="http://danwalsh.livejournal.com"&gt;Dan Walsh&lt;/a&gt;, a &lt;a href="http://people.redhat.com/dwalsh/"&gt;Red Hat&lt;/a&gt;
security engineer. Today he &lt;a href="http://danwalsh.livejournal.com/72697.html"&gt;blogged&lt;/a&gt; 
about &lt;em&gt;CVE-2015-4495 and SELinux, or why doesn't SELinux confine Firefox&lt;/em&gt;. He 
should've asked why the &lt;em&gt;reference policy&lt;/em&gt; or &lt;em&gt;Red Hat/Fedora policy&lt;/em&gt; does not
confine Firefox, because SELinux is, as I've
&lt;a href="http://blog.siphos.be/2015/08/dont-confuse-selinux-with-its-policy/"&gt;mentioned before&lt;/a&gt;,
not the same as its policy.&lt;/p&gt;
&lt;p&gt;In effect, Gentoo's SELinux policy &lt;em&gt;does&lt;/em&gt; confine Firefox by default. One of the
principles we focus on in Gentoo Hardened is to
&lt;a href="https://wiki.gentoo.org/wiki/Project:SELinux/Development_policy#Develop_desktop_policies"&gt;develop desktop policies&lt;/a&gt;
in order to reduce exposure and information leakage of user documents. We might
not have the manpower to confine all desktop applications, but I do think it is
worthwhile to at least attempt to do this, even though what Dan Walsh mentioned
is also correct: desktops are notoriously difficult to use a mandatory access
control system on.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 11 Aug 2015 19:18:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-08-11:/2015/08/why-we-do-confine-firefox/</guid><category>gentoo</category><category>selinux</category><category>policy</category><category>firefox</category><category>cve</category><category>vulnerability</category><category>xdg</category></item><item><title>Can SELinux substitute DAC?</title><link>https://blog.siphos.be/2015/08/can-selinux-substitute-dac/</link><description>&lt;p&gt;A nice &lt;a href="https://twitter.com/sjvermeu/status/630107879123623936"&gt;twitter discussion&lt;/a&gt;
with &lt;a href="https://twitter.com/erlheldata"&gt;Erling Hellenäs&lt;/a&gt; caught my full attention later
when I was heading home: Can SELinux substitute DAC? I know it can't and doesn't
in the current implementation, but why not and what would be needed?&lt;/p&gt;
&lt;p&gt;SELinux is implemented through the &lt;a href="https://en.wikipedia.org/wiki/Linux_Security_Modules"&gt;Linux Security Modules framework&lt;/a&gt;
which allows for different security systems to be implemented and integrated
in the Linux kernel. Through LSM, various security-sensitive operations can be
secured further through &lt;em&gt;additional&lt;/em&gt; access checks. This criteria was made to
have LSM be as minimally invasive as possible.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 09 Aug 2015 14:48:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-08-09:/2015/08/can-selinux-substitute-dac/</guid><category>selinux</category><category>refpolicy</category><category>linux</category><category>dac</category><category>lsm</category></item><item><title>Filtering network access per application</title><link>https://blog.siphos.be/2015/08/filtering-network-access-per-application/</link><description>&lt;p&gt;Iptables (and the successor nftables) is a powerful packet filtering system in
the Linux kernel, able to create advanced firewall capabilities. One of the 
features that it &lt;em&gt;cannot&lt;/em&gt; provide is per-application filtering. Together with
SELinux however, it is possible to implement this on a &lt;em&gt;per domain&lt;/em&gt; basis.&lt;/p&gt;
&lt;p&gt;SELinux does not know applications, but it knows domains. If we ensure that each
application runs in its own domain, then we can leverage the firewall
capabilities with SELinux to only allow those domains access that we need.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 07 Aug 2015 03:49:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-08-07:/2015/08/filtering-network-access-per-application/</guid><category>selinux</category><category>network</category><category>iptables</category></item><item><title>Don't confuse SELinux with its policy</title><link>https://blog.siphos.be/2015/08/dont-confuse-selinux-with-its-policy/</link><description>&lt;p&gt;With the increased attention that SELinux is getting thanks to its inclusion in
recent &lt;a href="https://source.android.com/devices/tech/security/selinux/"&gt;Android&lt;/a&gt;
releases, more and more people are understanding that SELinux is not a singular
security solution. Many administrators are still disabling SELinux on their 
servers because it does not play well with their day-to-day operations. But
the Android inclusion shows that SELinux itself is not the culprit for this:
it is the policy.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 03 Aug 2015 01:49:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-08-03:/2015/08/dont-confuse-selinux-with-its-policy/</guid><category>selinux</category><category>policy</category><category>cil</category></item><item><title>Loading CIL modules directly</title><link>https://blog.siphos.be/2015/07/loading-cil-modules-directly/</link><description>&lt;p&gt;In a &lt;a href="http://blog.siphos.be/2015/06/where-does-cil-play-in-the-selinux-system/"&gt;previous
post&lt;/a&gt;
I used the &lt;code&gt;secilc&lt;/code&gt; binary to load an additional test policy. Little did
I know (and that's actually embarrassing because it was one of the
things I complained about) that you can just use the CIL policy as
modules directly.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMMARY --&gt;

&lt;p&gt;With this I mean that a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 15 Jul 2015 15:54:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-07-15:/2015/07/loading-cil-modules-directly/</guid><category>cil</category><category>selinux</category></item><item><title>Restricting even root access to a folder</title><link>https://blog.siphos.be/2015/07/restricting-even-root-access-to-a-folder/</link><description>&lt;p&gt;In a
&lt;a href="http://blog.siphos.be/2014/01/private-key-handling-and-selinux-protection/comment-page-1/#comment-143323"&gt;comment&lt;/a&gt;
Robert asked how to use SELinux to prevent even root access to a
directory. The trivial solution would be not to assign an administrative
role to the root account (which is definitely possible, but you want
some way to gain administrative access otherwise ;-)&lt;/p&gt;
&lt;p&gt;Restricting root is one of the commonly referred features of a MAC
(Mandatory Access Control) system. With a well designed user management
and sudo environment, it is fairly trivial - but if you need to start
from the premise that a user has direct root access, it requires some
thought to implement it correctly. The main "issue" is not that it is
difficult to implement policy-wise, but that most users will start from
a pre-existing policy (such as the reference policy) and build on top of
that.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 11 Jul 2015 14:09:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-07-11:/2015/07/restricting-even-root-access-to-a-folder/</guid></item><item><title>Intermediate policies</title><link>https://blog.siphos.be/2015/07/intermediate-policies/</link><description>&lt;p&gt;When developing SELinux policies for new software (or existing ones
whose policies I don't agree with) it is often more difficult to finish
the policies so that they are broadly usable. When dealing with personal
policies, having them "just work" is often sufficient. To make the
policies reusable for distributions (or for the upstream project), a
number of things are necessary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Try structuring the policy using the style as suggested by refpolicy
    or Gentoo&lt;/li&gt;
&lt;li&gt;Add the role interfaces that are most likely to be used or required,
    or which are in the current draft implemented differently&lt;/li&gt;
&lt;li&gt;Refactor some of the policies to use refpolicy/Gentoo style
    interfaces&lt;/li&gt;
&lt;li&gt;Remove the comments from the policies (as refpolicy does not want
    too verbose policies)&lt;/li&gt;
&lt;li&gt;Change or update the file context definitions for default
    installations (rather than the custom installations I use)&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 05 Jul 2015 18:17:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-07-05:/2015/07/intermediate-policies/</guid><category>community</category><category>contributions</category><category>policy-development</category><category>selinux</category></item><item><title>Where does CIL play in the SELinux system?</title><link>https://blog.siphos.be/2015/06/where-does-cil-play-in-the-selinux-system/</link><description>&lt;p&gt;SELinux policy developers already have a number of file formats to work
with. Currently, policy code is written in a set of three files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;.te&lt;/code&gt; file contains the SELinux policy code (type
    enforcement rules)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;.if&lt;/code&gt; file contains functions which turn a set of arguments into
    blocks of SELinux policy code (interfaces). These functions are
    called by other interface files or type enforcement files&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;.fc&lt;/code&gt; file contains mappings of file path expressions towards
    labels (file contexts)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These files are compiled into loadable modules (or a base module) which
are then transformed to an active policy. But this is not a single-step
approach.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 13 Jun 2015 23:12:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-06-13:/2015/06/where-does-cil-play-in-the-selinux-system/</guid><category>cil</category><category>selinux</category><category>userspace</category></item><item><title>Testing with permissive domains</title><link>https://blog.siphos.be/2015/05/testing-with-permissive-domains/</link><description>&lt;p&gt;When testing out new technologies or new setups, not having (proper)
SELinux policies can be a nuisance. Not only are the number of SELinux
policies that are available through the standard repositories limited,
some of these policies are not even written with the same level of
confinement that an administrator might expect. Or perhaps the
technology to be tested is used in a completely different manner.&lt;/p&gt;
&lt;p&gt;Without proper policies, any attempt to start such a daemon or
application might or will cause permission violations. In many cases,
developers or users tend to disable SELinux enforcing then so that they
can continue playing with the new technology. And why not? After all,
policy development is to be done &lt;em&gt;after&lt;/em&gt; the technology is understood.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 18 May 2015 13:40:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-05-18:/2015/05/testing-with-permissive-domains/</guid><category>permissive</category><category>policy</category><category>selinux</category><category>semanage</category><category>test</category></item><item><title>Use change management when you are using SELinux to its fullest</title><link>https://blog.siphos.be/2015/04/use-change-management-when-you-are-using-selinux-to-its-fullest/</link><description>&lt;p&gt;If you are using SELinux on production systems (with which I mean
systems that you offer services with towards customers or other parties
beyond you, yourself and your ego), please consider proper change
management if you don't do already. SELinux is a very sensitive security
subsystem - not in the sense …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 30 Apr 2015 20:58:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-04-30:/2015/04/use-change-management-when-you-are-using-selinux-to-its-fullest/</guid><category>change-management</category><category>policy</category><category>selinux</category></item><item><title>CIL and attributes</title><link>https://blog.siphos.be/2015/02/cil-and-attributes/</link><description>&lt;p&gt;I keep on struggling to remember this, so let's make a blog post out of
it ;-)&lt;/p&gt;
&lt;p&gt;When the SELinux policy is being built, recent userspace (2.4 and
higher) will convert the policy into CIL language, and then build the
binary policy. When the policy supports type attributes, these are …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 15 Feb 2015 15:49:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-02-15:/2015/02/cil-and-attributes/</guid><category>attribute</category><category>cil</category><category>selinux</category></item><item><title>SELinux is great for enterprises (but many don't know it yet)</title><link>https://blog.siphos.be/2015/01/selinux-is-great-for-enterprises-but-many-dont-know-it-yet/</link><description>&lt;p&gt;Large companies that handle their own IT often have internal support
teams for many of the technologies that they use. Most of the time, this
is for reusable components like database technologies, web application
servers, operating systems, middleware components (like file transfers,
messaging infrastructure, ...) and more. All components that are …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 03 Jan 2015 13:36:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2015-01-03:/2015/01/selinux-is-great-for-enterprises-but-many-dont-know-it-yet/</guid><category>companies</category><category>configuration</category><category>engineering</category><category>enterprise</category><category>selinux</category></item><item><title>Why does it access /etc/shadow?</title><link>https://blog.siphos.be/2014/12/why-does-it-access-etcshadow/</link><description>&lt;p&gt;While updating the SELinux policy for the Courier IMAP daemon, I noticed
that it (well, the authdaemon that is part of Courier) wanted to access
&lt;code&gt;/etc/shadow&lt;/code&gt;, which is of course a big no-no. It doesn't take long to
know that this is through the PAM support (more specifically,
&lt;code&gt;pam_unix …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 30 Dec 2014 22:48:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-12-30:/2014/12/why-does-it-access-etcshadow/</guid><category>chkpwd</category><category>pam</category><category>selinux</category><category>shadow</category><category>unix_chkpwd</category></item><item><title>Using multiple priorities with modules</title><link>https://blog.siphos.be/2014/10/using-multiple-priorities-with-modules/</link><description>&lt;p&gt;One of the new features of the 2.4 SELinux userspace is support for
module priorities. The idea is that distributions and administrators can
override a (pre)loaded SELinux policy module with another module without
removing the previous module. This lower-version module will remain in
the store, but will not …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 31 Oct 2014 18:24:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-10-31:/2014/10/using-multiple-priorities-with-modules/</guid><category>priorities</category><category>priority</category><category>selinux</category><category>semodule</category></item><item><title>After SELinux System Administration, now the SELinux Cookbook</title><link>https://blog.siphos.be/2014/09/after-selinux-system-administration-now-the-selinux-cookbook/</link><description>&lt;p&gt;Almost an entire year ago (just a few days apart) I
&lt;a href="http://blog.siphos.be/2013/09/it-has-finally-arrived-selinux-system-administration/"&gt;announced&lt;/a&gt;
my first published book, called &lt;a href="https://www.packtpub.com/networking-and-servers/selinux-system-administration"&gt;SELinux System
Administration&lt;/a&gt;.
The book covered SELinux administration commands and focuses on Linux
administrators that need to interact with SELinux-enabled systems.&lt;/p&gt;
&lt;p&gt;An important part of SELinux was only covered very briefly in the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 24 Sep 2014 20:10:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-09-24:/2014/09/after-selinux-system-administration-now-the-selinux-cookbook/</guid></item><item><title>Segmentation fault when emerging packages after libpcre upgrade?</title><link>https://blog.siphos.be/2014/07/segmentation-fault-when-emerging-packages-after-libpcre-upgrade/</link><description>&lt;p&gt;SELinux users might be facing failures when emerge is merging a package
to the file system, with an error that looks like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; Setting SELinux security labels
/usr/lib64/portage/bin/misc-functions.sh: line 1112: 23719 Segmentation fault      /usr/sbin/setfiles &amp;quot;${file_contexts_path}&amp;quot; -r &amp;quot;${D}&amp;quot; &amp;quot;${D}&amp;quot;
 * ERROR: dev-libs/libpcre-8.35::gentoo …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 09 Jul 2014 20:35:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-07-09:/2014/07/segmentation-fault-when-emerging-packages-after-libpcre-upgrade/</guid><category>file_contexts</category><category>fix</category><category>Gentoo</category><category>libselinux</category><category>pcre</category></item><item><title>D-Bus and SELinux</title><link>https://blog.siphos.be/2014/06/d-bus-and-selinux/</link><description>&lt;p&gt;After a &lt;a href="http://blog.siphos.be/2014/06/d-bus-quick-recap/"&gt;post about
D-Bus&lt;/a&gt; comes the
inevitable related post about SELinux with D-Bus.&lt;/p&gt;
&lt;p&gt;Some users might not know that D-Bus is an SELinux-aware application.
That means it has SELinux-specific code in it, which has the D-Bus
behavior based on the SELinux policy (and might not necessarily honor
the "permissive …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 30 Jun 2014 20:07:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-06-30:/2014/06/d-bus-and-selinux/</guid><category>busconfig</category><category>d-bus</category><category>dbus</category><category>linux</category><category>policy</category><category>selinux</category></item><item><title>Chroots for SELinux enabled applications</title><link>https://blog.siphos.be/2014/06/chroots-for-selinux-enabled-applications/</link><description>&lt;p&gt;Today I had to prepare a chroot jail (thank you grsecurity for the neat
additional chroot protection features) for a SELinux-enabled
application. As a result, "just" making a chroot was insufficient: the
application needed access to &lt;code&gt;/sys/fs/selinux&lt;/code&gt;. Of course, granting
access to &lt;code&gt;/sys&lt;/code&gt; is not something I like …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 22 Jun 2014 20:16:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-06-22:/2014/06/chroots-for-selinux-enabled-applications/</guid><category>bind-mount</category><category>bindmount</category><category>mount</category><category>read-only</category><category>ro</category><category>selinux</category></item><item><title>Visualizing constraints</title><link>https://blog.siphos.be/2014/05/visualizing-constraints/</link><description>&lt;p&gt;SELinux constraints are an interesting way to implement specific, well,
constraints on what SELinux allows. Most SELinux rules that users come
in contact with are purely type oriented: allow something to do
something against something. In fact, most of the SELinux rules applied
on a system are such &lt;code&gt;allow&lt;/code&gt; rules …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 31 May 2014 03:47:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-05-31:/2014/05/visualizing-constraints/</guid><category>constrain</category><category>constraints</category><category>dot</category><category>graphviz</category><category>seinfo</category><category>selinux</category></item><item><title>If things are weird, check for policy.29</title><link>https://blog.siphos.be/2014/04/if-things-are-weird-check-for-policy-29/</link><description>&lt;p&gt;Today we analyzed a weird issue one of our SELinux users had with their
system. He had a denial when calling &lt;strong&gt;audit2allow&lt;/strong&gt;, informing us that
&lt;code&gt;sysadm_t&lt;/code&gt; had no rights to read the SELinux policy. This is a known
issue that has been resolved in our current SELinux policy repository
but …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 17 Apr 2014 21:01:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-04-17:/2014/04/if-things-are-weird-check-for-policy-29/</guid><category>load_policy</category><category>policy</category><category>selinux</category><category>semanage</category></item><item><title>Decoding the hex-coded path information in AVC denials</title><link>https://blog.siphos.be/2014/03/decoding-the-hex-coded-path-information-in-avc-denials/</link><description>&lt;p&gt;When investigating AVC denials, some denials show a path that isn't
human readable, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type=AVC msg=audit(1396189189.734:1913): avc:  denied  { execute } for  pid=17955 comm=&amp;quot;emerge&amp;quot; path=2F7661722F666669737A69596157202864656C6574656429 dev=&amp;quot;dm-3&amp;quot; ino=1838 scontext=staff_u:sysadm_r:portage_t tcontext=staff_u:object_r:var_t tclass=file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To know what this …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 30 Mar 2014 16:37:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-03-30:/2014/03/decoding-the-hex-coded-path-information-in-avc-denials/</guid><category>avc</category><category>decode</category><category>path</category><category>selinux</category></item><item><title>Querying SELinux policy for boolean information</title><link>https://blog.siphos.be/2014/03/querying-selinux-policy-for-boolean-information/</link><description>&lt;p&gt;Within an SELinux policy, certain access vectors (permissions) can be
conditionally granted based on the value of a &lt;em&gt;SELinux boolean&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To find the list of SELinux booleans that are available on your system,
you can use the &lt;strong&gt;getsebool -a&lt;/strong&gt; method, or &lt;strong&gt;semanage boolean -l&lt;/strong&gt;. The
latter also displays the description …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 28 Mar 2014 23:38:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-03-28:/2014/03/querying-selinux-policy-for-boolean-information/</guid><category>boolean</category><category>query</category><category>selinux</category><category>sesearch</category></item><item><title>Switching context depending on user code-wise</title><link>https://blog.siphos.be/2014/01/switching-context-depending-on-user-code-wise/</link><description>&lt;p&gt;I blogged about how SELinux decides what the context should be for a
particular Linux user; how it checks the default context(s) and tells
the SELinux-aware application on what the new context should be. Let's
look into the C code that does so, and how an application should behave …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 12 Jan 2014 22:43:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-01-12:/2014/01/switching-context-depending-on-user-code-wise/</guid><category>default_context</category><category>domain</category><category>libselinux</category><category>selinux</category><category>selinux-aware</category><category>transition</category></item><item><title>How does foo_t get this privilege?</title><link>https://blog.siphos.be/2014/01/how-does-foo_t-get-this-privilege/</link><description>&lt;p&gt;Today a question was raised how the unprivileged user domain &lt;code&gt;user_t&lt;/code&gt;
was allowed to write to &lt;code&gt;cgroup_t&lt;/code&gt; files. There is nothing obvious about
that in the &lt;code&gt;roles/unprivuser.te&lt;/code&gt; file, so what gives?&lt;/p&gt;
&lt;p&gt;I used a simple script (which I've been using for a while already)
called &lt;strong&gt;seshowtree&lt;/strong&gt; which presents …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 05 Jan 2014 04:14:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-01-05:/2014/01/how-does-foo_t-get-this-privilege/</guid><category>policy</category><category>selinux</category><category>seshowtree</category></item><item><title>Oh it is cron again...</title><link>https://blog.siphos.be/2014/01/oh-it-is-cron-again/</link><description>&lt;p&gt;Today I was pointed to the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test fcron[6722]: fcron[6722] 3.1.2 started
test fcron[6722]: Cannot bind socket to &amp;#39;/var/run/fcron.fifo&amp;#39;: Permission denied
test fcron[6722]:  &amp;quot;at&amp;quot; reboot jobs will only be run at computer&amp;#39;s startup.
test fcron[6722]: updating configuration from …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 03 Jan 2014 21:05:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-01-03:/2014/01/oh-it-is-cron-again/</guid><category>cron</category><category>selinux</category></item><item><title>Private key handling and SELinux protection</title><link>https://blog.siphos.be/2014/01/private-key-handling-and-selinux-protection/</link><description>&lt;p&gt;In this post I'll give some insight in a &lt;em&gt;possible&lt;/em&gt; SELinux policy for a
script I wrote.&lt;/p&gt;
&lt;p&gt;The script is a certificate authority handling script, in which I can
generate a private key (and certificate assigned to it), sign the
certificate either by itself (for the root CA key) or …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 02 Jan 2014 04:00:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2014-01-02:/2014/01/private-key-handling-and-selinux-protection/</guid><category>ca</category><category>certcli</category><category>policy</category><category>selinux</category></item><item><title>Limiting file access with SELinux alone?</title><link>https://blog.siphos.be/2013/12/limiting-file-access-with-selinux-alone/</link><description>&lt;p&gt;While writing a small script to handle simple certificate authority
activities using OpenSSL, I considered how to properly protect the files
that OpenSSL uses for these activities. As you are probably aware, a
system that hosts the necessary files for CA activities (like signing
certificate requests) should be very secure …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 31 Dec 2013 21:18:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-12-31:/2013/12/limiting-file-access-with-selinux-alone/</guid><category>access</category><category>acl</category><category>file-access</category><category>Gentoo</category><category>selinux</category></item><item><title>It has finally arrived: SELinux System Administration</title><link>https://blog.siphos.be/2013/09/it-has-finally-arrived-selinux-system-administration/</link><description>&lt;p&gt;Almost everyone has it - either physical or in their heads: a list of
things you want to do or achieve before you... well, stop existing. Mine
still has numerous things on it (I should get on it, I know) but one of
the items on that list has recently been …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 27 Sep 2013 15:10:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-09-27:/2013/09/it-has-finally-arrived-selinux-system-administration/</guid><category>administration</category><category>book</category><category>fedora</category><category>Gentoo</category><category>packt</category><category>packtpub</category><category>selinux</category><category>system</category></item><item><title>Network routing based on SELinux?</title><link>https://blog.siphos.be/2013/08/network-routing-based-on-selinux/</link><description>&lt;p&gt;Today we had a question on #selinux if it was possible to route traffic
of a specific process using SELinux. The answer to this is "no",
although it has to be explained a bit in more detail.&lt;/p&gt;
&lt;p&gt;SELinux does not route traffic. SELinux is a local mandatory access
control system …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 21 Aug 2013 19:43:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-08-21:/2013/08/network-routing-based-on-selinux/</guid><category>ipsec</category><category>netlabel</category><category>networking</category><category>secmark</category><category>selinux</category></item><item><title>Some things sound more scary than they are</title><link>https://blog.siphos.be/2013/08/some-things-sound-more-scary-than-they-are/</link><description>&lt;p&gt;A few days ago I finally got to the next thing on my &lt;em&gt;Want to do this
year&lt;/em&gt; list: put a new android
(&lt;a href="http://www.cyanogenmod.org/"&gt;Cyanogenmod&lt;/a&gt;) on my tablet, which was
still running the stock Android - but hasn't seen any updates in more
than a year. Considering the (in)security of Android …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 15 Aug 2013 10:02:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-08-15:/2013/08/some-things-sound-more-scary-than-they-are/</guid><category>android</category><category>grsecurity</category><category>pax</category><category>selinux</category><category>tablet</category></item><item><title>Rebuilding SELinux contexts with sefcontext_compile</title><link>https://blog.siphos.be/2013/07/rebuilding-selinux-contexts-with-sefcontext_compile/</link><description>&lt;p&gt;A recent update of &lt;em&gt;libpcre&lt;/em&gt; caused the binary precompiled regular
expression files of SELinux to become outdated (and even blatantly
wrong). The details are in bug &lt;a href="https://bugs.gentoo.org/471718"&gt;471718&lt;/a&gt;
but that doesn't help the users that are already facing the problem, nor
have we found a good place to put the fix …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 08 Jul 2013 20:55:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-07-08:/2013/07/rebuilding-selinux-contexts-with-sefcontext_compile/</guid><category>hardened</category><category>pcre</category><category>selinux</category></item><item><title>A SELinux policy for incron: finishing up</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-finishing-up/</link><description>&lt;p&gt;After 9 posts, it's time to wrap things up. You can review the final
results online
(&lt;a href="http://dev.gentoo.org/~swift/blog/01/incron.te.txt"&gt;incron.te&lt;/a&gt;,
&lt;a href="http://dev.gentoo.org/~swift/blog/01/incron.if.txt"&gt;incron.if&lt;/a&gt; and
&lt;a href="http://dev.gentoo.org/~swift/blog/01/incron.fc.txt"&gt;incron.fc&lt;/a&gt;) and
adapt to your own needs if you want. But we should also review what we
have accomplished so far...&lt;/p&gt;
&lt;p&gt;We built the start of an entire …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 31 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-31:/2013/05/a-selinux-policy-for-incron-finishing-up/</guid><category>incron</category><category>policy</category><category>selinux</category></item><item><title>A SELinux policy for incron: using booleans</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-using-booleans/</link><description>&lt;p&gt;After using a default set of directories to watch, and &lt;a href="http://blog.siphos.be/2013/05/a-selinux-policy-for-incron-marking-types-eligible-for-watching/"&gt;allowing admins
to mark other
types&lt;/a&gt;
as such as well, let's consider another approach for making the policy
more flexible: booleans. The idea now is that a boolean called
&lt;em&gt;incron_notify_non_security_files&lt;/em&gt; enables &lt;strong&gt;incrond&lt;/strong&gt; to be
notified on changes on all possible …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 30 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-30:/2013/05/a-selinux-policy-for-incron-using-booleans/</guid><category>boolean</category><category>incron</category><category>policy</category><category>selinux</category></item><item><title>A SELinux policy for incron: marking types eligible for watching</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-marking-types-eligible-for-watching/</link><description>&lt;p&gt;In the
&lt;a herf="http://blog.siphos.be/2013/05/a-selinux-policy-for-incron-default-set/"&gt;previous
post&lt;/a&gt; we made &lt;strong&gt;incrond&lt;/strong&gt; able to watch &lt;code&gt;public_content_t&lt;/code&gt; and
&lt;code&gt;public_content_rw_t&lt;/code&gt; types. However, this is not scalable, so we might
want to be able to update the policy more dynamically with additional
types. To accomplish this, we will make types eligible for watching
through an attribute.&lt;/p&gt;
&lt;p&gt;So how …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 29 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-29:/2013/05/a-selinux-policy-for-incron-marking-types-eligible-for-watching/</guid><category>attribute</category><category>incrond</category><category>selinux</category><category>watch</category></item><item><title>A SELinux policy for incron: default set</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-default-set/</link><description>&lt;p&gt;I finished the last post a bit with a
&lt;a href="http://blog.siphos.be/2013/05/a-selinux-policy-for-incron-the-incrond-daemon/"&gt;cliffhanger&lt;/a&gt;
as &lt;strong&gt;incrond&lt;/strong&gt; is still not working properly, and we got a few denials
that needed to be resolved; here they are again for your convenience:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type=AVC msg=audit(1368734110.912:28353): avc:  denied  { getattr } for  pid=9716 comm=&amp;quot;incrond …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 28 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-28:/2013/05/a-selinux-policy-for-incron-default-set/</guid><category>booleans</category><category>incrond</category><category>policy</category><category>selinux</category></item><item><title>A SELinux policy for incron: the incrond daemon</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-the-incrond-daemon/</link><description>&lt;p&gt;With &lt;code&gt;incrontab_t&lt;/code&gt; (hopefully) complete, let's look at the &lt;code&gt;incrond_t&lt;/code&gt;
domain. As this domain will also be used to execute the user (and
system) commands provided through the incrontabs, we need to consider
how we are going to deal with this wide range of possible permissions
that it might take. One …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 27 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-27:/2013/05/a-selinux-policy-for-incron-the-incrond-daemon/</guid><category>incrond</category><category>selinux</category></item><item><title>A SELinux policy for incron: new types and transitions</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-new-types-and-transitions/</link><description>&lt;p&gt;So I've shown the &lt;a href="http://blog.siphos.be/2013/05/a-selinux-policy-for-incron-basic-set-for-incrontab/"&gt;iterative approach
used&lt;/a&gt;
to develop policies. Again, please be aware that this is my way of
developing policies, other policy developers might have a different
approach. We were working on the &lt;strong&gt;incrontab&lt;/strong&gt; command, so let's
continue with trying to create a new user incrontab:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ incrontab -e …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 26 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-26:/2013/05/a-selinux-policy-for-incron-new-types-and-transitions/</guid><category>incron</category><category>policy</category><category>selinux</category></item><item><title>A SELinux policy for incron: basic set for incrontab</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-basic-set-for-incrontab/</link><description>&lt;p&gt;Now that our &lt;a href="http://blog.siphos.be/2013/05/a-selinux-policy-for-incron-our-first-interface/"&gt;regular user is
allowed&lt;/a&gt;
to execute &lt;strong&gt;incrontab&lt;/strong&gt;, let's fire it up and look at the denials to
build up the policy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ incrontab --help
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That doesn't show much does it? Well, if you look into the &lt;code&gt;audit.log&lt;/code&gt;
(or &lt;code&gt;avc.log&lt;/code&gt;) file, you'll notice a lot of denials …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 25 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-25:/2013/05/a-selinux-policy-for-incron-basic-set-for-incrontab/</guid><category>incron</category><category>incrontab</category><category>policy</category><category>selinux</category></item><item><title>A SELinux policy for incron: our first interface</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-our-first-interface/</link><description>&lt;p&gt;The next step after having &lt;a href="http://blog.siphos.be/2013/05/a-selinux-policy-for-incron-the-basic-skeleton/"&gt;a basic
skeleton&lt;/a&gt;
is to get &lt;strong&gt;incrontab&lt;/strong&gt; running. We know however that everything invoked
from the main daemon will be running with the rights of the daemon
context (unless we would patch the source code, but that is beyond the
scope of this set of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 24 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-24:/2013/05/a-selinux-policy-for-incron-our-first-interface/</guid><category>incron</category><category>interface</category><category>policy</category></item><item><title>A SELinux policy for incron: the basic skeleton</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-the-basic-skeleton/</link><description>&lt;p&gt;So, in the &lt;a href="http://blog.siphos.be/2013/05/a-selinux-policy-for-incron-what-does-it-do/"&gt;previous
post&lt;/a&gt;
I talked about &lt;em&gt;incron&lt;/em&gt; and why I think moving it into the existing cron
policy would not be a good idea. It works, somewhat, but is probably not
that future-proof. So we're going to create our own policy for it.&lt;/p&gt;
&lt;p&gt;In SELinux, policies are generally …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 23 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-23:/2013/05/a-selinux-policy-for-incron-the-basic-skeleton/</guid><category>fc</category><category>incron</category><category>policy</category><category>selinux</category><category>skeleton</category><category>te</category></item><item><title>A SELinux policy for incron: what does it do?</title><link>https://blog.siphos.be/2013/05/a-selinux-policy-for-incron-what-does-it-do/</link><description>&lt;p&gt;In this series of posts, we'll go through the creation of a SELinux
policy for
&lt;a href="http://inotify.aiken.cz/?section=incron&amp;amp;page=doc⟨=en"&gt;incron&lt;/a&gt;, a simple
inotify based cron-like application. I will talk about the various steps
that I would take in the creation of this policy, and give feedback when
certain decisions are taken and why. At …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 22 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-22:/2013/05/a-selinux-policy-for-incron-what-does-it-do/</guid><category>incron</category><category>policy</category><category>selinux</category></item><item><title>Why oh why does a process run in unlabeled_t?</title><link>https://blog.siphos.be/2013/05/why-oh-why-does-a-process-run-in-unlabeled_t/</link><description>&lt;p&gt;If you notice that a process is running in the &lt;code&gt;unlabeled_t&lt;/code&gt; domain, the
first question to ask is how it got there.&lt;/p&gt;
&lt;p&gt;Well, one way is to have a process running in a known domain, like
&lt;code&gt;screen_t&lt;/code&gt;, after which the SELinux policy module that provides this
domain is removed from …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 21 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-21:/2013/05/why-oh-why-does-a-process-run-in-unlabeled_t/</guid><category>policy</category><category>selinux</category><category>unlabeled</category></item><item><title>The weird "audit_access" permission</title><link>https://blog.siphos.be/2013/05/the-weird-audit_access-permission/</link><description>&lt;p&gt;While writing up the posts on capabilities, one thing I had in my mind
was to give some additional information on frequently occurring denials,
such as the &lt;em&gt;dac_override&lt;/em&gt; and &lt;em&gt;dac_read_search&lt;/em&gt; capabilities, and
when they are triggered. For the DAC-related capabilities, policy
developers often notice that these capabilities are triggered without …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 19 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-19:/2013/05/the-weird-audit_access-permission/</guid><category>access</category><category>audit</category><category>audit_access</category><category>selinux</category></item><item><title>Commandline SELinux policy helper functions</title><link>https://blog.siphos.be/2013/05/commandline-selinux-policy-helper-functions/</link><description>&lt;p&gt;To work on SELinux policies, I use a couple of functions that I can call
on the shell (command line): &lt;strong&gt;seshowif&lt;/strong&gt;, &lt;strong&gt;sefindif&lt;/strong&gt;, &lt;strong&gt;seshowdef&lt;/strong&gt;
and &lt;strong&gt;sefinddef&lt;/strong&gt;. The idea behind the methods is that I want to search
(&lt;em&gt;find&lt;/em&gt;) for an interface (&lt;em&gt;if&lt;/em&gt;) or definition (&lt;em&gt;def&lt;/em&gt;) that contains a
particular method or …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 18 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-18:/2013/05/commandline-selinux-policy-helper-functions/</guid><category>bash</category><category>definition</category><category>functions</category><category>interface</category><category>policy</category><category>selinux</category><category>support</category></item><item><title>SECMARK and SELinux</title><link>https://blog.siphos.be/2013/05/secmark-and-selinux/</link><description>&lt;p&gt;When using SECMARK, the administrator configures the &lt;strong&gt;iptables&lt;/strong&gt; or
&lt;strong&gt;netfilter&lt;/strong&gt; rules to add a label to the packet data structure (on the
host itself) that can be governed through SELinux policies. Unlike peer
labeling, here the labels assigned to the network traffic is completely
locally defined. Consider the following command …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 13 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-13:/2013/05/secmark-and-selinux/</guid><category>policy</category><category>secmark</category><category>selinux</category></item><item><title>Peer labeling in SELinux policy</title><link>https://blog.siphos.be/2013/05/peer-labeling-in-selinux-policy/</link><description>&lt;p&gt;Allow me to start with an important warning: I don't have much hands-on
experience with the remainder of this post. Its based on the few
resources I found on the Internet and a few tests done locally which
I've investigated in my attempt to understand SELinux policy writing for
networking …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 12 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-12:/2013/05/peer-labeling-in-selinux-policy/</guid><category>cipso</category><category>ipsec</category><category>peer</category><category>policy</category><category>selinux</category></item><item><title>SELinux policy and network controls</title><link>https://blog.siphos.be/2013/05/selinux-policy-and-network-controls/</link><description>&lt;p&gt;Let's talk about how SELinux governs network streams (and how it
reflects this into the policy).&lt;/p&gt;
&lt;p&gt;When you don't do fancy stuff like SECMARK or netlabeling, then the
classes that you should keep an eye on are &lt;em&gt;tcp_socket&lt;/em&gt; and
&lt;em&gt;udp_socket&lt;/em&gt; (depending on the protocol). There used to be &lt;em&gt;node&lt;/em&gt; and …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 11 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-11:/2013/05/selinux-policy-and-network-controls/</guid><category>networking</category><category>policy</category><category>selinux</category></item><item><title>SELinux mount options</title><link>https://blog.siphos.be/2013/05/selinux-mount-options/</link><description>&lt;p&gt;When you read through the &lt;a href="http://www.gentoo.org/proj/en/hardened/selinux/selinux-handbook.xml"&gt;Gentoo Hardened SELinux
handbook&lt;/a&gt;,
you'll notice that we sometimes update &lt;code&gt;/etc/fstab&lt;/code&gt; with some
SELinux-specific settings. So, what are these settings about and are
there more of them?&lt;/p&gt;
&lt;p&gt;First of all, let's look at a particular example from the installation
instructions so you see what …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 01 May 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-05-01:/2013/05/selinux-mount-options/</guid><category>mount</category><category>selinux</category></item><item><title>How logins get their SELinux user context</title><link>https://blog.siphos.be/2013/04/how-logins-get-their-selinux-user-context/</link><description>&lt;p&gt;Sometimes, especially when users are converting their systems to be
SELinux-enabled, their user context is wrong. An example would be when,
after logon (in permissive mode), the user is in the
&lt;code&gt;system_u:system_r:local_login_t&lt;/code&gt; domain instead of a user domain like
&lt;code&gt;staff_u:staff_r:staff_t&lt;/code&gt;.&lt;br&gt;
So, how does a login get …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 27 Apr 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-04-27:/2013/04/how-logins-get-their-selinux-user-context/</guid><category>context</category><category>selinux</category><category>user</category></item><item><title>Using strace to troubleshoot SELinux problems</title><link>https://blog.siphos.be/2013/04/using-strace-to-troubleshoot-selinux-problems/</link><description>&lt;p&gt;When SELinux is playing tricks on you, you can just "allow" whatever it
wants to do, but that is not always an option: sometimes, there is no
denial in sight because the problem lays within SELinux-aware
applications (applications that might change their behavior based on
what the policy sais or …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 24 Apr 2013 03:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-04-24:/2013/04/using-strace-to-troubleshoot-selinux-problems/</guid><category>debug</category><category>selinux</category><category>strace</category></item><item><title>SELinux tutorial series, update</title><link>https://blog.siphos.be/2013/03/selinux-tutorial-series-update/</link><description>&lt;p&gt;Just a small update - the &lt;a href="https://wiki.gentoo.org/wiki/SELinux/Tutorials"&gt;set of SELinux
tutorials&lt;/a&gt; has been
enhanced since my last blog post about it with information on SELinux
booleans, customizable types, run-time modi (enforcing versus
permissive), some bits about unconfined domains, information on policy
loading, purpose of SELinux roles, SELinux users and an example on …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 18 Mar 2013 23:22:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-03-18:/2013/03/selinux-tutorial-series-update/</guid></item><item><title>SELinux tutorial series</title><link>https://blog.siphos.be/2013/03/selinux-tutorial-series/</link><description>&lt;p&gt;As we get a growing number of SELinux users within Gentoo Hardened and
because the SELinux usage at the firm I work at is most likely going to
grow as well, I decided to join the bunch of documents on SELinux that
are "out there" and start a series of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 15 Mar 2013 00:34:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2013-03-15:/2013/03/selinux-tutorial-series/</guid><category>articles</category><category>documentation</category><category>Gentoo</category><category>hardened</category><category>selinux</category><category>tutorials</category><category>wiki</category></item><item><title>Using pam_selinux to switch contexts</title><link>https://blog.siphos.be/2012/12/using-pam_selinux-to-switch-contexts/</link><description>&lt;p&gt;With SELinux managing the access controls of applications towards the
resources on the system, a not-to-be forgotten important component on
any Unix/Linux system is the authentication part. Most systems use or
support PAM, the &lt;em&gt;Pluggable Authentication Modules&lt;/em&gt;, and for SELinux
this plays an important role.&lt;/p&gt;
&lt;p&gt;Applications that are PAM-enabled …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 10 Dec 2012 22:11:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2012-12-10:/2012/12/using-pam_selinux-to-switch-contexts/</guid></item><item><title>Local policy management script</title><link>https://blog.siphos.be/2012/11/local-policy-management-script/</link><description>&lt;p&gt;I've written a small script that I call &lt;strong&gt;selocal&lt;/strong&gt; which manages
locally needed SELinux rules. It allows me to add or remove SELinux
rules from the command line and have them loaded up without needing to
edit a .te file and building the .pp file manually. If you are
interested …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 11 Nov 2012 13:37:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2012-11-11:/2012/11/local-policy-management-script/</guid></item><item><title>Lots of work on supporting swig-2</title><link>https://blog.siphos.be/2012/08/lots-of-work-on-supporting-swig-2/</link><description>&lt;p&gt;The SELinux &lt;a href="http://oss.tresys.com/projects/setools/"&gt;setools&lt;/a&gt;
&lt;a href="http://packages.gentoo.org/package/app-admin/setools"&gt;package&lt;/a&gt; provides
a few of the commands I used the most when working with SELinux:
&lt;strong&gt;sesearch&lt;/strong&gt; for looking through the policy and &lt;strong&gt;seinfo&lt;/strong&gt; to get
information on type/attribute/role/... from the currently loaded policy.&lt;/p&gt;
&lt;p&gt;This package uses &lt;a href="http://www.swig.org/"&gt;swig&lt;/a&gt;, the Simplified (sic)
Wrapper and Interface Generator to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 20 Aug 2012 20:50:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2012-08-20:/2012/08/lots-of-work-on-supporting-swig-2/</guid></item><item><title>Dynamic transitions in SELinux</title><link>https://blog.siphos.be/2012/07/dynamic-transitions-in-selinux/</link><description>&lt;p&gt;In between talks on heap spraying techniques and visualization of data
for fast analysis, I'm working on integrating the chromium SELinux
policy that was offered in bug &lt;a href="https://bugs.gentoo.org/show_bug.cgi?id=412637"&gt;bug
#412637&lt;/a&gt; within Gentoo
Hardened. If you take a look at the bug, you notice I'm not really fond
of the policy because …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 22 Jul 2012 21:11:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2012-07-22:/2012/07/dynamic-transitions-in-selinux/</guid></item><item><title>Transitioning to MCS policies</title><link>https://blog.siphos.be/2012/02/transitioning-to-mcs-policies/</link><description>&lt;p&gt;Since I started maintaining the &lt;a href="http://hardened.gentoo.org/selinux"&gt;SELinux
policies&lt;/a&gt; for &lt;a href="http://hardened.gentoo.org"&gt;Gentoo
Hardened&lt;/a&gt;, the policy types we supported
were primarily &lt;code&gt;strict&lt;/code&gt; and &lt;code&gt;targeted&lt;/code&gt;. About half a year ago, we also
started supported &lt;code&gt;mcs&lt;/code&gt; and offered the possibility for using &lt;code&gt;mls&lt;/code&gt; as
well (but didn't really support that one).&lt;/p&gt;
&lt;p&gt;With the recent release of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 24 Feb 2012 22:12:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2012-02-24:/2012/02/transitioning-to-mcs-policies/</guid></item><item><title>Trying out initramfs with selinux and grsec</title><link>https://blog.siphos.be/2012/01/trying-out-initramfs-with-selinux-and-grsec/</link><description>&lt;p&gt;I'm no fan of initramfs. All my systems boot up just fine without it, so
I often see it as an additional layer of obfuscation. But there are
definitely cases where initramfs is needed, and from the &lt;a href="http://thread.gmane.org/gmane.linux.gentoo.devel/74464"&gt;looks of
it&lt;/a&gt;, we might be
needing to push out some documentation and …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 15 Jan 2012 12:58:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2012-01-15:/2012/01/trying-out-initramfs-with-selinux-and-grsec/</guid></item><item><title>Unix domain sockets are files</title><link>https://blog.siphos.be/2011/12/unix-domain-sockets-are-files/</link><description>&lt;p&gt;Probably not a first for many seasoned Linux administrators, and
probably not correct accordingly to more advanced users than myself, but
I just found out that Unix domain sockets are files. Even when they're
not.&lt;/p&gt;
&lt;p&gt;I have been looking at a weird SELinux denial I had occuring on my
system …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 31 Dec 2011 17:48:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2011-12-31:/2011/12/unix-domain-sockets-are-files/</guid></item><item><title>Some people on #selinux are ... dolphins</title><link>https://blog.siphos.be/2011/07/some-people-on-selinux-are-dolphins/</link><description>&lt;p&gt;A very useful resource for anyone working on or with SELinux policies is
the #selinux chat channel on irc.freenode.net. People like Dominick
Grift and Dan Walsh you would first think are IRC bots (being online all
the time, answering questions), but I recently read that they must be …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 14 Jul 2011 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2011-07-14:/2011/07/some-people-on-selinux-are-dolphins/</guid></item><item><title>Policy 25, 26</title><link>https://blog.siphos.be/2011/06/policy-25-26/</link><description>&lt;p&gt;Recently I've seen quite a few messages on IRC pop up about &lt;code&gt;policy.25&lt;/code&gt;
or even &lt;code&gt;policy.26&lt;/code&gt; so I harassed the guys in the chat channel to talk
about it. Apparently, these new binary policy formats add support for
filename transitions and non-process role transitions.&lt;/p&gt;
&lt;p&gt;Currently, when you initiate …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 01 Jun 2011 21:32:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2011-06-01:/2011/06/policy-25-26/</guid></item><item><title>SELinux file contexts</title><link>https://blog.siphos.be/2011/05/selinux-file-contexts/</link><description>&lt;p&gt;If you have been working with SELinux for a while, you know that file
contexts are an important part of the policy and its enforcement. File
contexts are used to inform the SELinux tools which type a file,
directory, socket, ... should have. These types are then used to manage
the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 15 May 2011 13:39:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2011-05-15:/2011/05/selinux-file-contexts/</guid></item><item><title>SELinux User-Based Access Control</title><link>https://blog.siphos.be/2011/05/selinux-user-based-access-control/</link><description>&lt;p&gt;Within the reference policy, support is given to a feature called &lt;em&gt;UBAC
constraints&lt;/em&gt;. Here, UBAC stands for &lt;em&gt;User Based Access Control&lt;/em&gt;. The
idea behind the constraint is that any activity between two types (say
&lt;code&gt;foo_t&lt;/code&gt; and &lt;code&gt;bar_t&lt;/code&gt;) can be prohibited if the user contexts of the
resources that are using …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Mon, 02 May 2011 22:14:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2011-05-02:/2011/05/selinux-user-based-access-control/</guid></item><item><title>SELinux and noatsecure, or why portage complains about LD_PRELOAD and libsandbox.so</title><link>https://blog.siphos.be/2011/04/selinux-and-noatsecure-or-why-portage-complains-about-ld_preload-and-libsandbox-so/</link><description>&lt;p&gt;If you're fiddling with SELinux policies, you will eventually notice
that the reference policy by default hides certain privilege requests
(which are denied). One of them is noatsecure. But what is noatsecure?
To describe noatsecure, I first need to describe what atsecure is. And
to describe what that is, we …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Fri, 22 Apr 2011 21:00:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2011-04-22:/2011/04/selinux-and-noatsecure-or-why-portage-complains-about-ld_preload-and-libsandbox-so/</guid></item><item><title>Updates on SELinux docs, added FAQ</title><link>https://blog.siphos.be/2011/03/updates-on-selinux-docs-added-faq/</link><description>&lt;p&gt;As you're probably noticing from my &lt;a href="https://twitter.com/#!/sjvermeu"&gt;twitter
feed&lt;/a&gt; and the various posts earlier in
my blog, I'm helping out with the Gentoo Hardened folks to get the
SELinux support state up to par. Today, the &lt;a href="http://goo.gl/DlHJD"&gt;Gentoo Hardened/SELinux
Handbook&lt;/a&gt; had a few updates, but the most important
change is that …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Wed, 09 Mar 2011 22:17:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2011-03-09:/2011/03/updates-on-selinux-docs-added-faq/</guid></item><item><title>Portage fails to build due to SELinux?</title><link>https://blog.siphos.be/2011/03/portage-fails-to-build-due-to-selinux/</link><description>&lt;p&gt;If you're having troubles getting Portage to build packages due to
SELinux, then the reason usually is that it is unable to transition to
the proper portage domains. You'll get a nice OSError back with an ugly
backtrace, saying somewhere that "setexeccon" is misbehaving.&lt;/p&gt;
&lt;p&gt;Now, the real issue (not being …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Thu, 03 Mar 2011 00:26:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2011-03-03:/2011/03/portage-fails-to-build-due-to-selinux/</guid></item><item><title>Temporary script for Gentoo Hardened SELinux users</title><link>https://blog.siphos.be/2011/02/temporary-script-for-gentoo-hardened-selinux-users/</link><description>&lt;p&gt;If you are currently using Gentoo Hardened with SELinux, you might have
noticed that we are currently lacking the proper dependencies within our
Portage tree upon the SELinux policies (or, in other words, installing a
package doesn't guarantee that the SELinux policy needed for that
package is pulled in as …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 27 Feb 2011 17:37:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2011-02-27:/2011/02/temporary-script-for-gentoo-hardened-selinux-users/</guid></item><item><title>SELinux for Gentoo Hardened</title><link>https://blog.siphos.be/2011/02/selinux-for-gentoo-hardened/</link><description>&lt;p&gt;Recently, most of the SELinux-related ebuilds from the hardened overlay
have been moved to the official Portage tree. Hopefully, this will
trigger more people / organizations to try Gentoo Hardened with SELinux
and help us improve the ebuilds. They're still marked as \~arch (as they
should be). The draft &lt;a href="http://goo.gl/DlHJD"&gt;SELinux handbook …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 06 Feb 2011 23:26:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2011-02-06:/2011/02/selinux-for-gentoo-hardened/</guid></item><item><title>Confining user applications</title><link>https://blog.siphos.be/2011/01/confining-user-applications/</link><description>&lt;p&gt;Ever since I started using SELinux, I'm getting more and more fond of
what it can do for (security) administrators. Lately, I've started
confining user applications (like &lt;strong&gt;skype&lt;/strong&gt;) in the idea that I do not
want any application connecting to the Internet or working with content
received from untrusted sources …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sun, 16 Jan 2011 16:23:00 +0100</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2011-01-16:/2011/01/confining-user-applications/</guid></item><item><title>SELinux enforcing for console activity</title><link>https://blog.siphos.be/2010/10/selinux-enforcing-for-console-activity/</link><description>&lt;p&gt;I'm now able to boot into my system with SELinux in enforcing mode
(without unconfined domains), do standard system administration tasks as
root / sysadm_r (including the relevant Portage activities) and work as
a regular user as long as I don't want to run in Xorg. I'm not going to
focus …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Sat, 30 Oct 2010 21:30:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2010-10-30:/2010/10/selinux-enforcing-for-console-activity/</guid></item><item><title>SELinux quicky</title><link>https://blog.siphos.be/2010/09/selinux-quicky/</link><description>&lt;p&gt;I've been using SELinux for a few days now (in permissive mode, just to
get to know things) and have learned a few interesting commands (or
other nice-to-know's) for using SELinux. Since I'm going to forget those
the moment all is running well, I'll "document" them here ;-) I'm not
going …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Vermeulen</dc:creator><pubDate>Tue, 14 Sep 2010 23:44:00 +0200</pubDate><guid isPermaLink="false">tag:blog.siphos.be,2010-09-14:/2010/09/selinux-quicky/</guid></item></channel></rss>